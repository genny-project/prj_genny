package life.genny.rules;

import life.genny.utils.OutputParam;

import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QEventAttributeValueChangeMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import io.vertx.core.json.JsonObject;
import life.genny.utils.OutputParam;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.qwanda.Answer;
import life.genny.utils.BaseEntityUtils;
import life.genny.utils.TableUtils;
import life.genny.utils.CacheSearchUtils;
import life.genny.qwandautils.GennySettings;
import life.genny.jbpm.customworkitemhandlers.ShowFrame;
import life.genny.qwanda.rule.RuleDetails;
import io.vavr.Tuple;
import java.util.Base64;
import io.vavr.Tuple2;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.exception.BadDataException;


rule "JOURNAL_CHANGE_EVENT"
    ruleflow-group 'ChangeProcessing'
	salience 2
    no-loop
    when
			message : QEventAttributeValueChangeMessage((event_type matches "EVT_ATTRIBUTE_VALUE_CHANGE") && (getBe().getCode() matches "JNL_\\S+") )	
			ruleDetails : RuleDetails()
			beUtils : BaseEntityUtils()
			serviceToken : GennyToken (code == "PER_SERVICE" )
    then
			System.out.println(ruleDetails+" "+drools.getRule().getName()+" Processing Change Event : " + message );
			 	     
			/* Set up resultant intern be to be sent out */ 	     
			 	     
			 	     
			/* Get journal baseentity */
			BaseEntity journal = beUtils.getBaseEntityByCode(message.getBe().getCode());
			 	     
			/* Work out intern */
			
			String internCode =  	journal.getValue("LNK_INTERN",null);
			if (internCode != null) {
			 	     internCode = internCode.substring(2,internCode.length()-2);
			 	     
			 	     BaseEntity intern = beUtils.getBaseEntityByCode(internCode);
			 	     String internshipCode = journal.getValue("LNK_INTERNSHIP",null);
			 	     if (internshipCode != null) {
			 	     internCode = internCode.substring(2,internCode.length()-2);
			 	     internshipCode = internshipCode.substring(2,internshipCode.length()-2);
			 	     BaseEntity internship = beUtils.getBaseEntityByCode(internshipCode);
			 	     BaseEntity sendIntern = new BaseEntity(intern.getCode(),intern.getName());
			 	     
			 	     
					/* Calculate the number of journals for the intern */
			
					SearchEntity	searchBE = new SearchEntity("SBE_TEST", "internjournals")
					.addSort("PRI_NAME", "Created", SearchEntity.Sort.ASC)
					.addFilter("PRI_CODE", SearchEntity.StringFilter.LIKE, "JNL_%").addFilter("LNK_INTERN",SearchEntity.StringFilter.LIKE, "%"+intern.getCode()+"%")
					.addColumn("PRI_CODE", "Name");

					Tuple2<String, List<String>> results = beUtils.getHql(searchBE); 
					String hql = results._1;
					String hql2 = Base64.getUrlEncoder().encodeToString(hql.getBytes());
					try {
						String resultJsonStr = QwandaUtils.apiGet(
							GennySettings.qwandaServiceUrl + "/qwanda/baseentitys/count24/" + hql2, serviceToken.getToken(),
							120);

				
						Integer count = Integer.decode(resultJsonStr);
						System.out.println("Interns jo0urnal Count = " + count);
				
						/* Update the journal count for the intern */
						Answer journalCount = new Answer(beUtils.getGennyToken().getUserCode(), intern.getCode(), "PRI_NUM_JOURNALS",
						count);
						beUtils.saveAnswer(journalCount);
				
							/* Write the message to the appropriate stakeholders */
			
							List<String> rxList = new ArrayList<String>();
							/* intern */
							rxList.add(intern.getCode());
			
							/* supervisor */
							String supervisorCode = internship.getValue("LNK_INTERN_SUPERVISOR",null);
							
							if (supervisorCode != null) {	
							 	supervisorCode = supervisorCode.substring(2,supervisorCode.length()-2);							
								rxList.add(supervisorCode);
							}
							/* host company rep */
							String hcCode = internship.getValue("LNK_HOST_COMPANY_REP",null);
							
							if (hcCode != null) {	
							 	hcCode = hcCode.substring(2,hcCode.length()-2);							
								rxList.add(hcCode);
							}
			
							/* agent */
			
							/* superuser */ 	
							rxList.add("SUPERUSER");
			
							/* send */
							try {
								intern = beUtils.getBaseEntityByCode(intern.getCode());
								String[] filterArray = {"PRI_NUM_JOURNALS"};
								intern  = VertxUtils.privacyFilter(intern, filterArray);
								QDataBaseEntityMessage msg = new QDataBaseEntityMessage(intern);
								msg.setToken(serviceToken.getToken());
								msg.setReplace(true);
								msg.setRecipientCodeArray(rxList.toArray(new String[0]));
								VertxUtils.writeMsg("project", JsonUtils.toJson(msg));

							} catch (Exception e) {
								/* TODO Auto-generated catch block */
								e.printStackTrace();
							}
				
					} catch (Exception e1) {
						e1.printStackTrace();
					}
				}
			}     
			 	     
  	       retract( message);
  	    
end
