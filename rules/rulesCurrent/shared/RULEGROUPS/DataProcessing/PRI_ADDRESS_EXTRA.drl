package life.genny.rules;

import life.genny.qwandautils.QwandaUtils;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.Answers;
import io.vertx.core.json.JsonObject;
import java.util.Map;
import java.util.HashMap;
import life.genny.utils.VertxUtils;
import life.genny.qwanda.attribute.EntityAttribute;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwandautils.JsonUtils;
import org.apache.commons.lang3.StringUtils;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.io.UnsupportedEncodingException;
import life.genny.utils.DropdownUtils;
import java.util.List;
import java.util.ArrayList;

rule "HELPER_PRI_ADDRESS_EXTRA"
	ruleflow-group 'DataProcessing'
	salience 5000
	when
		beUtils : BaseEntityUtils()
		answer : Answer( attributeCode == "PRI_ADDRESS_EXTRA")
		serviceToken : GennyToken( code == "PER_SERVICE")
		userToken : GennyToken( code != "PER_SERVICE")

	then
		System.out.println(drools.getRule().getName() + " triggered");
		
		String sourceCode = beUtils.getGennyToken().getUserCode();
		System.out.println("sourceCode :: " + sourceCode);
		
		String targetCode = answer.getTargetCode();
		System.out.println("targetCode :: " + targetCode);
		
		String addressExtra = answer.getValue();
		System.out.println("addressExtra :: " + addressExtra);

		BaseEntity be = beUtils.getBaseEntityByCode(targetCode);
		if(be != null){
			Optional<String> optAddress = be.getValue("PRI_ADDRESS_FULL");
			if (optAddress.isPresent()){
				String address = optAddress.get().trim();
				System.out.println("PRI_ADDRESS_FULL is present");
				
				if(!address.isEmpty()){
					System.out.println("PRI_ADDRESS_FULL is NOT EMPTY");
					address = addressExtra + "/" + address;
					Answer addressAnswer = new Answer(sourceCode, targetCode, "PRI_ADDRESS_FULL", address);
					beUtils.saveAnswer(addressAnswer);
					VertxUtils.sendToFrontEnd(userToken, addressAnswer);
				}
			}
		}
end