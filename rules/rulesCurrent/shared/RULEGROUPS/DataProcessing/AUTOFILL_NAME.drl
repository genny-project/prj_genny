package life.genny.rules;

import life.genny.qwandautils.QwandaUtils;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.Answers;
import io.vertx.core.json.JsonObject;
import java.util.Map;
import java.util.HashMap;
import life.genny.utils.VertxUtils;
import life.genny.qwanda.attribute.EntityAttribute;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwandautils.JsonUtils;
import org.apache.commons.lang3.StringUtils;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.io.UnsupportedEncodingException;
import life.genny.utils.DropdownUtils;
import java.util.List;
import java.util.ArrayList;

rule "AUTOFILL_NAME"
	ruleflow-group 'DataProcessing'
	salience 5000
	when
		beUtils : BaseEntityUtils()
		answer : Answer ((attributeCode == "PRI_NAME" || attributeCode == "PRI_LEGAL_NAME") && 
                            targetCode matches "CPY_.*" &&
							inferred == true
						)
		serviceToken : GennyToken( code == "PER_SERVICE")
		userToken : GennyToken( code != "PER_SERVICE")
	then
		System.out.println(drools.getRule().getName() + " triggered");

		Boolean inferred = answer.getInferred();
		System.out.println("inferred   ::   " + inferred);

		 if(inferred == null){
			System.out.println("Answer message doesnt have inferred set to true");
			return;
		}
		
		Boolean saveName = false;

		if(inferred){
			String targetCode = answer.getTargetCode();
			System.out.println("targetCode   ::   " + targetCode); 

			String attributeCode = answer.getAttributeCode();
			System.out.println("attributeCode   ::   " + attributeCode);

			if(targetCode == null){
				System.out.println("Answer message doesnt have targetCode");
				return;
			}

			BaseEntity companyBe = beUtils.getBaseEntityByCode(targetCode);
			if(companyBe == null){
				System.out.println("companyBe is null");
				return;
			}

			Optional<String> optAbn = companyBe.getValue("PRI_ABN");
			if (optAbn.isPresent()){
				String abn = optAbn.get().trim();
				if(!abn.isEmpty()){

					if (QwandaUtils.isValidAbnFormat(abn)) {
						System.out.println("ABN is valid");

						/* if abn is valid, check if the abn exists in the system */
						SearchEntity searchBE = new SearchEntity("SBE_UNIQUE_ABN", "Unique Abn")
								.addFilter("PRI_CODE", SearchEntity.StringFilter.LIKE, "CPY_%") 
								.addFilter("PRI_ABN", SearchEntity.StringFilter.EQUAL, abn) 
								.addColumn("PRI_NAME", "Name")
								.setPageStart(0)
								.setPageSize(100);
						
						searchBE.setRealm(beUtils.getServiceToken().getRealm());

						TableUtils tableUtils = new TableUtils(beUtils);
						Long abnCount = tableUtils.performCount(searchBE);
						System.out.println("abnCount   ::   " + abnCount);

						if(abnCount > 0){
							System.out.println("ABN is NOT UNIQUE. Not saving PRI_NAME and PRI_LEGAL_NAME");
							saveName = false;
						}
					}
				}
			}else{
				saveName = true;
			}

		}else{
			saveName = true;
		}
		if(saveName){
			Answer nameAnswer = new Answer(answer.getSourceCode(), answer.getTargetCode(), answer.getAttributeCode(), answer.getValue());
			beUtils.saveAnswer(nameAnswer);
			VertxUtils.sendToFrontEnd(userToken, nameAnswer);
		}

        retract(answer);
end
