package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import io.vertx.core.json.JsonObject;
import java.util.Map;
import java.util.HashMap;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.List;
import com.google.gson.reflect.TypeToken;
import life.genny.qwandautils.JsonUtils;
import life.genny.utils.VertxUtils;
import life.genny.utils.TableUtils;
import life.genny.models.TableData;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.qwanda.Ask;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.utils.OutputParam;
import life.genny.jbpm.customworkitemhandlers.ShowFrame;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.attribute.EntityAttribute;



rule "PRI_SEARCH_SORT"
	ruleflow-group 'DataProcessing'
	salience 450
	no-loop true
    when
      beUtils : BaseEntityUtils()
	  serviceToken : GennyToken( code == "PER_SERVICE")
	  answer : Answer( attributeCode  matches "SRT_.*"  && targetCode matches "SBE_.*" )   /* this is a pure search */
	  output : OutputParam( )
 
     then
  		System.out.println("Rule -> "+drools.getRule().getName()+" :  user=" + beUtils.getGennyToken().getUserCode()+" : "+answer);

		String targetCode = answer.getTargetCode();
		
	 
			SearchEntity searchBE = VertxUtils.getObject(beUtils.getGennyToken().getRealm(), "", targetCode, SearchEntity.class,
				beUtils.getGennyToken().getToken());
			
			
			/* Update the sorts */
			List<EntityAttribute> sortEAs = searchBE.findPrefixEntityAttributes("SRT_");
			if (!sortEAs.isEmpty()) {
				for (EntityAttribute sortEA : sortEAs) {
					Double weight = sortEA.getWeight();
					sortEA.setWeight(weight + 1.0);
					if (sortEA.getAttributeCode().equals("SRT_"+answer.getAttributeCode())) {
						sortEA.setWeight(0.0);
						sortEA.setValue(answer.getValue());
					}
				}
			}
			VertxUtils.putObject(beUtils.getGennyToken().getRealm(), "", searchBE.getCode(), searchBE,
				beUtils.getGennyToken().getToken());
		
			long totalTime = TableUtils.searchTable(beUtils,searchBE, true);

	
			retract(answer);
			System.out.println("total took " + (totalTime) + " ms"); 
			output.setTypeOfResult("NONE");
			output.setResultCode("NONE");  /* dont display anything new */
  	    

end
