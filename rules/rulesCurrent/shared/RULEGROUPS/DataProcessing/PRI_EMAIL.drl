package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.Answers;
import io.vertx.core.json.JsonObject;
import java.util.Map;
import java.util.HashMap;
import life.genny.utils.VertxUtils;
import life.genny.qwandautils.JsonUtils;
import org.apache.commons.lang3.text.WordUtils;

import java.util.List;
import java.util.ArrayList;
import org.apache.commons.lang3.StringUtils;



rule "PRI_EMAIL"
    ruleflow-group 'DataProcessing'
        salience 50 
    when
      beUtils : BaseEntityUtils()
	  answer : Answer( attributeCode == "PRI_EMAIL" )
	  output : OutputParam( )
     then
 		System.out.println("Rule -> PRI_EMAIL :  user=" + beUtils.getGennyToken().getUserCode()+" : "+answer); 
		
		/* check if email is already in use for a person */
		
				SearchEntity searchBE = new SearchEntity(drools.getRule().getName(), "Email People")
				.addFilter("PRI_CODE", SearchEntity.StringFilter.LIKE, "PER_%") 
				.addFilter("PRI_EMAIL", SearchEntity.StringFilter.EQUAL, answer.getValue()) 
				.addColumn("PRI_NAME", "Name")
				.setPageStart(0)
				.setPageSize(100);
		
			searchBE.setRealm(beUtils.getServiceToken().getRealm());
		
 		List<BaseEntity> people = new ArrayList<BaseEntity>();

		Tuple2<String, List<String>> data = beUtils.getHql(searchBE);
		String hql = data._1;

		hql = Base64.getUrlEncoder().encodeToString(hql.getBytes());
		try {
			String resultJsonStr = QwandaUtils.apiGet(
					GennySettings.qwandaServiceUrl + "/qwanda/baseentitys/count24/" + hql ,
					beUtils.getServiceToken().getToken(), 120);

	System.out.println("Search EMAIL result is "+resultJsonStr);
			if (resultJsonStr.equals("0")) {
				System.out.println("This email "+answer.getValue()+" is unique");
			}	else {
					String message = "Email Address "+answer.getValue()+" is already taken";
					answer.setValue("");
					VertxUtils.sendFeedbackError(beUtils.getGennyToken(),answer,message);
					retract(answer);
			
			}
		} catch (Exception e) {
		
		}
		
			
		output.setTypeOfResult("NONE");
  	    output.setResultCode("NONE");  /* dont display anything new */
		
	
end
