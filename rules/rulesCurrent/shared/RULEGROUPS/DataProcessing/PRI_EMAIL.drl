package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.Answers;
import io.vertx.core.json.JsonObject;
import java.util.Map;
import java.util.HashMap;
import life.genny.utils.VertxUtils;
import life.genny.qwandautils.JsonUtils;
import org.apache.commons.lang3.text.WordUtils;

import java.util.List;
import java.util.ArrayList;
import org.apache.commons.lang3.StringUtils;



rule "PRI_EMAIL"
    ruleflow-group 'DataProcessing'
        salience 5000 
        no-loop true
    when
      	beUtils : BaseEntityUtils()
	  	answer : Answer( attributeCode == "PRI_EMAIL" && value != "")
	  	serviceToken : GennyToken( code == "PER_SERVICE")
	 	userToken : GennyToken( code != "PER_SERVICE")
	 	answersToSave : Answers()
	  	output : OutputParam( )
	  	ruleDetails : RuleDetails()
	  	allowed: Allowed((code == "USER") || (code == "EDIT_INTERN") || (code == "EDIT_HCR") || (code == "EDIT_EPR") || (code == "EDIT_REF_PART_REP") || (code == "EDIT_AGENT"))	  	
     then
 		System.out.println(ruleDetails+" "+drools.getRule().getName()+"   user=" + beUtils.getGennyToken().getUserCode()+" : "+answer); 
 		
 		String sourceCode = beUtils.getGennyToken().getUserCode();
		String targetCode = answer.getTargetCode();
		JsonObject resultJson = null;
		String duplicateCodes = null;
		String number = null; 

		/* check if email is already in use for a person */
		
		SearchEntity searchBE = new SearchEntity(drools.getRule().getName(), "Email People")
				.addFilter("PRI_CODE", SearchEntity.StringFilter.LIKE, "PER_%") 
				.addFilter("PRI_EMAIL", SearchEntity.StringFilter.EQUAL, answer.getValue()) 
				.setSearchStatus(EEntityStatus.PENDING)
				.addColumn("PRI_NAME", "Name")
				.setPageStart(0)
				.setPageSize(100);
		
		searchBE.setRealm(beUtils.getServiceToken().getRealm());
			
		/* Check number of duplicates */
		Tuple2<String, List<String>> data = beUtils.getHql(searchBE);
		String hql = data._1;

		hql = Base64.getUrlEncoder().encodeToString(hql.getBytes());
		try {
			String resultJsonStr = QwandaUtils.apiGet(
					GennySettings.qwandaServiceUrl + "/qwanda/baseentitys/count24/" + hql ,
					beUtils.getServiceToken().getToken(), 120);

			System.out.println(ruleDetails+" "+drools.getRule().getName()+"  Search EMAIL result is "+resultJsonStr);
			
			if (resultJsonStr.equals("0")) {
				System.out.println(ruleDetails+" "+drools.getRule().getName()+"  This email "+answer.getValue()+" is unique");
				/* Now sync to their keycloak account */
				/*	if (answer.getValue().startsWith("adamcrow")) { */
				BaseEntity target = beUtils.getBaseEntityByCode(answer.getTargetCode());
				if ((answer.getTargetCode().startsWith("PER_")) && (target != null)) {

					Boolean allowedToChange = false;
					String keycloakUUID = answer.getTargetCode().substring("PER_".length());
					if (userToken.getUserCode().equals(answer.getTargetCode())) {
						allowedToChange = true;
					}
					System.out.println(ruleDetails+" "+drools.getRule().getName()+" the allowed.code is "+allowed.code);
					/* check if capability to change passwords is there */
					switch (allowed.code) {
						case "USER": {allowedToChange = true;} break;
						case "EDIT_INTERN": {allowedToChange = true;} break;
						case "EDIT_AGENT":  {allowedToChange = true;} break;
						case "EDIT_HCR":    {allowedToChange = true;} break;
						case "EDIT_EPR":    {allowedToChange = true;} break;
						case "EDIT_REF_PART_REP": {allowedToChange = true;} break;
					}

					if (allowedToChange) {

							int statusCode =  KeycloakUtils.updateUserEmail(keycloakUUID,serviceToken.getToken(), userToken.getRealm(),answer.getValue());
							System.out.println(ruleDetails+" "+drools.getRule().getName()+"  Changing email for "+answer.getTargetCode()+" to "+answer.getValue()+" statusCode="+statusCode);
							if (statusCode > 204) {
								System.out.println(ruleDetails+" "+drools.getRule().getName()+"  Error in setting email."+answer.getTargetCode()+" to "+answer.getValue()+" statusCode="+statusCode);

								System.out.println("Checking remote server for " + targetCode);

								String remoteBEJson = QwandaUtils.apiGet(
										GennySettings.remoteServerUrl + "/qwanda/baseentitys/code/" + targetCode, 
										userToken.getToken(), 
										120
										);

								BaseEntity remoteBE = JsonUtils.fromJson(remoteBEJson, BaseEntity.class);

								List<EntityAttribute> isAs = target.findPrefixEntityAttributes("PRI_IS_MENTEE");

								if (!isAs.isEmpty()) {

									BaseEntity def = beUtils.getDEFByCode("DEF_MENTEE");
									beUtils.create(def, remoteBE.getCode(), remoteBE.getName());

									String firstname = target.getValue("PRI_FIRSTNAME", null);
									String lastname = target.getValue("PRI_LASTNAME", null);
									String email = remoteBE.getValue("PRI_EMAIL", null);

									beUtils.saveAnswer(new Answer(userToken.getUserCode(), remoteBE.getCode(), "PRI_FIRSTNAME", firstname));
									beUtils.saveAnswer(new Answer(userToken.getUserCode(), remoteBE.getCode(), "PRI_LASTNAME", lastname));
									beUtils.saveAnswer(new Answer(userToken.getUserCode(), remoteBE.getCode(), "PRI_EMAIL", email));

									output.setTypeOfResult("SIGNAL");
									output.setResultCode("START_QUICK_ADD");
									output.setSuitCase("MENTEE");
									output.setTargetCode(remoteBE.getCode());
								}

							} else {
								System.out.println(ruleDetails+" "+drools.getRule().getName()+"  Saving the good email");
								Answer goodEmail = new Answer(answer.getSourceCode(), answer.getTargetCode(), "PRI_EMAIL", answer.getValue());
								answersToSave.add(goodEmail);
							}
						/* } else { */
						/* 	System.out.println(ruleDetails+" "+drools.getRule().getName()+"  Saving the good email"); */
						/* 	Answer goodEmail = new Answer(answer.getSourceCode(), answer.getTargetCode(), "PRI_EMAIL", answer.getValue()); */
						/* 	answersToSave.add(goodEmail); */
						/* } */
					}
				}	

			} else {
					if(true /*allowed.code.equals("AGENT")*/) { /* TODO , why limit this to agents??? */
						List<BaseEntity> duplicateBes = beUtils.getBaseEntitys(searchBE);
						System.out.println(ruleDetails+" "+drools.getRule().getName()+"  duplicateBE's: " + duplicateBes);
						
						QDataBaseEntityMessage msg = new QDataBaseEntityMessage(duplicateBes);
						msg.setToken(userToken.getToken());
						msg.setReplace(true);
						VertxUtils.writeMsg("webcmds", JsonUtils.toJson(msg));
						
						for (BaseEntity duplicateBe : duplicateBes) {
								System.out.println(ruleDetails+" "+drools.getRule().getName()+"  duplicateBe: " + duplicateBe);
								duplicateCodes = duplicateCodes + "," + duplicateBe.getCode();
								System.out.println(ruleDetails+" "+drools.getRule().getName()+"  duplicateCodes: " + duplicateCodes);
						}
						
						duplicateCodes = duplicateCodes.substring(5);
						System.out.println(ruleDetails+" "+drools.getRule().getName()+"  Final duplicateCodes: " + duplicateCodes);
						
						QCmdMessage duplicateEmailMsg = new QCmdMessage("DUPLICATE_EMAILS", duplicateCodes);
						duplicateEmailMsg.setMessage(number);
						duplicateEmailMsg.setToken(beUtils.getGennyToken().getToken());
						duplicateEmailMsg.setSend(true);
						VertxUtils.writeMsg("webcmds", duplicateEmailMsg);
						
						
						if (resultJsonStr.equals("0")) {
							number = "There is 1 duplicate email";
						} else {
							number = "There are " + resultJsonStr + " duplicate emails";
						}
						
						QCmdMessage toastMsg = new QCmdMessage("TOAST", "INFO");
						toastMsg.setMessage(number);
						toastMsg.setToken(beUtils.getGennyToken().getToken());
						toastMsg.setSend(true);
						VertxUtils.writeMsg("webcmds", toastMsg);
					}
					
					
					String message = "Email Address "+answer.getValue()+" is already taken. Please delete any unwanted copies or merge data with an existing";
					System.out.println(ruleDetails+" "+drools.getRule().getName()+" "+message);
					Answer feedbackAnswer = new Answer(answer.getSourceCode(),answer.getTargetCode(),answer.getAttributeCode(),"");
					VertxUtils.sendFeedbackError(beUtils.getGennyToken(),feedbackAnswer,message);
					System.out.println(ruleDetails+" "+drools.getRule().getName()+" Sent error message back to frontend");
			
			}
		} catch (Exception e) {
		
		}
		
		retract(answer);
		output.setTypeOfResult("NONE");
  	    output.setResultCode("NONE");  /* dont display anything new */
		update(answersToSave);
	
end
