package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.Answers;
import io.vertx.core.json.JsonObject;
import java.util.Map;
import java.util.HashMap;
import life.genny.utils.VertxUtils;
import life.genny.qwandautils.JsonUtils;
import org.apache.commons.lang3.text.WordUtils;

import java.util.List;
import java.util.ArrayList;
import org.apache.commons.lang3.StringUtils;



rule "PRI_EMAIL"
    ruleflow-group 'DataProcessing'
        salience 5000 
    when
      	beUtils : BaseEntityUtils()
	  	answer : Answer( attributeCode == "PRI_EMAIL" )
	  	serviceToken : GennyToken( code == "PER_SERVICE")
	 	userToken : GennyToken( code != "PER_SERVICE")
	  	output : OutputParam( )
	  	allowed: Allowed((code == "USER") || (code == "EDIT_INTERN") || (code == "EDIT_HCR") || (code == "EDIT_EPR") || (code == "EDIT_REF_PART_REP") || (code == "EDIT_AGENT"))	  	
     then
 		System.out.println("Rule -> PRI_EMAIL :  user=" + beUtils.getGennyToken().getUserCode()+" : "+answer); 
 		
 		String sourceCode = beUtils.getGennyToken().getUserCode();
		String targetCode = answer.getTargetCode();
		JsonObject resultJson = null;
		String duplicateCodes = null;
		String number = null; 
		
		/* check if email is already in use for a person */
		
		SearchEntity searchBE = new SearchEntity(drools.getRule().getName(), "Email People")
				.addFilter("PRI_CODE", SearchEntity.StringFilter.LIKE, "PER_%") 
				.addFilter("PRI_EMAIL", SearchEntity.StringFilter.EQUAL, answer.getValue()) 
				.addColumn("PRI_NAME", "Name")
				.setPageStart(0)
				.setPageSize(100);
		
		searchBE.setRealm(beUtils.getServiceToken().getRealm());
			
		/* Check number of duplicates */
		Tuple2<String, List<String>> data = beUtils.getHql(searchBE);
		String hql = data._1;

		hql = Base64.getUrlEncoder().encodeToString(hql.getBytes());
		try {
			String resultJsonStr = QwandaUtils.apiGet(
					GennySettings.qwandaServiceUrl + "/qwanda/baseentitys/count24/" + hql ,
					beUtils.getServiceToken().getToken(), 120);

			System.out.println("Search EMAIL result is "+resultJsonStr);
			
			if (resultJsonStr.equals("0")) {
				System.out.println("This email "+answer.getValue()+" is unique");
				/* Now sync to their keycloak account */
				if (answer.getValue().startsWith("adamcrow")) {
				BaseEntity target = beUtils.getBaseEntityByCode(answer.getTargetCode());
				if ((answer.getTargetCode().startsWith("PER_")) && (target != null)) {
				
					Boolean allowedToChange = false;
					String keycloakUUID = answer.getTargetCode().substring("PER_".length());
					if (userToken.getUserCode().equals(answer.getTargetCode())) {
						allowedToChange = true;
					}
				
				/* check if capability to change passwords is there */
					switch (allowed.code) {
					case "EDIT_INTERN":
					      if (target.is("INTERN")) {allowedToChange = true;} break;
					case "EDIT_AGENT":
					      if (target.is("AGENT")) {allowedToChange = true;} break;
					case "EDIT_HCR":
					      if (target.is("HOST_CPY_REP")) {allowedToChange = true;} break;
					case "EDIT_EPR":
					      if (target.is("EDU_PROV_REP")) {allowedToChange = true;} break;
					case "EDIT_REF_PART_REP":
					      if (target.is("REF_PART_REP")) {allowedToChange = true;} break;
					}
				
					if (allowedToChange) {
						int statusCode =  KeycloakUtils.updateUserEmail(keycloakUUID,serviceToken.getToken(), userToken.getRealm(),answer.getValue());
						System.out.println("Changing email for "+answer.getTargetCode()+" to "+answer.getValue()+" statusCode="+statusCode);
						if (statusCode > 204) {
							System.out.println("Error in setting email."+answer.getTargetCode()+" to "+answer.getValue()+" statusCode="+statusCode);
						}
					}
					
				}
			}	
				
			} else {
					if(true /*allowed.code.equals("AGENT")*/) { /* TODO , why limit this to agents??? */
						List<BaseEntity> duplicateBes = beUtils.getBaseEntitys(searchBE);
						System.out.println("duplicateBE's: " + duplicateBes);
						
						QDataBaseEntityMessage msg = new QDataBaseEntityMessage(duplicateBes);
						msg.setToken(userToken.getToken());
						msg.setReplace(true);
						VertxUtils.writeMsg("webcmds", JsonUtils.toJson(msg));
						
						for (BaseEntity duplicateBe : duplicateBes) {
								System.out.println("duplicateBe: " + duplicateBe);
								duplicateCodes = duplicateCodes + "," + duplicateBe.getCode();
								System.out.println("duplicateCodes: " + duplicateCodes);
						}
						
						duplicateCodes = duplicateCodes.substring(5);
						System.out.println("Final duplicateCodes: " + duplicateCodes);
						
						QCmdMessage duplicateEmailMsg = new QCmdMessage("DUPLICATE_EMAILS", duplicateCodes);
						duplicateEmailMsg.setMessage(number);
						duplicateEmailMsg.setToken(beUtils.getGennyToken().getToken());
						duplicateEmailMsg.setSend(true);
						VertxUtils.writeMsg("webcmds", duplicateEmailMsg);
						
						
						if (resultJsonStr.equals("0")) {
							number = "There is 1 duplicate email";
						} else {
							number = "There are " + resultJsonStr + " duplicate emails";
						}
						
						QCmdMessage toastMsg = new QCmdMessage("TOAST", "INFO");
						toastMsg.setMessage(number);
						toastMsg.setToken(beUtils.getGennyToken().getToken());
						toastMsg.setSend(true);
						VertxUtils.writeMsg("webcmds", toastMsg);
					}
					
					retract(answer);
					String message = "Email Address "+answer.getValue()+" is already taken. Please delete any unwanted copies or merge data with an existing";
					System.out.println(message);
					Answer feedbackAnswer = new Answer(answer.getSourceCode(),answer.getTargetCode(),answer.getAttributeCode(),"");
					VertxUtils.sendFeedbackError(beUtils.getGennyToken(),feedbackAnswer,message);
					System.out.println("Sent error message back to frontend");
			
			}
		} catch (Exception e) {
		
		}
		
			
		output.setTypeOfResult("NONE");
  	    output.setResultCode("NONE");  /* dont display anything new */
		
	
end
