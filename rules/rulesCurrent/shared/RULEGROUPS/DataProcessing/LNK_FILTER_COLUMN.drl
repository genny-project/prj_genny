package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import io.vertx.core.json.JsonObject;
import java.util.Map;
import java.util.HashMap;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.List;
import com.google.gson.reflect.TypeToken;
import life.genny.qwandautils.JsonUtils;
import life.genny.utils.VertxUtils;
import life.genny.utils.TableUtils;
import life.genny.models.TableData;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.qwanda.Ask;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.utils.OutputParam;
import life.genny.jbpm.customworkitemhandlers.ShowFrame;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.attribute.EntityAttribute;
import life.genny.qwanda.Link;


rule "LNK_FILTER_COLUMN"
	ruleflow-group 'DataProcessing'
	salience 450
	no-loop true
	when
		beUtils : BaseEntityUtils()
		serviceToken : GennyToken( code == "PER_SERVICE")
		answer : Answer( attributeCode  matches "LNK_FILTER_COLUMN" )
		output : OutputParam( )
 
	 then
		System.out.println("Rule -> "+drools.getRule().getName()+" :  user=" + beUtils.getGennyToken().getUserCode()+" : "+answer);

		String targetCode = answer.getTargetCode();
		System.out.println("targetCode = " + targetCode);
		String value = answer.getValue();
		System.out.println("value = " + value);

		/* Strip value to find attribute code */
		String attributeCode = beUtils.cleanUpAttributeValue(value).substring("SEL_FILTER_COLUMN_SRT_".length());
		System.out.println("attributeCode = " + attributeCode);

		/* Get associated Attribute */
		Attribute attr = RulesUtils.getAttribute(attributeCode, serviceToken);
		if (attr != null) {
			/* Check the datatype */
			String dtt = attr.getDataType().getClassName();
			System.out.println("dtt = " + dtt);
			if (dtt != null) {

				List<BaseEntity> filterOptionsArray = new ArrayList<>();
				/* Grab Ask group from cache */
				Ask filterGrpAsk = VertxUtils.getObject(serviceToken.getRealm(), "", targetCode, Ask.class, serviceToken.getToken());
				
				if (dtt.equals("java.lang.String") || dtt.equals("String") || dtt.equals("Text")) {
					BaseEntity like = beUtils.getBaseEntityByCode("SEL_LIKE");
					BaseEntity notLike = beUtils.getBaseEntityByCode("SEL_NOT_LIKE");
					BaseEntity equalTo = beUtils.getBaseEntityByCode("SEL_EQUAL_TO");
					BaseEntity notEqualTo = beUtils.getBaseEntityByCode("SEL_NOT_EQUAL_TO");
					filterOptionsArray.add(like);
					filterOptionsArray.add(notLike);
					filterOptionsArray.add(equalTo);
					filterOptionsArray.add(notEqualTo);
					
					/* Hide the date field */
					filterGrpAsk.getChildAsks()[0].getChildAsks()[2].setHidden(false);
					filterGrpAsk.getChildAsks()[0].getChildAsks()[3].setHidden(true);

				} else if (dtt.equals("java.lang.Boolean") || dtt.equals("Boolean")) {
					BaseEntity isTrue = beUtils.getBaseEntityByCode("SEL_IS_TRUE");
					BaseEntity isFalse = beUtils.getBaseEntityByCode("SEL_IS_FALSE");
					filterOptionsArray.add(isTrue);
					filterOptionsArray.add(isFalse);

					/* Hide both value fields */
					filterGrpAsk.getChildAsks()[0].getChildAsks()[2].setHidden(true);
					filterGrpAsk.getChildAsks()[0].getChildAsks()[3].setHidden(true);

				} else if (dtt.equals("java.lang.Double") || dtt.equals("Double")
							|| dtt.equals("java.lang.Integer") || dtt.equals("Integer")
							|| dtt.equals("java.lang.Long") || dtt.equals("Long")) {
					BaseEntity greaterThan = beUtils.getBaseEntityByCode("SEL_GREATER_THAN");
					BaseEntity greaterThanOrEqualTo = beUtils.getBaseEntityByCode("SEL_GREATER_THAN_OR_EQUAL_TO");
					BaseEntity lessThan = beUtils.getBaseEntityByCode("SEL_LESS_THAN");
					BaseEntity lessThanOrEqualTo = beUtils.getBaseEntityByCode("SEL_LESS_THAN_OR_EQUAL_TO");
					BaseEntity equalTo = beUtils.getBaseEntityByCode("SEL_EQUAL_TO");
					BaseEntity notEqualTo = beUtils.getBaseEntityByCode("SEL_NOT_EQUAL_TO");
					filterOptionsArray.add(greaterThan);
					filterOptionsArray.add(greaterThanOrEqualTo);
					filterOptionsArray.add(lessThan);
					filterOptionsArray.add(lessThanOrEqualTo);
					filterOptionsArray.add(equalTo);
					filterOptionsArray.add(notEqualTo);

					/* Hide the date field */
					filterGrpAsk.getChildAsks()[0].getChildAsks()[2].setHidden(false);
					filterGrpAsk.getChildAsks()[0].getChildAsks()[3].setHidden(true);

				} else if (dtt.equals("java.time.LocalDateTime") || dtt.equals("LocalDateTime")
							|| dtt.equals("java.time.LocalDate") || dtt.equals("LocalDate")
							|| dtt.equals("java.time.LocalTime") || dtt.equals("LocalTime")) {
					BaseEntity greaterThan = beUtils.getBaseEntityByCode("SEL_GREATER_THAN");
					BaseEntity lessThan = beUtils.getBaseEntityByCode("SEL_LESS_THAN");
					BaseEntity equalTo = beUtils.getBaseEntityByCode("SEL_EQUAL_TO");
					BaseEntity notEqualTo = beUtils.getBaseEntityByCode("SEL_NOT_EQUAL_TO");
					filterOptionsArray.add(greaterThan);
					filterOptionsArray.add(lessThan);
					filterOptionsArray.add(equalTo);
					filterOptionsArray.add(notEqualTo);

					/* Hide the string field */
					filterGrpAsk.getChildAsks()[0].getChildAsks()[2].setHidden(true);
					filterGrpAsk.getChildAsks()[0].getChildAsks()[3].setHidden(false);
				}

				BaseEntity optionGrp = new BaseEntity("GRP_FILTER_OPTIONS", "Filter Options");
				Attribute attributeLink = new Attribute("LNK_CORE", "LNK_CORE", new DataType(String.class));
				Set<EntityEntity> childLinks = new HashSet<>();

				Double index = 0.0;
				for (BaseEntity option : filterOptionsArray) {
					/* Create a link between GRP and BE */
					EntityEntity ee = new EntityEntity(optionGrp, option, attributeLink, index);
					Link link = new Link(optionGrp.getCode(), option.getCode(), attributeLink.getCode(), "ITEMS", index);
					ee.setLink(link);
					childLinks.add(ee);
					index += 1.0;
				}
				optionGrp.setLinks(childLinks);
				filterOptionsArray.add(optionGrp);

				/* Send filter option dropdown items */
				QDataBaseEntityMessage filterOptionsMsg = new QDataBaseEntityMessage(filterOptionsArray);
				filterOptionsMsg.setParentCode(optionGrp.getCode());
				filterOptionsMsg.setToken(serviceToken.getToken());
				filterOptionsMsg.setReplace(true);
				VertxUtils.writeMsg("webcmds", filterOptionsMsg);
				System.out.println("Filter Options sent to FE");

				/* Send Asks to FE */
				QDataAskMessage askMsg = new QDataAskMessage(filterGrpAsk);
				askMsg.setToken(beUtils.getGennyToken().getToken());
				askMsg.setReplace(true);
				VertxUtils.writeMsg("webcmds", askMsg);
				System.out.println("Asks sent to FE");

			} else {
				System.out.println("dtt is NULL");
			}
		} else {
			System.out.println("attr is NULL");
		}

		retract(answer);
		output.setTypeOfResult("NONE");
		output.setResultCode("NONE");

end
