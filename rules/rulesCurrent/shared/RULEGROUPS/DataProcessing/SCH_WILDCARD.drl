package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.Answers;
import io.vertx.core.json.JsonObject;
import java.util.Map;
import java.util.HashMap;
import life.genny.utils.VertxUtils;
import life.genny.qwandautils.JsonUtils;
import life.genny.utils.TableUtils;


import java.util.List;
import java.util.ArrayList;



rule "SCH_WILDCARD"
    ruleflow-group 'DataProcessing'
        salience 550 
    when
      beUtils : BaseEntityUtils()
	  serviceToken : GennyToken( code == "PER_SERVICE") 
	  answer : Answer( attributeCode == "SCH_WILDCARD" )
	  answersToSave : Answers()
	  output : OutputParam( )
     then
 		System.out.println("Rule -> SCH_WILDCARD :  user=" + beUtils.getGennyToken().getUserCode()+" : "+answer); 
		String sourceCode = beUtils.getGennyToken().getUserCode();
		if (sourceCode.equals(answer.getSourceCode())) { /* only user */
			String targetCode = answer.getTargetCode();
		
	
			SearchEntity searchBE = VertxUtils.getObject(beUtils.getGennyToken().getRealm(), "", targetCode, SearchEntity.class,
				beUtils.getGennyToken().getToken());
			searchBE.setWildcard(answer.getValue());
			VertxUtils.putObject(beUtils.getGennyToken().getRealm(), "", searchBE.getCode(), searchBE,
				beUtils.getGennyToken().getToken());
		
			long totalTime = TableUtils.searchTable(beUtils,searchBE, true);

			System.out.println("total took " + (totalTime) + " ms"); 
		
		}
			
		output.setTypeOfResult("NONE");
  	    output.setResultCode("NONE");  /* dont display anything new */
		
		

		retract(answer);
		update(answersToSave);
	
end
