package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.Answers;
import io.vertx.core.json.JsonObject;
import java.util.Map;
import java.util.HashMap;
import life.genny.utils.VertxUtils;
import life.genny.qwandautils.JsonUtils;


import java.util.List;
import java.util.ArrayList;

rule "PRI_ADDRESS_JSON"
    ruleflow-group 'DataProcessing'
        salience 500 
    when
      beUtils : BaseEntityUtils()
	  serviceToken : GennyToken( code == "PER_SERVICE") 
	  userToken : GennyToken( code != "PER_SERVICE") 
	  answer : Answer( attributeCode == "PRI_ADDRESS_JSON" )
	  output : OutputParam( )
    then
 		System.out.println("Rule -> PRI_ADDRESS_JSON :  user=" + beUtils.getGennyToken().getUserCode()+" : "+answer); 
		String sourceCode = beUtils.getGennyToken().getUserCode();
		String targetCode = answer.getTargetCode();
		
		/* Parse json answer and save the individual answers */
					
			JsonObject addressDataJson = null;
			try {
			
				addressDataJson = new JsonObject(answer.getValue());
				String postcode = addressDataJson.getString("postal_code");
				if (postcode == null) {
					postcode = addressDataJson.getString("postcode");
				}
				beUtils.saveAnswer(new Answer(sourceCode, targetCode, "PRI_ADDRESS_JSON", answer.getValue(),false,true));	
				beUtils.saveAnswer(new Answer(sourceCode, targetCode, "PRI_ADDRESS_COUNTRY", addressDataJson.getString("country"),false,true));
				beUtils.saveAnswer(new Answer(sourceCode, targetCode, "PRI_ADDRESS_POSTCODE",postcode,false,true));
				beUtils.saveAnswer(new Answer(sourceCode, targetCode, "PRI_ADDRESS_SUBURB", addressDataJson.getString("suburb"),false,true));
				beUtils.saveAnswer(new Answer(sourceCode, targetCode, "PRI_ADDRESS_CITY", addressDataJson.getString("suburb"),false,true));
				beUtils.saveAnswer(new Answer(sourceCode, targetCode, "PRI_ADDRESS_STATE", addressDataJson.getString("state"),false,true));
				beUtils.saveAnswer(new Answer(sourceCode, targetCode, "PRI_ADDRESS_ADDRESS1", addressDataJson.getString("street_address"),false,true));
				Answer addressFull = new Answer(sourceCode, targetCode, "PRI_ADDRESS_FULL", addressDataJson.getString("full_address"),false,true);
				beUtils.saveAnswer(addressFull);
		
				Double latitude = addressDataJson.getDouble("latitude");
				Double longitude = addressDataJson.getDouble("longitude");
			
				beUtils.saveAnswer(new Answer(sourceCode, targetCode, "PRI_ADDRESS_LATITUDE", latitude+"",false,true));
				beUtils.saveAnswer(new Answer(sourceCode, targetCode, "PRI_ADDRESS_LONGITUDE", longitude+"",false,true));
				
				
					/* update timezone from GPS */
						BaseEntity project = beUtils.getBaseEntityByCode("PRJ_"+serviceToken.getRealm().toUpperCase());
							String googleApiKey = project.getValueAsString("ENV_GOOGLE_MAPS_APIKEY");
							String url = "https://maps.googleapis.com/maps/api/timezone/json?location="+latitude+","+longitude+"&timestamp="+java.time.Instant.now().getEpochSecond()+"&key="+googleApiKey;
							String timezoneJsonStr =  QwandaUtils.apiGet(url , null);
							JsonObject json = new JsonObject(timezoneJsonStr);
							String timezoneID = json.getString("timeZoneId");
							Answer fixedTimezone = new Answer(sourceCode,targetCode, "PRI_TIMEZONE_ID", timezoneID,false,true);			
							beUtils.saveAnswer(fixedTimezone);
							VertxUtils.sendToFrontEnd(userToken, fixedTimezone);
				
			} catch (Exception e) {
				System.out.println("BAD JSON => "+answer.getValue());
			}
			
			
			
		output.setTypeOfResult("NONE");
  	    output.setResultCode("NONE");  /* dont display anything new */
		
		retract(answer);
	
end