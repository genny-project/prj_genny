package life.genny.rules;

import life.genny.qwandautils.QwandaUtils;

import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.Answers;
import io.vertx.core.json.JsonObject;
import java.util.Map;
import java.util.HashMap;
import life.genny.utils.VertxUtils;
import life.genny.qwanda.attribute.EntityAttribute;
import life.genny.qwanda.attribute.Attribute;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwandautils.JsonUtils;
import org.apache.commons.lang3.StringUtils;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.io.UnsupportedEncodingException;
import life.genny.utils.DropdownUtils;
import java.time.format.DateTimeFormatter;


import java.util.List;
import java.util.ArrayList;

rule "HELPER_SIGNATURE_DATE"
	ruleflow-group 'DataProcessing'
			salience 5000
	when
		beUtils : BaseEntityUtils()
		answer : Answer( attributeCode == "PRI_INTERN_AGREEMENT_SIGNATURE" || attributeCode == "PRI_HOST_CPY_REP_AGREEMENT_SIGNATURE" || attributeCode == "PRI_OUTCOME_AGREEMENT_SIGNATURE" )
		answersToSave : Answers()
		ruleDetails : RuleDetails()
		output : OutputParam( )
		serviceToken : GennyToken( code == "PER_SERVICE")
		userToken : GennyToken( code != "PER_SERVICE")

	then
		System.out.println("HELPER_SIGNATURE_DATE fired");
		System.out.println(ruleDetails+" "+drools.getRule().getName()+" Processing Helper SIGNATURE DATE Answer/Data : " + answer );
		
		/* Save the actual AGREEMENT_SIGNATURE answer */
		answersToSave.add(answer);
		
		String sourceCode = beUtils.getGennyToken().getUserCode();
		System.out.println("sourceCode :: " + sourceCode);
		
		String targetCode = answer.getTargetCode();
		System.out.println("targetCode :: " + targetCode);
		
		String attributeCode = answer.getAttributeCode();
		System.out.println("attributeCode :: " + attributeCode);
		
		String value = answer.getValue();
		System.out.println("value :: " + value);		
		
		
		if (attributeCode.startsWith("PRI_INTERN_")){
		
			System.out.println("attributeCode.startsWith(PRI_INTERN_)" + attributeCode);
			
			DateTimeFormatter dtf1 = DateTimeFormatter.ofPattern("dd/MM/yyyy");
			LocalDateTime now = LocalDateTime.now();
			String date = dtf1.format(now);
			System.out.println(date);
			
			/* save the signing date */
			Answer answerCreated = new Answer(sourceCode, targetCode, "PRI_INTERN_SIGNING_DATE", date);
			answersToSave.add(answerCreated);
 		
		}		
 		
 		if (attributeCode.startsWith("PRI_HOST_CPY_REP_")){
		
			System.out.println("attributeCode.startsWith(PRI_HOST_CPY_REP_)" + attributeCode);	
		
			DateTimeFormatter dtf1 = DateTimeFormatter.ofPattern("dd/MM/yyyy");
			LocalDateTime now = LocalDateTime.now();
			String date = dtf1.format(now);
			System.out.println(date);
		
			Answer answerCreated = new Answer(sourceCode, targetCode, "PRI_HOST_COMPANY_REP_SIGNING_DATE", date);
			answersToSave.add(answerCreated);
 		}	
 		
 		if (attributeCode.startsWith("PRI_OUTCOME_")){
 		
 			System.out.println("attributeCode.startsWith(PRI_OUTCOME_)" + attributeCode);
 			
 			DateTimeFormatter dtf1 = DateTimeFormatter.ofPattern("dd/MM/yyyy");
			LocalDateTime now = LocalDateTime.now();
			String date = dtf1.format(now);
			System.out.println(date);
				
			/* save the signing date */
			Answer answerCreated = new Answer(sourceCode, targetCode, "PRI_OUTCOME_REP_SIGNING_DATE", date);
			answersToSave.add(answerCreated);
 			
 		}	

		update(answersToSave);

		/* Retract the answer message so the rule doesn't fire again */
		retract(answer);

		output.setTypeOfResult("NONE");
		output.setResultCode("NONE");  /* dont display anything new */
		update(output);
end