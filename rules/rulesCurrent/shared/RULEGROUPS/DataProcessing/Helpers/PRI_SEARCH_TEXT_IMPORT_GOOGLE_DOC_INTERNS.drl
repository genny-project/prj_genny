package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import io.vertx.core.json.JsonObject;
import java.util.Map;
import java.util.HashMap;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.List;
import com.google.gson.reflect.TypeToken;
import life.genny.qwandautils.JsonUtils;
import life.genny.qwandautils.KeycloakUtils;
import life.genny.utils.VertxUtils;
import life.genny.utils.TableUtils;
import life.genny.models.TableData;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.qwanda.Ask;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.utils.OutputParam;
import life.genny.jbpm.customworkitemhandlers.ShowFrame;
import life.genny.models.BaseEntityImport;
import io.vavr.Tuple;
import io.vavr.Tuple2;
import life.genny.utils.ImportUtils;
import life.genny.qwanda.datatype.Allowed;
import life.genny.utils.CapabilityUtils;
import java.util.UUID;



rule "PRI_SEARCH_TEXT_IMPORT_GOOGLE_DOC_INTERNS"
    ruleflow-group 'DataProcessing'
        salience 500
        no-loop true
    when
 	  beUtils : BaseEntityUtils()
 	  allowed : Allowed(code == "IMPORT_INTERNS")
	  answer : Answer( attributeCode == "PRI_SEARCH_TEXT" && (value.startsWith("googleid:interns")) )   /* this is a pure search */
	  
    then
  		System.out.println("Rule -> "+drools.getRule().getName()+" :  user=" + beUtils.getGennyToken().getUserCode()+" : "+answer);
   		retract(answer);
   		
				/* Now import a google doc xls file and generate a List of BaseEntityImports */
				String googleDocId = null;
				String sheetId = "Sheet1"; /* default */
				Integer start=0;
				Integer finish=10000;
				String[] split = answer.getValue().split(":");
				
				if (split.length == 3) {
					googleDocId = split[2];
				} else if (split.length == 4) {
					googleDocId = split[2];
					sheetId = split[3];
				}
				if  (split.length == 6) {
					googleDocId = split[2];
					sheetId = split[3];
					start = Integer.parseInt(split[4]);
					finish = Integer.parseInt(split[5]);
				}
		
			googleDocId = googleDocId.trim();
		
		/* Education Provider	Student ID	Student First Name	Last Name	Student Email	Industry		Host Company 	Host Company Rep	Host Company Email																  */
				
			 Map<String,String> fieldMapping = new HashMap<String,String>();
			 fieldMapping.put("Education Provider".toLowerCase(), "PRI_ASSOC_EDU_PROV");
			 fieldMapping.put("Student ID".toLowerCase(), "PRI_STUDENT_ID");
			 fieldMapping.put("Student First Name".toLowerCase(), "PRI_IMPORT_FIRSTNAME");
			 fieldMapping.put("Last Name".toLowerCase(), "PRI_IMPORT_LASTNAME");
			 fieldMapping.put("Student Email".toLowerCase(), "PRI_EMAIL");
			 fieldMapping.put("Industry".toLowerCase(), "PRI_INDUSTRY");
			 fieldMapping.put("Host Company".toLowerCase(), "PRI_ASSOC_HOST_COMPANY");
			 fieldMapping.put("Host Company Rep".toLowerCase(), "PRI_ASSOC_HCR");
			 fieldMapping.put("Host Company Email".toLowerCase(), "PRI_ASSOC_HOST_COMPANY_EMAIL");
			 				
				 List<BaseEntityImport> beImports = ImportUtils.importGoogleDoc(googleDocId, sheetId,fieldMapping);
				 System.out.println("Importing Rule : "+beImports.size()+" items");
				 /* now generate the baseentity and send through all the answers */
				 List<Answer> answers = new ArrayList<Answer>();
				 Integer count=0;
				 for (BaseEntityImport beImport : beImports) {
				 	/* check if already there */

				 	BaseEntity be = beUtils.getBaseEntityByCode(beImport.getCode());
				 	if (be == null) {
					 	be = beUtils.create(beImport.getCode(), beImport.getName());
					 } 
					Map<String,String> kv = new HashMap<String,String>();
					 
					 for (Tuple2<String,String> attributeCodeValue : beImport.getAttributeValuePairList()) {
					 	String value = StringUtils.isBlank(attributeCodeValue._2)?"":attributeCodeValue._2; 
					 	value = value.trim();
					 	kv.put(attributeCodeValue._1,value);
						Answer answer2 = new Answer(beUtils.getGennyToken().getUserCode(),be.getCode(),attributeCodeValue._1,value);
						answers.add(answer2);
						if (attributeCodeValue._1.startsWith("PRI_ASSOC")) {
							QDataBaseEntityMessage foundMsg = QwandaUtils.findBaseEntityByAttributeCodeLikeValue(beUtils.getServiceToken().getRealm(), beUtils.getServiceToken().getToken(),
							attributeCodeValue._1, attributeCodeValue._2);
							if (foundMsg != null) {
								/* create link */
								if (foundMsg.getItems()!=null) {
									if (foundMsg.getItems().length > 0) {
										BaseEntity result = foundMsg.getItems()[0];
										String linkValue = "[\""+result.getCode()+"\"]";
										String linkAttributeCode = "LNK_"+attributeCodeValue._1.substring(10);
										System.out.println("Setting up "+linkAttributeCode+" with value "+linkValue);
										Answer linkAnswer = new Answer(beUtils.getGennyToken().getUserCode(),be.getCode(),linkAttributeCode,linkValue);
										answers.add(linkAnswer);
									}
								}
							} else {
								System.out.println("ERROR: Cannot find "+attributeCodeValue._2+" for attributeCode "+attributeCodeValue._1);
							}
						
						}
					 }
					Answer isIntern = new Answer(beUtils.getGennyToken().getUserCode(),be.getCode(),"PRI_IS_INTERN","true");
					answers.add(isIntern);
					Answer isImported = new Answer(beUtils.getGennyToken().getUserCode(),be.getCode(),"PRI_IMPORTED","true");
					answers.add(isImported);
					Answer hasLoggedIn = new Answer(beUtils.getGennyToken().getUserCode(),be.getCode(),"PRI_HAS_LOGGED_IN","false");
					answers.add(hasLoggedIn);
					Answer status = new Answer(beUtils.getGennyToken().getUserCode(),be.getCode(),"PRI_STATUS","AVAILABLE");
					answers.add(status);
					QDataAnswerMessage msg = new QDataAnswerMessage(answers);
					System.out.println("created QDataAnswerMessage  for "+beImport.getCode());
					msg.setToken(beUtils.getGennyToken().getToken());
					/* creating new user in keycloak */
					/* ASSUME FIRSTNAME, LASTNAME, EMAIL ARE GOOD!!! TODO */
					try {
						String email = kv.get("PRI_EMAIL").trim();
						String firstname = kv.get("PRI_IMPORT_FIRSTNAME").trim();
						String lastname = kv.get("PRI_IMPORT_LASTNAME").trim();
						String userPassword = UUID.randomUUID().toString().substring(0,10);
						String userId = KeycloakUtils.createUser(beUtils.getServiceToken().getToken(), beUtils.getServiceToken().getRealm(),email , firstname, lastname,  email, userPassword,"user", "user");
						Answer keycloakId = new Answer(beUtils.getGennyToken().getUserCode(),be.getCode(),"PRI_UUID",userId);
						answers.add(keycloakId);						
					} catch (IOException e) {
						/* keycloak exception spits the answer */
					}
					
 					System.out.println("inserting new intern message containing all their new attributes");
 					if ((count >=start) && (count <= finish))	
 					{			
 						insert(msg);
 					} else {
 						if (count > finish)	{
 							break;
 						}
					}
 					count++;
				 }
				 System.out.println("Aggregated  all Answers ");
			
		System.out.println("Finished insertion of QDataAnswerMessage containing imported");
end
