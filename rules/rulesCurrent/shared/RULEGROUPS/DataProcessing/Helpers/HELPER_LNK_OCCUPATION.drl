package life.genny.rules;

import life.genny.qwandautils.QwandaUtils;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.Answers;
import io.vertx.core.json.JsonObject;
import java.util.Map;
import java.util.HashMap;
import life.genny.utils.VertxUtils;
import life.genny.qwanda.attribute.EntityAttribute;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwandautils.JsonUtils;
import org.apache.commons.lang3.StringUtils;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.io.UnsupportedEncodingException;
import life.genny.utils.DropdownUtils;
import java.util.List;
import java.util.ArrayList;

rule "HELPER_LNK_OCCUPATION"
	ruleflow-group 'DataProcessing'
	salience 6000
	no-loop
	when
		beUtils : BaseEntityUtils()
		answer : Answer( attributeCode == "LNK_OCCUPATION" && !(targetCode matches "BEG_.*"))
		serviceToken : GennyToken( code == "PER_SERVICE")
		userToken : GennyToken( code != "PER_SERVICE")
	then
		System.out.println(drools.getRule().getName() + " fired");
		
		String sourceCode = beUtils.getGennyToken().getUserCode();
		System.out.println("sourceCode :: " + sourceCode);
		
		String targetCode = answer.getTargetCode();
		System.out.println("targetCode :: " + targetCode);
		
		String value = answer.getValue();
		System.out.println("value :: " + value);

		if(value != null){
			String codes = beUtils.cleanUpAttributeValue(value);
			List<String> occupationList = new ArrayList<>();
			for (String code : codes.split(",")) {
				BaseEntity be = beUtils.getBaseEntityByCode(code);
				String name = be.getValue("PRI_NAME", null);		
				if(name != null) occupationList.add(name);
			}
		}

		String occupations = beUtils.cleanUpAttributeValue(occupationList.toString());
		Answer ans = new Answer(sourceCode, targetCode, "PRI_ASSOC_OCCUPATION", occupations, false, true);
		beUtils.saveAnswer(ans);
		VertxUtils.sendToFrontEnd(userToken, ans);
end