package life.genny.rules;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.utils.OutputParam;
import life.genny.utils.TaskUtils;
import java.util.List;
import java.util.ArrayList;
import life.genny.utils.QuestionUtils;

rule "LNK_PERSON"
	ruleflow-group 'DataProcessing'
	salience 500
	no-loop true
	when
		userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		answer : Answer( attributeCode == "LNK_PERSON" && value != "[]" )
		output : OutputParam()
		beUtils : BaseEntityUtils()

	then
		System.out.println(drools.getRule().getName()+": Rule fired");
 		
		/* Get Target User BE */
 		String value = answer.getValue();
 		System.out.println("value = " + value); 
		String cleanCode = beUtils.cleanUpAttributeValue(value);
		System.out.println("cleanCode = " + cleanCode);

		TableUtils tableUtils = new TableUtils(beUtils);

		BaseEntity availableIntern = beUtils.getBaseEntityByCode(cleanCode);
		String personStatus = availableIntern.getValue("PRI_STATUS", "");

		QDataBaseEntityMessage msg = new QDataBaseEntityMessage();
		Long total = Long.valueOf(0);
		if ((!disabled)&&(!personStatus.equals("PROGRESS"))&&(!personStatus.equals("PLACED"))) {
			msg = new QDataBaseEntityMessage(availableIntern);
			total = Long.valueOf(1);
		}

		/* Send Available Card */
		msg.setToken(userToken.getToken());
		msg.setReplace(true);
		msg.setTotal(total);
		msg.setParentCode("SBE_AVAILABLE_INTERNS_"+userToken.getSessionCode().toUpperCase());
		VertxUtils.writeMsg("webcmds", JsonUtils.toJson(msg));

		SearchEntity availableSearch = VertxUtils.getObject(serviceToken.getRealm(), "", "SBE_AVAILABLE_INTERNS_"+userToken.getSessionCode().toUpperCase(), SearchEntity.class, serviceToken.getToken());
		tableUtils.updateBaseEntity(availableSearch, "PRI_TOTAL_RESULTS", total + "");

		QDataBaseEntityMessage availableSearchMsg = new QDataBaseEntityMessage(availableSearch);
		availableSearchMsg.setToken(userToken.getToken());
		availableSearchMsg.setReplace(true);
		VertxUtils.writeMsg("webcmds", JsonUtils.toJson(availableSearchMsg));

		/* Fetch All Applications */
		SearchEntity appSearchBE = new SearchEntity("SBE_INTERN_APPLICATIONS", "Intern Applications")
							.addFilter("PRI_CODE", SearchEntity.StringFilter.LIKE, "APP_%")
							.addFilter("PRI_INTERN_CODE", SearchEntity.StringFilter.EQUAL, cleanCode);

		List<BaseEntity> internApplications = beUtils.getBaseEntitys(appSearchBE);
		System.out.println("found " + internApplications + " applications");

		String[] codes = { "SBE_APPLIED_APPLICATIONS", "SBE_SHORTLISTED_APPLICATIONS", "SBE_INTERVIEWED_APPLICATIONS", 
							"SBE_OFFERED_APPLICATIONS", "SBE_PLACED_APPLICATIONS", "SBE_INPROGRESS_APPLICATIONS" };

		String[] statusCodes = { "APPLIED", "SHORTLISTED", "INTERVIEWED", "OFFERED", "PLACED", "PROGRESS" };

		for (int i = 0; i < codes.length; i++) {
			String searchCode = codes[i]+"_"+userToken.getSessionCode().toUpperCase();
			SearchEntity searchBE = VertxUtils.getObject(serviceToken.getRealm(), "", searchCode, SearchEntity.class, serviceToken.getToken());
			List<BaseEntity> bucketApps = new ArrayList<>();
			for (BaseEntity application : internApplications) {
				String appStatus = application.getValue("PRI_STATUS", null);
				if (appStatus != null && appStatus.equals(statusCodes[i])) {

					/* Get Assoc Cols and add them to the BE */
					for (EntityAttribute ea : searchBE.getBaseEntityAttributes()) {
						if (ea.getAttributeCode().startsWith("COL__")) {
							Answer ans = TableUtils.getAssociatedColumnValue(beUtils, application, ea.getAttributeCode(), serviceToken);

							if (ans != null) {
								try {
									application.addAnswer(ans);
								} catch (Exception e) {
									e.printStackTrace();
								}
							}
						}
					}

					bucketApps.add(application);
				}
			}
			/* Send Available Card */
			QDataBaseEntityMessage appMsg = new QDataBaseEntityMessage(bucketApps);
			appMsg.setToken(userToken.getToken());
			appMsg.setReplace(true);
			appMsg.setParentCode(searchCode);
			VertxUtils.writeMsg("webcmds", JsonUtils.toJson(appMsg));

			tableUtils.updateBaseEntity(searchBE, "PRI_TOTAL_RESULTS", Long.valueOf(bucketApps.size()) + ""); 

			QDataBaseEntityMessage searchMsg = new QDataBaseEntityMessage(searchBE);
			searchMsg.setToken(userToken.getToken());
			searchMsg.setReplace(true);
			VertxUtils.writeMsg("webcmds", JsonUtils.toJson(searchMsg));

		}

		output.setTypeOfResult("NONE");
		output.setResultCode("NONE");
		retract(answer);
end
