package life.genny.rules;

import life.genny.qwandautils.QwandaUtils;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.Answers;
import io.vertx.core.json.JsonObject;
import java.util.Map;
import java.util.HashMap;
import life.genny.utils.VertxUtils;
import life.genny.qwanda.attribute.EntityAttribute;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwandautils.JsonUtils;
import org.apache.commons.lang3.StringUtils;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.io.UnsupportedEncodingException;
import life.genny.utils.DropdownUtils;
import java.util.List;
import java.util.ArrayList;

rule "HELPER_LNK_DAYS_PER_WEEK"
	ruleflow-group 'DataProcessing'
	salience 5000
	no-loop
	when
		beUtils : BaseEntityUtils()
		answer : Answer( attributeCode == "LNK_DAYS_PER_WEEK" )
		serviceToken : GennyToken( code == "PER_SERVICE")
		userToken : GennyToken( code != "PER_SERVICE")
	then
		System.out.println(drools.getRule().getName() + " fired");

		String sourceCode = beUtils.getGennyToken().getUserCode();
		System.out.println("sourceCode :: " + sourceCode);

		String targetCode = answer.getTargetCode();
		System.out.println("targetCode :: " + targetCode);

		String value = answer.getValue();
		System.out.println("value :: " + value);

		String code = beUtils.cleanUpAttributeValue(value);
		System.out.println("code  :: " + code);

		BaseEntity be = beUtils.getBaseEntityByCode(code);
		if(be != null){
			String name = be.getValue("PRI_NAME", null);
			System.out.println("name  :: " + name);
			if(name != null){
				Answer ans = new Answer(sourceCode, targetCode, "PRI_DAYS_PER_WEEK", name);
				beUtils.saveAnswer(ans);
				VertxUtils.sendToFrontEnd(userToken, ans);
			}
		}

		if (!value.equals("[]")) {

			BaseEntity targetBe = beUtils.getBaseEntityByCode(targetCode);

			/* Business hours */
			String lnkBH = targetBe.getValue("LNK_BUSINESS_HOURS", null);
			lnkBH = lnkBH.replace("[","").replace("]","");
			System.out.println("lnkBH = " + lnkBH);

			String[] splt = lnkBH.split(",");
			System.out.println("splt[0] = " + splt[0]);
			System.out.println("splt[1] = " + splt[1]);

			String startStr = splt[0];
			String endStr = splt[1];

			Double startDbl = Double.parseDouble(startStr);
			Double endDbl = Double.parseDouble(endStr);

			System.out.println("startDbl = " + startDbl);
			System.out.println("endDbl = " + endDbl);

			Double businessHrs = endDbl - startDbl;
			System.out.println("businessHrs = " + businessHrs);


			/* Days per week */
			String dpwStr = targetBe.getValue("PRI_DAYS_PER_WEEK", null);
			System.out.println("dpwStr = " + dpwStr);

			Double dpwDbl = Double.parseDouble(dpwStr);
			System.out.println("dpwDbl = " + dpwDbl);

			/* Hours per week */
			Double hpwDbl = dpwDbl * businessHrs;
			System.out.println("hpwDbl = " + hpwDbl);

			/* Save Answer */
			Answer hoursAnswer = new Answer(sourceCode, targetCode, "PRI_HOURS_PER_WEEK", hpwDbl);
			beUtils.saveAnswer(hoursAnswer);

			/* Prepare Question and Ask */
			Attribute attr = RulesUtils.getAttribute("PRI_HOURS_PER_WEEK", serviceToken);

			Question hoursQues = new Question("QUE_INTERNSHIP_HOURS_PER_WEEK", "Internship Hours per week", attr, true);
			Ask hoursAsk = new Ask(hoursQues, sourceCode, targetCode);

			/* Send Disable for this Ask */
			hoursAsk.setDisabled(true);

			QDataAskMessage hoursAskMsgDisable = new QDataAskMessage(hoursAsk);
			hoursAskMsgDisable.setToken(userToken.getToken());
			VertxUtils.writeMsg("webcmds", hoursAskMsgDisable);

			/* Send Answer to Front End */
			VertxUtils.sendToFrontEnd(userToken, hoursAnswer);

			/* Send enable for this Ask */
			hoursAsk.setDisabled(false);

			QDataAskMessage hoursAskMsgEnable = new QDataAskMessage(hoursAsk);
			hoursAskMsgEnable.setToken(userToken.getToken());
			VertxUtils.writeMsg("webcmds", hoursAskMsgEnable);
		} else {

			System.out.println("Looks like you just cleared the start date");
		}

	System.out.println("End of " + drools.getRule().getName());
end