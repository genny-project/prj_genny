package life.genny.rules;

import life.genny.qwandautils.QwandaUtils;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.Answers;
import io.vertx.core.json.JsonObject;
import java.util.Map;
import java.util.HashMap;
import life.genny.utils.VertxUtils;
import life.genny.qwanda.attribute.EntityAttribute;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwandautils.JsonUtils;
import org.apache.commons.lang3.StringUtils;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.io.UnsupportedEncodingException;
import life.genny.utils.DropdownUtils;
import java.util.List;
import java.util.ArrayList;

rule "HELPER_LNK_OCCUPATION_BEG"
	ruleflow-group 'DataProcessing'
	salience 5000
	no-loop
	when
		beUtils : BaseEntityUtils()
		answer : Answer( attributeCode == "LNK_OCCUPATION" && targetCode matches "BEG_.*")
		answersToSave : Answers()
		ruleDetails : RuleDetails()
		output : OutputParam( )
		serviceToken : GennyToken( code == "PER_SERVICE")
		userToken : GennyToken( code != "PER_SERVICE")

	then
		System.out.println("HELPER_LNK_OCCUPATION_BEG fired");
		System.out.println(ruleDetails+" "+drools.getRule().getName()+" Processing Helper OCCUPATION SELECTION Answer/Data : " + answer );
		
		String sourceCode = beUtils.getGennyToken().getUserCode();
		System.out.println("sourceCode :: " + sourceCode);
		
		String targetCode = answer.getTargetCode();
		System.out.println("targetCode :: " + targetCode);
		
		String occupationCode = answer.getValue();
		System.out.println("occupationCode :: " + occupationCode);
		
		String code = occupationCode.replace("\"", "").replace("[", "").replace("]", "");
		System.out.println("code  :: " + code);

		/* Save the actual LNK_OCCUPATION answer */
		answersToSave.add(answer);

		/* list to store occupationCodes and occupationNames */
		List<String> occupationNames = new ArrayList<>();
		
		/* list to store other attributes */
		List<String> rolesList = new ArrayList<>();
		List<String> baseOutcomesList = new ArrayList<>();
		List<String> specificOutcomesList = new ArrayList<>();

		for (String occupCode : code.split(",")) {
			
			System.out.println("occupCode :: " + occupCode);

			/* get the occupation baseentity */
			BaseEntity be = beUtils.getBaseEntityByCode(occupCode);

			/* get the name attribute of the occupation */
			String name = be.getValue("PRI_NAME", null);		
			occupationNames.add(name);
			
			String roles = be.getValue("PRI_ROLES_AND_RESPONSIBILITIES", null);
			rolesList.add(roles);
			
			String baseOutcomes = be.getValue("PRI_BASE_LEARNING_OUTCOMES", null);	
			baseOutcomesList.add(baseOutcomes);
			
			String specificOutcomes = be.getValue("PRI_SPECIFIC_LEARNING_OUTCOMES", null);
			specificOutcomesList.add(specificOutcomes);		

		}

		String occupations = occupationNames.toString().replaceAll("[\\[\\](){}]","");
		
		String roles = rolesList.toString().replaceAll("[\\[\\](){}]","");
		String baseOutcomes = baseOutcomesList.toString().replaceAll("[\\[\\](){}]","");
		String specificOutcomes = specificOutcomesList.toString().replaceAll("[\\[\\](){}]","");

		/* save the occupation's name as PRI_ASSOC_OCCUPATION attribute for the current target baseentity in the form */
		Answer assocOccupationAnswer = new Answer(sourceCode, targetCode, "PRI_ASSOC_OCCUPATION", occupations,false,true);
		
		Answer rolesAnswer = new Answer(sourceCode, targetCode, "PRI_ROLES_AND_RESPONSIBILITIES", roles,false,true);
		Answer baseOutcomesAnswer = new Answer(sourceCode, targetCode, "PRI_BASE_LEARNING_OUTCOMES", baseOutcomes,false,true);
		Answer specificOutcomesAnswer = new Answer(sourceCode, targetCode, "PRI_SPECIFIC_LEARNING_OUTCOMES", specificOutcomes,false,true);
		
		answersToSave.add(assocOccupationAnswer);
		answersToSave.add(rolesAnswer);
		answersToSave.add(baseOutcomesAnswer);
		answersToSave.add(specificOutcomesAnswer);

		/* send any number of answers to FE for real update */
		VertxUtils.sendToFrontEnd(userToken, assocOccupationAnswer, rolesAnswer, baseOutcomesAnswer, specificOutcomesAnswer);

end