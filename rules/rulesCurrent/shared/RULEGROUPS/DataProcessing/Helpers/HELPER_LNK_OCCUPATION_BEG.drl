package life.genny.rules;

import life.genny.qwandautils.QwandaUtils;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.Answers;
import io.vertx.core.json.JsonObject;
import java.util.Map;
import java.util.HashMap;
import life.genny.utils.VertxUtils;
import life.genny.qwanda.attribute.EntityAttribute;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwandautils.JsonUtils;
import org.apache.commons.lang3.StringUtils;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.io.UnsupportedEncodingException;
import life.genny.utils.DropdownUtils;
import java.util.List;
import java.util.ArrayList;

rule "HELPER_LNK_OCCUPATION_BEG"
	ruleflow-group 'DataProcessing'
	salience 5000
	no-loop
	when
		beUtils : BaseEntityUtils()
		answer : Answer( attributeCode == "LNK_OCCUPATION" && targetCode matches "BEG_.*")
		serviceToken : GennyToken( code == "PER_SERVICE")
		userToken : GennyToken( code != "PER_SERVICE")
	then
		System.out.println(drools.getRule().getName() + " fired");
		
		String sourceCode = beUtils.getGennyToken().getUserCode();
		System.out.println("sourceCode :: " + sourceCode);
		
		String targetCode = answer.getTargetCode();
		System.out.println("targetCode :: " + targetCode);
		
		String value = answer.getValue();
		System.out.println("value :: " + value);

		if(value != null){
			String codes = beUtils.cleanUpAttributeValue(value);

			List<String> occupationList = new ArrayList<>();
			List<String> rolesList = new ArrayList<>();
			List<String> baseOutcomesList = new ArrayList<>();
			List<String> specificOutcomesList = new ArrayList<>();

			for (String code : codes.split(",")) {
				
				BaseEntity be = beUtils.getBaseEntityByCode(code);
				if(be != null){
					String name = be.getValue("PRI_NAME", null);		
					if(name!=null) occupationList.add(name);

					String roles = be.getValue("PRI_ROLES_AND_RESPONSIBILITIES", null);
					if(roles!=null) rolesList.add(roles);
					
					String baseOutcomes = be.getValue("PRI_BASE_LEARNING_OUTCOMES", null);	
					if(baseOutcomes!=null) baseOutcomesList.add(baseOutcomes);
					
					String specificOutcomes = be.getValue("PRI_SPECIFIC_LEARNING_OUTCOMES", null);
					if(specificOutcomes!=null) specificOutcomesList.add(specificOutcomes);		
				}
			}
		
			/* String occupations = beUtils.cleanUpAttributeValue(occupationList.toString());
			String roles = beUtils.cleanUpAttributeValue(rolesList.toString());
			String baseOutcomes = beUtils.cleanUpAttributeValue(baseOutcomesList.toString());
			String specificOutcomes = beUtils.cleanUpAttributeValue(specificOutcomesList.toString()); */

			String occupations = occupationList.toString().replaceAll("[\\[\\](){}]","");
      String roles = rolesList.toString().replaceAll("[\\[\\](){}]","");
      String baseOutcomes = baseOutcomesList.toString().replaceAll("[\\[\\](){}]","");
      String specificOutcomes = specificOutcomesList.toString().replaceAll("[\\[\\](){}]","");

			Answer assocOccupationAnswer = new Answer(sourceCode, targetCode, "PRI_ASSOC_OCCUPATION", occupations, false, true);
			Answer rolesAnswer = new Answer(sourceCode, targetCode, "PRI_ROLES_AND_RESPONSIBILITIES", roles, false, true);
			Answer baseOutcomesAnswer = new Answer(sourceCode, targetCode, "PRI_BASE_LEARNING_OUTCOMES", baseOutcomes, false, true);
			Answer specificOutcomesAnswer = new Answer(sourceCode, targetCode, "PRI_SPECIFIC_LEARNING_OUTCOMES", specificOutcomes, false, true);
			
			List<Answer> answers = new ArrayList<Answer>();
			answers.add(assocOccupationAnswer);
			answers.add(rolesAnswer);
			answers.add(baseOutcomesAnswer);
			answers.add(specificOutcomesAnswer);
			beUtils.saveAnswers(answers);

			VertxUtils.sendToFrontEnd(userToken, assocOccupationAnswer, rolesAnswer, baseOutcomesAnswer, specificOutcomesAnswer);
		}
end