package life.genny.rules;

import life.genny.qwandautils.QwandaUtils;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.Answers;
import io.vertx.core.json.JsonObject;
import java.util.Map;
import java.util.HashMap;
import life.genny.utils.VertxUtils;
import life.genny.qwanda.attribute.EntityAttribute;
import life.genny.qwanda.attribute.Attribute;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwandautils.JsonUtils;
import java.util.List;
import java.util.ArrayList;
import life.genny.message.QMessageGennyMSG;

rule "HELPER_SIGNATURE_NOTIFY"
	ruleflow-group 'DataProcessing'
	salience 9000
	when
		beUtils : BaseEntityUtils()
		answer : Answer(
				attributeCode == "PRI_AGR_DOC_INT_SIGNATURE" ||
				attributeCode == "PRI_AGR_DOC_HC_SIGNATURE" ||
				attributeCode matches "PRI_AGR_DOC_OUTCOME_.*"
			)
		answersToSave : Answers()
		ruleDetails : RuleDetails()
		output : OutputParam( )
		serviceToken : GennyToken( code == "PER_SERVICE")
		userToken : GennyToken( code != "PER_SERVICE")
	then
		System.out.println(drools.getRule().getName() + " - fired");

		/*  NOTE: This rule is being used to notify an agent of an
			agreement doc signature from an intern or a Host Company Rep.
			It should be moved to prj_internmatch eventually.
		 */

		String sourceCode = beUtils.getGennyToken().getUserCode();
		System.out.println("sourceCode :: " + sourceCode);
		String targetCode = answer.getTargetCode();
		System.out.println("targetCode :: " + targetCode);
		String attributeCode = answer.getAttributeCode();
		System.out.println("attributeCode :: " + attributeCode);
		BaseEntity targetBe = beUtils.getBaseEntityByCode(targetCode);
		System.out.println("targetBe: " + targetBe);

		String value = answer.getValue();
		System.out.println("value = " + value);

		if (value != null && !value.equals("null") && value.startsWith("data:image/png;base64") && !value.equals("https://bit.ly/3A2xdjI")) {
			/* Get Intern BE */
			BaseEntity internBE = beUtils.getBaseEntityFromLNKAttr(targetBe, "PRI_INTERN_CODE");
            BaseEntity agent = null;
			if (internBE != null) {
				agent = beUtils.getBaseEntityFromLNKAttr(internBE, "LNK_AGENT");
                if (agent == null) {
                    System.out.println("agent is NULL");
                }
			} else {
				System.out.println("internBE is NULL");
			}

			/* Get Supervisor BE */
			BaseEntity supervisorBE = beUtils.getBaseEntityFromLNKAttr(targetBe, "LNK_INTERN_SUPERVISOR");
			Boolean sendToSupervisor = false;
			if (supervisorBE != null) {
				sendToSupervisor = supervisorBE.getValue("PRI_EMAIL_FLAG", false);
			} else {
				System.out.println("supervisorBE is NULL");
			}

			String url = "SBE_OFFERED_APPLICATIONS_" + userToken.getJTI().toUpperCase() + "/ACT_PRI_EVENT_VIEW_AGREEMENT/" + targetBe.getCode();

			if (attributeCode.startsWith("PRI_AGR_DOC_INT_SIGNATURE")) {
                QMessageGennyMSG agentInterSignedMsg = new QMessageGennyMSG.Builder("MSG_AGENT_INTERN_SIGNED_AGREEMENT")
                    .addRecipient(agent)
                    .addContext("INTERN", internBE)
                    .addContext("URL:ENCODE", url)
                    .addContext("BCC", "PRJ_INTERNMATCH")
                    .setUtils(beUtils)
                    .send();

                System.out.println("Sendgrid msg: "+ JsonUtils.toJson(agentInterSignedMsg));
                System.out.println("Sendgrid email sent to Agent for Intern signed Agreement!!");
			} else if (attributeCode.startsWith("PRI_AGR_DOC_HC_SIGNATURE")) {
                QMessageGennyMSG agentHCRSignedMsg = new QMessageGennyMSG.Builder("MSG_AGENT_HCR_SIGNED_AGREEMENT")
                    .addRecipient(agent)
                    .addContext("INTERN", internBE)
                    .addContext("URL:ENCODE", url)
                    .addContext("BCC", "PRJ_INTERNMATCH")
                    .setUtils(beUtils)
                    .send();

                System.out.println("Sendgrid msg: "+ JsonUtils.toJson(agentHCRSignedMsg));
                System.out.println("Sendgrid email sent to Agent for HCR signed Agreement!!");
			} else if (attributeCode.startsWith("PRI_AGR_DOC_OUTCOME_")) {
				if (sendToSupervisor) {
                     QMessageGennyMSG supervisorAgentSignedMsg = new QMessageGennyMSG.Builder("MSG_INT_SUP_AGENT_SIGNED_AGREEMENT")
                        .addRecipient(supervisorBE)
                        .addContext("INTERN", internBE)
                        .addContext("URL:ENCODE", url)
                        .addContext("BCC", "PRJ_INTERNMATCH")
                        .setUtils(beUtils)
                        .send();

                    System.out.println("Sendgrid msg: "+ JsonUtils.toJson(supervisorAgentSignedMsg));
                    System.out.println("Sendgrid email sent to Intern supervisor for Agent signed Agreement!!");
				} else {
					System.out.println("Email Flag is FALSE, not sending to Intern supervisor!");
				}

                QMessageGennyMSG internAgentSignedMsg = new QMessageGennyMSG.Builder("MSG_INT_AGENT_SIGNED_AGREEMENT")
                    .addRecipient(internBE)
                    .addContext("URL:ENCODE", url)
                    .addContext("BCC", "PRJ_INTERNMATCH")
                    .setUtils(beUtils)
                    .send();

                System.out.println("Sendgrid msg: "+ JsonUtils.toJson(internAgentSignedMsg));
                System.out.println("Sendgrid email sent to Intern for Agent signed Agreement!!");
			}
		
		} else {
			System.out.println("value is NULL, not sending confirmation email!");
		}

		/* Dont display anything new */
		output.setTypeOfResult("NONE");
		output.setResultCode("NONE");  
end
