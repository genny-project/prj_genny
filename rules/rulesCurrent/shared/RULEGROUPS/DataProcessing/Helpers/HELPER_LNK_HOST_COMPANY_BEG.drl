package life.genny.rules;

import life.genny.qwandautils.QwandaUtils;

import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.Answers;
import io.vertx.core.json.JsonObject;
import java.util.Map;
import java.util.HashMap;
import life.genny.utils.VertxUtils;
import life.genny.qwanda.attribute.EntityAttribute;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwandautils.JsonUtils;
import org.apache.commons.lang3.StringUtils;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.io.UnsupportedEncodingException;
import life.genny.utils.DropdownUtils;


import java.util.List;
import java.util.ArrayList;

rule "HELPER_LNK_HOST_COMPANY_BEG"
	ruleflow-group 'DataProcessing'
			salience 6000
	when
		beUtils : BaseEntityUtils()
		answer : Answer( attributeCode == "LNK_HOST_COMPANY" && targetCode matches "BEG_.*")
		answersToSave : Answers()
		ruleDetails : RuleDetails()
		output : OutputParam( )
		serviceToken : GennyToken( code == "PER_SERVICE")
		userToken : GennyToken( code != "PER_SERVICE")

	then
		System.out.println("HELPER_LNK_HOST_COMPANY_BEG fired");
		System.out.println(ruleDetails+" "+drools.getRule().getName()+"Processing Helper HOST COMPANY SELECTION Answer/Data : " + answer );

		String sourceCode = beUtils.getGennyToken().getUserCode();
		System.out.println("sourceCode :: " + sourceCode);
		
		String targetCode = answer.getTargetCode();
		System.out.println("targetCode :: " + targetCode);
		
		String hostCompanyCode = answer.getValue();
		System.out.println("hostCompanyCode :: " + hostCompanyCode);
		
		String code = hostCompanyCode.replace("\"", "").replace("[", "").replace("]", "");
		System.out.println("code  :: " + code);

		/* get the company baseentity */
		BaseEntity companyBe = beUtils.getBaseEntityByCode(code);

		/* get the name attribute of the company */
		String name = companyBe.getValue("PRI_NAME", null);		
		String address = companyBe.getValue("PRI_ADDRESS_FULL", null);	
		System.out.println("company address :: " + address);


		if (companyBe != null) {
				String state = companyBe.getValue("PRI_ADDRESS_STATE", null);
				if (state != null) {
						Answer answerState = new Answer(sourceCode, targetCode, "PRI_ADDRESS_STATE", state);
 						beUtils.saveAnswer(answerState);
				} else { System.out.println("ERROR: Null " +state);}	
				
				String country = companyBe.getValue("PRI_ADDRESS_COUNTRY", null);
				if (country != null) {
						Answer answerCountry = new Answer(sourceCode, targetCode, "PRI_ADDRESS_COUNTRY", country);
 						beUtils.saveAnswer(answerCountry);
				} else { System.out.println("ERROR: Null " +country);}
				
				String postcode = companyBe.getValue("PRI_ADDRESS_POSTCODE", null);
				if (postcode != null) {
						Answer answerPostcode = new Answer(sourceCode, targetCode, "PRI_ADDRESS_POSTCODE", postcode);
 						beUtils.saveAnswer(answerPostcode);
				} else { System.out.println("ERROR: Null " +postcode);}		
				
				String suburb = companyBe.getValue("PRI_ADDRESS_SUBURB", null);
				if (suburb != null) {
						Answer answerSuburb = new Answer(sourceCode, targetCode, "PRI_ADDRESS_SUBURB", suburb);
 						beUtils.saveAnswer(answerSuburb);
 						
 						Answer answerCity = new Answer(sourceCode, targetCode, "PRI_ADDRESS_CITY", suburb);
 						beUtils.saveAnswer(answerCity);
				} else { System.out.println("ERROR: Null " +suburb);}	
				
				String street_address = companyBe.getValue("PRI_ADDRESS_ADDRESS1", null);
				if (street_address != null) {
						Answer answerStreetAddress = new Answer(sourceCode, targetCode, "PRI_ADDRESS_ADDRESS1", street_address);
 						beUtils.saveAnswer(answerStreetAddress);
				} else { System.out.println("ERROR: Null " +street_address);}		
					
		}
		

		/* save the company's name as PRI_ASSOC_HC attribute for application baseentity */
		Answer assocHcAnswer = new Answer(sourceCode, targetCode, "PRI_ASSOC_HC", name);
		
		/* save the company's address as BEG's address */
		Answer addressAnswer = new Answer(sourceCode, targetCode, "PRI_ADDRESS_FULL", address);
 		beUtils.saveAnswer(assocHcAnswer);		
 		beUtils.saveAnswer(addressAnswer);	
 		
 		insert(addressAnswer);

		Answer repAnswer = new Answer(sourceCode, targetCode, "LNK_HOST_COMPANY_REP", " ",false,true);
		Answer supervisorAnswer = new Answer(sourceCode, targetCode, "LNK_INTERN_SUPERVISOR", " ",false,true);

		BaseEntity baseEntity = beUtils.saveAnswer(repAnswer);
		baseEntity = beUtils.saveAnswer(supervisorAnswer);
		baseEntity = beUtils.saveAnswer(answer);
		
		/* Send the updated baseenttity to the frontend */
		QDataBaseEntityMessage msg = new QDataBaseEntityMessage(baseEntity);
		msg.setToken(beUtils.getGennyToken().getToken());
		msg.setReplace(true);
		VertxUtils.writeMsg("webcmds",JsonUtils.toJson(msg));

		/* dropdown search here For companyRep */
		DropdownUtils dropdown = new DropdownUtils(serviceToken);
		dropdown.setNewSearch("HCR Dropdown", "Fetch HCR Dropdown Items")
											.addFilter("PRI_IS_HOST_CPY_REP", true)
											.addFilter("LNK_HOST_COMPANY", SearchEntity.StringFilter.EQUAL, hostCompanyCode)
											/* .setSourceCode(code) */
											.setPageStart(0)
											.setPageSize(1000);

		/* Send the dropdown options */
		dropdown.sendSearchResults("GRP_HOST_COMPANY_REP_SELECTION", "LNK_ITEM", "ITEM", true, false, userToken, false);
		
		retract(answer);

		output.setTypeOfResult("NONE");
		output.setResultCode("NONE");  /* dont display anything new */
		update(output);
end
