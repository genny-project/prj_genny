package life.genny.rules;

import life.genny.qwandautils.QwandaUtils;

import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.Answers;
import io.vertx.core.json.JsonObject;
import java.util.Map;
import java.util.HashMap;
import life.genny.utils.VertxUtils;
import life.genny.qwanda.attribute.EntityAttribute;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwandautils.JsonUtils;
import org.apache.commons.lang3.StringUtils;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.io.UnsupportedEncodingException;
import life.genny.utils.DropdownUtils;


import java.util.List;
import java.util.ArrayList;

rule "HELPER_LNK_HOST_COMPANY_BEG"
	ruleflow-group 'DataProcessing'
			salience 6000
			no-loop
	when
		beUtils : BaseEntityUtils()
		answer : Answer( attributeCode == "LNK_HOST_COMPANY" && targetCode matches "BEG_.*")
		answersToSave : Answers()
		ruleDetails : RuleDetails()
		output : OutputParam( )
		serviceToken : GennyToken( code == "PER_SERVICE")
		userToken : GennyToken( code != "PER_SERVICE")

	then
		System.out.println("HELPER_LNK_HOST_COMPANY_BEG fired");
		System.out.println(ruleDetails+" "+drools.getRule().getName()+"Processing Helper HOST COMPANY SELECTION Answer/Data : " + answer );

		String sourceCode = beUtils.getGennyToken().getUserCode();
		System.out.println("sourceCode :: " + sourceCode);
		
		String targetCode = answer.getTargetCode();
		System.out.println("targetCode :: " + targetCode);
		
		String hostCompanyCode = answer.getValue();
		System.out.println("hostCompanyCode :: " + hostCompanyCode);
		
		String code = hostCompanyCode.replace("\"", "").replace("[", "").replace("]", "");
		System.out.println("code  :: " + code);

		/* get the company baseentity */
		BaseEntity companyBe = beUtils.getBaseEntityByCode(code);
		
		System.out.println("Before dropwdown");
		
		/* dropdown search here For companyRep */
		DropdownUtils dropdown = new DropdownUtils(serviceToken);
		dropdown.setNewSearch("HCR Dropdown", "Fetch HCR Dropdown Items")
											.addFilter("PRI_CODE", SearchEntity.StringFilter.LIKE, "PER_%")
											.addFilter("PRI_IS_HOST_CPY_REP", true)
											.addFilter("PRI_STATUS", SearchEntity.StringFilter.EQUAL, "ACTIVE")
											.addFilter("LNK_HOST_COMPANY", SearchEntity.StringFilter.EQUAL, hostCompanyCode)
											.setPageStart(0)
											.setPageSize(1000);

		/* Send the dropdown options */
		dropdown.sendSearchResults("GRP_HOST_COMPANY_REP_SELECTION", "LNK_ITEM", "ITEM", true, false, userToken, false);

		/* get the name attribute of the company */
		String name = companyBe.getValue("PRI_NAME", null);
		System.out.println("name  :: " + name);	
		
		String address = companyBe.getValue("PRI_ADDRESS_FULL", null);
		System.out.println("address  :: " + address);
			
		String country = companyBe.getValue("PRI_ADDRESS_COUNTRY", null);
		System.out.println("country  :: " + country);
			
		String postcode = companyBe.getValue("PRI_ADDRESS_POSTCODE", null);	
		System.out.println("postcode  :: " + postcode);
		
		String suburb = companyBe.getValue("PRI_ADDRESS_SUBURB", null);
		System.out.println("suburb  :: " + suburb);
			
		String city = companyBe.getValue("PRI_ADDRESS_CITY", null);	
		System.out.println("city  :: " + city);	
		
		String state = companyBe.getValue("PRI_ADDRESS_STATE", null);
		System.out.println("state  :: " + state);

		String cpyImage = companyBe.getValue("PRI_IMAGE_URL",null);
		System.out.println("cpyImage  :: " + cpyImage);

		String latitude = companyBe.getValue("PRI_ADDRESS_LATITUDE",null);
		System.out.println("latitude  :: " + latitude);
		
		String longitude = companyBe.getValue("PRI_ADDRESS_LONGITUDE",null);
		System.out.println("longitude  :: " + longitude);


			
		System.out.println("company address :: " + address);
		

		Answer assocHcAnswer = new Answer(sourceCode, targetCode, "PRI_ASSOC_HC", name, false, true);
		System.out.println("assocHcAnswer");
		Answer addressAnswer = new Answer(sourceCode, targetCode, "PRI_ADDRESS_FULL", address, false, true);
		System.out.println("addressAnswer");
		Answer countryAnswer = new Answer(sourceCode, targetCode, "PRI_ADDRESS_COUNTRY", country, false, true);
		System.out.println("countryAnswer");
		Answer postcodeAnswer = new Answer(sourceCode, targetCode, "PRI_ADDRESS_POSTCODE", postcode, false, true);
		System.out.println("postcodeAnswer");
		Answer suburbAnswer = new Answer(sourceCode, targetCode, "PRI_ADDRESS_SUBURB", suburb, false, true);
		System.out.println("suburbAnswer");
		Answer cityAnswer = new Answer(sourceCode, targetCode, "PRI_ADDRESS_CITY", city, false, true);
		System.out.println("cityAnswer");
		Answer stateAnswer = new Answer(sourceCode, targetCode, "PRI_ADDRESS_STATE", state, false, true);
		System.out.println("stateAnswer");
		Answer imageAnswer = new Answer(sourceCode, targetCode, "PRI_IMAGE_URL", cpyImage, false, true);
		System.out.println("imageAnswer");
		
		Answer latitudeAnswer = new Answer(sourceCode, targetCode, "PRI_ADDRESS_LATITUDE", latitude, false, true);
		System.out.println("latitudeAnswer");
		Answer longitudeAnswer = new Answer(sourceCode, targetCode, "PRI_ADDRESS_LONGITUDE", longitude, false, true);
		System.out.println("longitudeAnswer");

		/* TODO: Answer should support null  */
		Answer repAnswer = new Answer(sourceCode, targetCode, "LNK_HOST_COMPANY_REP", "",false,true);
		System.out.println("repAnswer");
		Answer supervisorAnswer = new Answer(sourceCode, targetCode, "LNK_INTERN_SUPERVISOR", "",false,true);
		System.out.println("supervisorAnswer");

		List<Answer> addressData = new ArrayList<Answer>();
		addressData.add(answer);
		addressData.add(assocHcAnswer);
		addressData.add(addressAnswer);
		addressData.add(countryAnswer);
		addressData.add(postcodeAnswer);
		addressData.add(suburbAnswer);
		addressData.add(cityAnswer);
		addressData.add(stateAnswer);
		addressData.add(repAnswer);
		addressData.add(supervisorAnswer);
		
		System.out.println("addressData");

		beUtils.saveAnswers(addressData);
		/*update(answersToSave);*/

		VertxUtils.sendToFrontEnd(userToken, addressAnswer);
			
		/*retract(answer);*/

		output.setTypeOfResult("NONE");
		output.setResultCode("NONE");  /* dont display anything new */
	/*	update(output); */
end
