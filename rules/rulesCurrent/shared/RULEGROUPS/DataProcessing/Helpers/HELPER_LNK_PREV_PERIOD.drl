package life.genny.rules;

import life.genny.qwandautils.QwandaUtils;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.Answers;
import io.vertx.core.json.JsonObject;
import java.util.Map;
import java.util.HashMap;
import life.genny.utils.VertxUtils;
import life.genny.qwanda.attribute.EntityAttribute;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwandautils.JsonUtils;
import org.apache.commons.lang3.StringUtils;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.io.UnsupportedEncodingException;
import life.genny.utils.DropdownUtils;
import java.util.List;
import java.util.ArrayList;
import java.time.format.DateTimeFormatter;
import java.time.LocalDate;

rule "HELPER_LNK_PREV_PERIOD"
	ruleflow-group 'DataProcessing'
	salience 5000
	no-loop
	when
		beUtils : BaseEntityUtils()
		answer : Answer( attributeCode == "LNK_PREV_PERIOD")
		serviceToken : GennyToken( code == "PER_SERVICE")
		userToken : GennyToken( code != "PER_SERVICE")
	then
		System.out.println(drools.getRule().getName() + " triggered");

		String sourceCode = beUtils.getGennyToken().getUserCode();
		System.out.println("sourceCode :: " + sourceCode);

		String targetCode = answer.getTargetCode();
		System.out.println("targetCode :: " + targetCode);

		String value = answer.getValue();
		System.out.println("value :: " + value);

		BaseEntity be = beUtils.getBaseEntityByCode(targetCode);

		if(be != null){
			String prevPeriodStr = value;

			if(prevPeriodStr != null) {
				prevPeriodStr = beUtils.extractTenureDates(prevPeriodStr);
				System.out.println("prevPeriodStr  :: " + prevPeriodStr);
				Answer ans = new Answer(sourceCode, targetCode, "PRI_PREV_PERIOD", prevPeriodStr);
				beUtils.saveAnswer(ans);
				VertxUtils.sendToFrontEnd(userToken, ans);

			} else {
				System.out.println("prevPeriodStr is empty.");
			}
		} else {
			System.out.println("ERROR! be is null.");
		}

		/*if(be != null && value != null) {
			String prevPeriodStr = value;
			String startDate = null;
			String endDate = null;
			JsonObject tenureJson = null;
			DateTimeFormatter dateFormat = DateTimeFormatter.ofPattern("dd-MMM-yy");
			LocalDate startDateLD = null;
			LocalDate endDateLD = null;

			if(prevPeriodStr != null) {
				System.out.println("prevPeriodStr is:: " + prevPeriodStr);

				tenureJson = new JsonObject(prevPeriodStr);
				startDate = (String) tenureJson.getString("startDate");
				endDate = (String) tenureJson.getString("endDate");

				if (startDate != null) {
					String[] startDateSplit = startDate.split("T");
					startDate = startDateSplit[0];
					startDateLD = LocalDate.parse(startDate);

					if (startDateLD != null) {
						startDate = (String) startDateLD.format(dateFormat);
					} else {
						System.out.println("startDateLD is null! ");
					}
				} else {
					startDate = "";
					System.out.println("startDate is null!");
				}

				if (endDate != null) {
					String[] endDateSplit = endDate.split("T");
					endDate = endDateSplit[0];
					endDateLD = LocalDate.parse(endDate);

					if (endDateLD != null) {
						endDate = (String) endDateLD.format(dateFormat);
					} else {
						System.out.println("endDateLD is null! ");
					}
				} else {
					endDate = "";
					System.out.println("endDate is null!");
				}

				prevPeriodStr = startDate + " - " + endDate;

				System.out.println("prevPeriodStr  :: " + prevPeriodStr);
				Answer ans = new Answer(sourceCode, targetCode, "PRI_PREV_PERIOD", prevPeriodStr);
				beUtils.saveAnswer(ans);
				VertxUtils.sendToFrontEnd(userToken, ans);

			} else {
				System.out.println("prevPeriodStr is empty.");
			}
		} else {
			System.out.println("ERROR! be is null.");
		} */
end