package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import io.vertx.core.json.JsonObject;
import java.util.Map;
import java.util.HashMap;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.List;
import com.google.gson.reflect.TypeToken;
import life.genny.qwandautils.JsonUtils;
import life.genny.qwandautils.KeycloakUtils;
import life.genny.utils.VertxUtils;
import life.genny.utils.TableUtils;
import life.genny.models.TableData;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.qwanda.Ask;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.utils.OutputParam;
import life.genny.jbpm.customworkitemhandlers.ShowFrame;
import life.genny.models.BaseEntityImport;
import io.vavr.Tuple;
import io.vavr.Tuple2;
import life.genny.utils.ImportUtils;
import life.genny.qwanda.datatype.Allowed;
import life.genny.utils.CapabilityUtils;
import java.util.UUID;



rule "PRI_SEARCH_TEXT_IMPORT_GOOGLE_DOC_HC"
    ruleflow-group 'DataProcessing'
        salience 500
        no-loop true
    when
 	  beUtils : BaseEntityUtils()
 	  allowed : Allowed(code == "IMPORT_HC" || code == "TEST") 
	  answer : Answer( attributeCode == "PRI_SEARCH_TEXT" && (value.startsWith("googleid:hc:")) )   /* this is a pure search */
	  serviceToken : GennyToken (code == "PER_SERVICE")
	  output : OutputParam( )
    then
  		System.out.println("Rule -> "+drools.getRule().getName()+" :  user=" + beUtils.getGennyToken().getUserCode()+" : "+answer);
   		retract(answer);
   		
				/* Now import a google doc xls file and generate a List of BaseEntityImports */
				String googleDocId = null;
				String sheetId = "Host Company List"; /* default */
				Integer start=0;
				Integer finish=10000;
				String[] split = answer.getValue().split(":");
				
				if (split.length == 3) {
					googleDocId = split[2];
				} else if (split.length == 4) {
					googleDocId = split[2];
					sheetId = split[3].trim();
				}
				if  (split.length == 6) {
					googleDocId = split[2];
					sheetId = split[3].trim();
					start = Integer.parseInt(split[4]);
					finish = Integer.parseInt(split[5]);
				}
		
			googleDocId = googleDocId.trim();
		
 Map<String,String> fieldMapping = new HashMap<String,String>();
	 fieldMapping.put("Company Trading Name", "PRI_NAME");
	 fieldMapping.put("ABN", "PRI_ABN");
	 fieldMapping.put("HC Website", "PRI_WEBSITE");
	 fieldMapping.put("Supervisor Phone Number", "PRI_PHONE");
	 fieldMapping.put("Supervisor Email", "PRI_EMAIL");
	 fieldMapping.put("HC Address", "PRI_IMPORT_FULL_ADDRESS");
	 
	 fieldMapping.put("UNIQUE_KEY_FIELD", "ABN");
	 fieldMapping.put("NAME_KEY_FIELD", "Company Trading Name");
	 fieldMapping.put("PREFIX", "CPY_");

	 
	 				
		 List<BaseEntityImport> beImports = ImportUtils.importGoogleDoc(googleDocId, sheetId,fieldMapping);
		 System.out.println("Importing Rule : "+beImports.size()+" items");
		 /* now generate the baseentity and send through all the answers */
		 List<Answer> answers = new ArrayList<Answer>();
		 Integer count=0;
		 
		 /* First create The Host Company reps */
		 
		 for (BaseEntityImport beImport : beImports) {
			 if (beImport.getAttributeValuePairList().isEmpty()) {
				 continue;
			 }
			System.out.println("Import Host Company :"+beImport.getCode()+":"+beImport.getName());
		 	/* check if already there */
		 	BaseEntity be = beUtils.getBaseEntityByCode(beImport.getCode());
		 	if (be == null) {
			 	be = beUtils.create(beImport.getCode(), beImport.getName());
			 } 
			Map<String,String> kv = new HashMap<String,String>();
			 
			 for (Tuple2<String,String> attributeCodeValue : beImport.getAttributeValuePairList()) {
			 	String value = StringUtils.isBlank(attributeCodeValue._2)?"":attributeCodeValue._2; 
			 	if (value.contains("'")) {
			 		value = value.replace("'", "\\'");
			 	}
			 	value = value.trim();
			 	kv.put(attributeCodeValue._1,value);
				Answer answer2 = new Answer(beUtils.getGennyToken().getUserCode(),be.getCode(),attributeCodeValue._1,value);
				answers.add(answer2);
			 }
			Answer isEntity = new Answer(beUtils.getGennyToken().getUserCode(),be.getCode(),"PRI_IS_HOST_CPY","true");
			answers.add(isEntity);
			Answer isImported = new Answer(beUtils.getGennyToken().getUserCode(),be.getCode(),"PRI_IMPORTED","true");
			answers.add(isImported);
			Answer status = new Answer(beUtils.getGennyToken().getUserCode(),be.getCode(),"PRI_STATUS","ACTIVE");
			answers.add(status);

			System.out.println("PRI_PHONE="+kv.get("PRI_PHONE")+" EMAIL="+kv.get("PRI_EMAIL"));
			Answer isLandline = new Answer(beUtils.getGennyToken().getUserCode(),be.getCode(),"PRI_LANDLINE",kv.get("PRI_PHONE"));
			answers.add(isLandline);
			Answer isEmail = new Answer(beUtils.getGennyToken().getUserCode(),be.getCode(),"PRI_EMAIL",kv.get("PRI_EMAIL"));
			answers.add(isEmail);
			

			QDataAnswerMessage msg = new QDataAnswerMessage(answers);
			System.out.println("created QDataAnswerMessage  for "+beImport.getCode()+":"+be.getName());
			msg.setToken(beUtils.getGennyToken().getToken());
			
			System.out.println("inserting new host company message containing all their new attributes");
				if ((count >=start) && (count <= finish))	
				{			
					insert(msg);
				} else {
					if (count > finish)	{
						break;
					}
			}
				count++;
		 }
		 System.out.println("Aggregated  all Answers ");
	
		 System.out.println("Finished insertion of QDataAnswerMessage containing imported");		
		
		output.setTypeOfResult("NONE");
  	    output.setResultCode("NONE");  /* dont display anything new */
		
		
		
end
