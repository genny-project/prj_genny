package life.genny.rules;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.utils.OutputParam;
import life.genny.utils.TaskUtils;
import java.util.List;
import java.util.ArrayList;
import life.genny.utils.QuestionUtils;

rule "BUCKET_QUICK_SEARCH"
	ruleflow-group 'DataProcessing'
	salience 500
	no-loop true
	when
		userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		answer : Answer( targetCode matches "BKT_.*" && attributeCode matches "LNK_.*" && value != "[]" )
		output : OutputParam()
		beUtils : BaseEntityUtils()

	then
		System.out.println(drools.getRule().getName()+": Rule fired");
 		
		/* Get Target User BE */
 		String value = answer.getValue();
 		System.out.println("value = " + value); 
		String targetCode = beUtils.cleanUpAttributeValue(value);
		System.out.println("targetCode = " + targetCode);

		BaseEntity targetBE = beUtils.getBaseEntityByCode(targetCode);
		System.out.println("targetBE = " + targetBE);

		TableUtils tableUtils = new TableUtils(beUtils);

		/* get BUCKET_QUICK_SEARCH from cache */
		List<String> bucketCodes = VertxUtils.getObject(serviceToken.getRealm(), "", "BUCKET_CODES", List.class);
		Map<String, String> superSearchData = VertxUtils.getObject(serviceToken.getRealm(), "", "BUCKET_QUICK_SEARCH", HashMap.class);

		if(bucketCodes!= null && bucketCodes.size() > 0) {

			if(superSearchData != null && !superSearchData.isEmpty()) {

				for (String code : bucketCodes) {

					if(superSearchData.containsKey(code)) {

						System.out.println("Updating bucket search " + code);

						String relationship = (String) superSearchData.get(code);
						System.out.println("relationship = " + relationship);

						List<BaseEntity> entityList = new ArrayList<>();

						if (relationship.equals("SELF")) {
							
							entityList.add(targetBE);

						} else {

							String linkedCodes = targetBE.getValue(relationship, null);
							if (linkedCodes == null) {
								System.out.println("targetBE has no attribute for " + relationship);
								linkedCodes = "";
							}
							String[] entityCodes = beUtils.cleanUpAttributeValue(linkedCodes).split(",");
							for (String entityCode : entityCodes) {
								BaseEntity be = beUtils.getBaseEntityByCode(entityCode);
								if (be != null) {
									entityList.add(be);
								}
							}

						}

						String searchCode = code + "_" + userToken.getSessionCode().toUpperCase();

						SearchEntity searchBE = VertxUtils.getObject(serviceToken.getRealm(), "", searchCode, SearchEntity.class, serviceToken.getToken());

						List<BaseEntity> satisfiedEntityList = new ArrayList<>();
						
						for (BaseEntity entity : entityList) {
							System.out.println("entity = " + entity.getCode());

							Boolean satisfied = true;

							for (EntityAttribute ea : searchBE.getBaseEntityAttributes()) {

								if (ea.getAttributeCode().startsWith("PRI_") || ea.getAttributeCode().startsWith("LNK_")
									&& !(ea.getAttributeCode().equals("PRI_CODE"))) {

									System.out.println("ea = " + ea.getAttributeCode());

									Optional<EntityAttribute> optEA = targetBE.findEntityAttribute(ea.getAttributeCode());

									Boolean valueBoolean = null;
									System.out.println("valueBoolean = " + valueBoolean);
									String valueString = null;
									System.out.println("valueString = " + valueString);

									if (optEA.isPresent()) {
										valueBoolean = optEA.get().getValueBoolean();
										valueString = optEA.get().getValueString();
									}

									/* NOTE: This only does string and bool equals operations as of yet */

									/* TODO: Implement for other types and operators */
									if (valueBoolean != null && ea.getValueBoolean() != null) {

										if (!valueBoolean == ea.getValueBoolean()) {
											satisfied = false;
										}

									} else if (valueString != null && ea.getValueString() != null) {

										if (!valueString.equals(ea.getValueString())) {
											satisfied = false;
										}

									}
								}
							}

							if (satisfied) {
								satisfiedEntityList.add(entity);
							}

						}

						QDataBaseEntityMessage msg = new QDataBaseEntityMessage(satisfiedEntityList);
						msg.setToken(userToken.getToken());
						msg.setReplace(true);
						msg.setTotal(Long.valueOf(msg.getItems().length));
						msg.setParentCode(searchCode);
						VertxUtils.writeMsg("webcmds", JsonUtils.toJson(msg));

						tableUtils.updateBaseEntity(searchBE, "PRI_TOTAL_RESULTS", Long.valueOf(msg.getItems().length) + "");

						QDataBaseEntityMessage searchMsg = new QDataBaseEntityMessage(searchBE);
						searchMsg.setToken(userToken.getToken());
						searchMsg.setReplace(true);
						VertxUtils.writeMsg("webcmds", JsonUtils.toJson(searchMsg));

					} else {
						System.out.println("Code not present in Super Search settings: " + code);
					}

				}

			} else {
				System.out.println("Super search data NULL or EMPTY!");
			}

		} else {
			System.out.println("Bucket codes NULL or EMPTY!");
		}

		output.setTypeOfResult("NONE");
		output.setResultCode("NONE");
		retract(answer);
end
