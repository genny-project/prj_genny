package life.genny.rules;

import life.genny.qwandautils.QwandaUtils;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.Answers;
import io.vertx.core.json.JsonObject;
import java.util.Map;
import java.util.HashMap;
import life.genny.utils.VertxUtils;
import life.genny.qwanda.attribute.EntityAttribute;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwandautils.JsonUtils;
import org.apache.commons.lang3.StringUtils;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.io.UnsupportedEncodingException;
import life.genny.utils.DropdownUtils;
import java.util.List;
import java.util.ArrayList;

rule "HELPER_LNK_BUSINESS_HOURS"
	ruleflow-group 'DataProcessing'
	salience 5000
	no-loop
	when
		beUtils : BaseEntityUtils()
		answer : Answer( attributeCode == "LNK_BUSINESS_HOURS" )
		serviceToken : GennyToken( code == "PER_SERVICE")
		userToken : GennyToken( code != "PER_SERVICE")
	then
		System.out.println(drools.getRule().getName() + " fired");

		String sourceCode = beUtils.getGennyToken().getUserCode();
		System.out.println("sourceCode :: " + sourceCode);
		
		String targetCode = answer.getTargetCode();
		System.out.println("targetCode :: " + targetCode);
		
		String value = answer.getValue();
		System.out.println("value :: " + value);
		
		String code = beUtils.cleanUpAttributeValue(value);
		System.out.println("code  :: " + code);

		BaseEntity be = beUtils.getBaseEntityByCode(code);
		if(be != null){
			String name = be.getValue("PRI_NAME", null);		
			if(name != null){
				Answer ans = new Answer(sourceCode, targetCode, "LNK_BUSINESS_HOURS", name);
				beUtils.saveAnswer(ans);
				VertxUtils.sendToFrontEnd(userToken, ans);
			}
		}

 		BaseEntity targetBe = beUtils.getBaseEntityByCode(targetCode);
 		
 		/* Business hours */
 		String lnkBH = targetBe.getValue("LNK_BUSINESS_HOURS", null);
        lnkBH = lnkBH.replace("[","").replace("]","");
        System.out.println("lnkBH = " + lnkBH);	
      
        String[] splt = code.split(",");
        
        String startStr = splt[0];
        String endStr = splt[1];
        
        Double startDbl = Double.parseDouble(startStr);  
        Double endDbl = Double.parseDouble(endStr);
        
        System.out.println("startDbl = " + startDbl);
        System.out.println("endDbl = " + endDbl);
        
        Double businessHrs = endDbl - startDbl;
        System.out.println("businessHrs = " + businessHrs);
        
        
        /* Days per week */
        String dpwStr = targetBe.getValue("PRI_DAYS_PER_WEEK", null);
        System.out.println("dpwStr = " + dpwStr);	
        
        Double dpwDbl = Double.parseDouble(dpwStr);
        System.out.println("dpwDbl = " + dpwDbl);
        
        /* Hours per week */
        Double hpwDbl = dpwDbl * businessHrs;
        System.out.println("hpwDbl = " + hpwDbl);

		/* Save Answer */
		Answer hoursAnswer = new Answer(sourceCode, targetCode, "PRI_HOURS_PER_WEEK", hpwDbl);
		beUtils.saveAnswer(hoursAnswer);
		
		/* Prepare Question and Ask */
		Attribute attr = RulesUtils.getAttribute("PRI_HOURS_PER_WEEK", serviceToken);
		
		Question hoursQues = new Question("QUE_INTERNSHIP_HOURS_PER_WEEK", "Internship Hours per week", attr, true);
		Ask hoursAsk = new Ask(hoursQues, sourceCode, targetCode);
		
		/* Send Disable for this Ask */
		hoursAsk.setDisabled(true);
		
		QDataAskMessage hoursAskMsgDisable = new QDataAskMessage(hoursAsk);
		hoursAskMsgDisable.setToken(userToken.getToken());
		VertxUtils.writeMsg("webcmds", hoursAskMsgDisable);
		
		/* Send Answer to Front End */
		VertxUtils.sendToFrontEnd(userToken, hoursAnswer);

		/* Send enable for this Ask */
		hoursAsk.setDisabled(false);
	
		QDataAskMessage hoursAskMsgEnable = new QDataAskMessage(hoursAsk);
		hoursAskMsgEnable.setToken(userToken.getToken());
		VertxUtils.writeMsg("webcmds", hoursAskMsgEnable);


		/* Process PRI_BUSINESS_HOURS */
		String minStart = "";
		String minEnd = "";

		int lenStart = startStr.length();
		int lenEnd = endStr.length();    

		if (startStr.contains(".5")) {  
			minStart = ":30";
			startStr = startStr.substring(0, lenStart - 2);
		} else {
			minStart = ":00"; 
		}

		if (endStr.contains(".5")) {
			minEnd = ":30";
			endStr = endStr.substring(0, lenEnd - 2);
		} else {
			minEnd = ":00";
		}


		double startD = Double.parseDouble(startStr);
		double endD = Double.parseDouble(endStr);

		String startMeridiem = "";
		String endMeridiem = "";


		if (startD < 12.0) {
			startMeridiem = "AM";
		} else {
			startMeridiem = "PM";
			startD = startD - 12.0;
		}

		if (endD < 12.0) {
			endMeridiem = "AM";
		} else {
			endMeridiem = "PM";
			endD = endD - 12.0;
		}

		String newStartStr = String.valueOf(startD);
		String newEndStr = String.valueOf(endD);

		int lenNewStart = newStartStr.length();
		int lenNewEnd = newEndStr.length();   

		String trimStartStr = newStartStr.substring(0, lenNewStart - 2);
		String trimEndStr = newEndStr.substring(0, lenNewEnd - 2);

		String startTime = trimStartStr + minStart + " "+ startMeridiem;
		String endTime = trimEndStr + minEnd + " "+ endMeridiem;

		System.out.println("Start time = " + startTime);
		System.out.println("End time = " + endTime);

		String businessHours = startTime + " - " + endTime;
		System.out.println("Business hours = " + businessHours);

		if (businessHours != null) {
			beUtils.saveAnswer(new Answer(userToken.getUserCode(), targetCode, "PRI_BUSINESS_HOURS", businessHours));
			System.out.println("businessHours: " + businessHours);	
		} else {
			System.out.println("ERROR: Null businessHours"); 
		}
		
end
