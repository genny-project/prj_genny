package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import io.vertx.core.json.JsonObject;
import java.util.Map;
import java.util.HashMap;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.List;
import com.google.gson.reflect.TypeToken;
import life.genny.qwandautils.JsonUtils;
import life.genny.qwandautils.KeycloakUtils;
import life.genny.utils.VertxUtils;
import life.genny.utils.TableUtils;
import life.genny.utils.SearchUtils;
import life.genny.models.TableData;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.qwanda.Ask;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.utils.OutputParam;
import life.genny.jbpm.customworkitemhandlers.ShowFrame;
import life.genny.models.BaseEntityImport;
import io.vavr.Tuple;
import io.vavr.Tuple2;
import life.genny.utils.ImportUtils;
import life.genny.qwanda.datatype.Allowed;
import life.genny.utils.CapabilityUtils;
import java.util.UUID;
import java.time.LocalDateTime;
import life.genny.qwandautils.QwandaUtils;

import life.genny.qwandautils.GennySettings;


import java.util.Optional;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwandautils.DateTimeUtils;
import java.time.LocalDate;




rule "PRI_SEARCH_TEXT_REGEN_CACHES"
    ruleflow-group 'DataProcessing'
        salience 7000
        no-loop true
    when
 	  beUtils : BaseEntityUtils()
 	  allowed : Allowed(code == "TEST" || code == "SUPERUSER" || code == "DEV")


	  answer : Answer( attributeCode == "PRI_SEARCH_TEXT" && (value.startsWith("!regen:")) )   /* this is a pure search */
	  serviceToken : GennyToken (code == "PER_SERVICE")
	  output : OutputParam( )
    then
  		System.out.println("DEBUG:Rule -> "+drools.getRule().getName()+" :  user=" + beUtils.getGennyToken().getUserCode()+" : "+answer);
   		retract(answer);
  
    		String sourceCode = beUtils.getGennyToken().getUserCode();
		System.out.println("sourceCode :: " + sourceCode);
		
		
		/* regen:DEF_XXX */
		
		String[] split = answer.getValue().split(":");
		
		String targetCode = "";
		
		if (split.length == 2) {
			targetCode = split[1].trim();
			
			System.out.println("targetDEFCode :: " + targetCode);
			
			if (targetCode != null ) {
				BaseEntity defBe = beUtils.getDEFByCode(targetCode);
				SearchUtils.regenerateCaches(beUtils, defBe);
				System.out.println("Regenerated caches for "+targetCode);
			} else {
				System.out.println("Your dude was null");
			}
		} else {
			System.out.println("length was incorrect for regenerate: " +split.length);
		}
   		
		
	
		output.setTypeOfResult("NO_PROCESSING");
  	    output.setResultCode("NONE");  /* dont display anything new */
		
		
end
