package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import io.vertx.core.json.JsonObject;
import java.util.Map;
import java.util.HashMap;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.List;
import com.google.gson.reflect.TypeToken;
import life.genny.qwandautils.JsonUtils;
import life.genny.qwandautils.KeycloakUtils;
import life.genny.utils.VertxUtils;
import life.genny.utils.TableUtils;
import life.genny.models.TableData;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.qwanda.Ask;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.utils.OutputParam;
import life.genny.jbpm.customworkitemhandlers.ShowFrame;
import life.genny.models.BaseEntityImport;
import io.vavr.Tuple;
import io.vavr.Tuple2;
import life.genny.utils.ImportUtils;
import life.genny.qwanda.datatype.Allowed;
import life.genny.utils.CapabilityUtils;
import java.util.UUID;
import life.genny.rules.listeners.GennyRuleTimingListener;
import life.genny.utils.TableUtils;



rule "PRI_SEARCH_TEXT_TABLE_ASSIST"
	ruleflow-group 'DataProcessing'
	salience 500
	no-loop true
	when
 	  beUtils : BaseEntityUtils()
 	  allowed : Allowed(code == "USER") 
	  answer : Answer( attributeCode == "PRI_SEARCH_TEXT" && (value.startsWith("!")) && (!value.startsWith("!@")) && (!value.startsWith("!#"))) /*&& (!answer.getTargetCode().startsWith("["))*/ )   /* this is a pure assist search */
	  serviceToken : GennyToken (code == "PER_SERVICE")
	  output : OutputParam( )
	then
		System.out.println("Rule -> "+drools.getRule().getName()+" :  user=" + beUtils.getGennyToken().getUserCode()+" : "+answer);
		retract(answer);

		String value = answer.getValue().substring(1);

		/* get current search */
		TableUtils tableUtils = new TableUtils(beUtils);

		SearchEntity searchBE = null;
		List<SearchEntity> searchBeList = new ArrayList<SearchEntity>();

		if (answer.getTargetCode().startsWith("SBE_")){
			System.out.println("Rule -> "+drools.getRule().getName()+" TargetCode starts with SBE_");
			searchBeList.add(VertxUtils.getObject(beUtils.getGennyToken().getRealm(), "", answer.getTargetCode(), SearchEntity.class));
		
		}else if(answer.getTargetCode().startsWith("[")){
			
			System.out.println("Rule -> "+drools.getRule().getName()+" TargetCode is an array of SBEs");

			String sbeCodes = answer.getTargetCode().replace("\"", "").replace("[", "").replace("]", "");
			System.out.println("sbeCodes  :: " + sbeCodes);

			for (String sbeCode : sbeCodes.split(",")) {
				System.out.println("sbeCode  :: " + sbeCode);
				searchBeList.add(VertxUtils.getObject(beUtils.getGennyToken().getRealm(), "", sbeCode, SearchEntity.class));
			}

		}else {
			System.out.println("Rule -> "+drools.getRule().getName()+" LAST-SEARCH");
			searchBeList.add(VertxUtils.getObject(beUtils.getGennyToken().getRealm(), "LAST-SEARCH", beUtils.getGennyToken().getSessionCode(), SearchEntity.class));
		}
		
		for (SearchEntity sbe : searchBeList) {
			System.out.println(drools.getRule().getName()+" ASSIST for "+sbe.getCode()); 

			/* Reset the pageNumber to 1 */
			Answer pageNumberAnswer = new Answer(beUtils.getGennyToken().getUserCode(), sbe.getCode(), "PRI_INDEX", "1");

			/* update the sbe object */
			sbe = beUtils.updateBaseEntity(sbe, pageNumberAnswer,SearchEntity.class);
			sbe.setWildcard(value);
			sbe.setPageStart(0);
			
			/* cache the updated sbe  */
			VertxUtils.putObject(beUtils.getGennyToken().getRealm(), "", sbe.getCode(), sbe, beUtils.getGennyToken().getToken());

			/* send the data */
			TableUtils.searchTable(beUtils,sbe, true);
		}

		output.setTypeOfResult("NONE");
		output.setResultCode("NONE");  /* dont display anything new */
end
