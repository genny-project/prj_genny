package life.genny.rules;

import life.genny.qwandautils.QwandaUtils;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.Answers;
import io.vertx.core.json.JsonObject;
import java.util.Map;
import java.util.HashMap;
import life.genny.utils.VertxUtils;
import life.genny.qwanda.attribute.EntityAttribute;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwandautils.JsonUtils;
import org.apache.commons.lang3.StringUtils;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.io.UnsupportedEncodingException;
import life.genny.utils.DropdownUtils;
import java.util.List;
import java.util.ArrayList;

rule "HELPER_LNK_INTERNSHIP_APP"
	ruleflow-group 'DataProcessing'
	salience 5000
	when
		beUtils : BaseEntityUtils()
		answer : Answer( attributeCode == "LNK_INTERNSHIP" && targetCode matches "APP_.*")
		serviceToken : GennyToken( code == "PER_SERVICE")
		userToken : GennyToken( code != "PER_SERVICE")

	then
		System.out.println(drools.getRule().getName() + " triggered");
		
		String sourceCode = beUtils.getGennyToken().getUserCode();
		System.out.println("sourceCode :: " + sourceCode);
		
		String targetCode = answer.getTargetCode();
		System.out.println("targetCode :: " + targetCode);
		
		String value = answer.getValue();
		System.out.println("value :: " + value);
		
		String code = beUtils.cleanUpAttributeValue(value);
		System.out.println("code  :: " + code);

		Boolean canApplyToInternship = true;

		BaseEntity applicationBe = beUtils.getBaseEntityByCode(targetCode);
		if(applicationBe != null){

			String internCode = applicationBe.getValue("PRI_APPLICANT_CODE", null);
			if(internCode != null){

				String internName = null;
				BaseEntity internBe = beUtils.getBaseEntityByCode(internCode);
				if(internBe != null){
					internName = internBe.getValue("PRI_NAME", null);
				}

				/* check if the intern has applied to this internship before */	
				SearchEntity searchBE = VertxUtils.getObject(serviceToken.getRealm(), "", "SBE_APPLICATIONS_APPLIED",SearchEntity.class, serviceToken.getToken());
				if(searchBE != null){
					searchBE.addFilter("PRI_INTERN_CODE", SearchEntity.StringFilter.EQUAL, internCode);

					try{
						List<BaseEntity> apps = beUtils.getBaseEntitys(searchBE);				
						System.out.println("The number of apps is "+(apps ==null?"NULL":apps.size()));

						if ((apps!=null) && (apps.size() > 0)){
		          for (BaseEntity app : apps) {
	            	String internshipCode = app.getValue("LNK_INTERNSHIP", null);
								if(internshipCode != null && internshipCode.equals(value)){

									/* intern can't apply to internship */
									canApplyToInternship = false;

									/* alert intern has already applied to this internship */
									String message = internName == null ? "The intern" : internName + " has already been applied to this internship.";
									String applicationStatus = app.getValue("PRI_STATUS", null);
									if(applicationStatus != null)
										message += " Application Status: "+ applicationStatus;
									
									/* send cmd msg */
									QCmdMessage msg = new QCmdMessage("TOAST", "INFO");
									msg.setMessage(message);
									msg.setToken(beUtils.getGennyToken().getToken());
									msg.setSend(true);
									VertxUtils.writeMsg("webcmds", msg);
									return;
								}
							}
						}
					}catch (Exception e) {
						System.out.println("Error in " + drools.getRule().getName() +"\n Exception Details   ::   "+e.toString());
					}
				}
			}
		}

		System.out.println("The intern CAN" + canApplyToInternship == true ? " " : " NOT " + "apply to this internship" );

		if(canApplyToInternship){
			BaseEntity be = beUtils.getBaseEntityByCode(code);
			if(be != null){
				String name = be.getValue("PRI_NAME", null);		
				if(name != null){
					Answer ans = new Answer(sourceCode, targetCode, "PRI_TITLE", name);
					beUtils.saveAnswer(ans);
					VertxUtils.sendToFrontEnd(userToken, ans);
				}
			}
		}else{
			retract(answer);
		}
end