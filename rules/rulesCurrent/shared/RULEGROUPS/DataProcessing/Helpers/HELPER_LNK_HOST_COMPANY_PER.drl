package life.genny.rules;

import life.genny.qwandautils.QwandaUtils;

import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.Answers;
import io.vertx.core.json.JsonObject;
import java.util.Map;
import java.util.HashMap;
import life.genny.utils.VertxUtils;
import life.genny.qwanda.attribute.EntityAttribute;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwandautils.JsonUtils;
import org.apache.commons.lang3.StringUtils;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.io.UnsupportedEncodingException;
import life.genny.utils.DropdownUtils;


import java.util.List;
import java.util.ArrayList;

rule "HELPER_LNK_HOST_COMPANY_PER"
	ruleflow-group 'DataProcessing'
	salience 5000
	when
		beUtils : BaseEntityUtils()
		answer : Answer( attributeCode == "LNK_HOST_COMPANY" && targetCode.startsWith("PER_"))
		answersToSave : Answers()
		ruleDetails : RuleDetails()
		output : OutputParam( )
		serviceToken : GennyToken( code == "PER_SERVICE")
		userToken : GennyToken( code != "PER_SERVICE")

	then
		System.out.println("HELPER_LNK_HOST_COMPANY_PER fired");
		System.out.println(ruleDetails+" "+drools.getRule().getName()+"Processing Helper HOST COMPANY SELECTION Answer/Data : " + answer );

		String sourceCode = beUtils.getGennyToken().getUserCode();
		System.out.println("sourceCode :: " + sourceCode);
		
		String targetCode = answer.getTargetCode();
		System.out.println("targetCode :: " + targetCode);
		
		String hostCompanyCode = answer.getValue();
		System.out.println("hostCompanyCode :: " + hostCompanyCode);
		
		String code = hostCompanyCode.replace("\"", "").replace("[", "").replace("]", "");
		System.out.println("code  :: " + code);
		
		String lnkHC = answer.getValue();
		System.out.println("lnkHC  :: " + lnkHC);

		/* Save the actual LNK_HOST_COMPANY answer */
		beUtils.saveAnswer(new Answer(userToken.getUserCode(), code ,"LNK_HOST_COMPANY", lnkHC));

		/* get the company baseentity */
		BaseEntity companyBe = beUtils.getBaseEntityByCode(code);
		if(companyBe != null){

			/* get the name attribute of the company */
			String name = companyBe.getValue("PRI_NAME", null);	
			System.out.println("name  :: " + name);	

			/* save the company's name as PRI_ASSOC_HC attribute for person baseentity */
			if(name != null){
				Answer answerHC = new Answer(userToken.getUserCode(), targetCode, "PRI_ASSOC_HC", name);
	 			beUtils.saveAnswer(answerHC);
				VertxUtils.sendToFrontEnd(userToken, answerHC);

			}

		}


		output.setTypeOfResult("NONE");
		output.setResultCode("NONE");  /* dont display anything new */
		
		retract(answer);

end
