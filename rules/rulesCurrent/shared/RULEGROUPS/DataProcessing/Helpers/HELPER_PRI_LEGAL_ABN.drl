package life.genny.rules;


import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.Answers;
import io.vertx.core.json.JsonObject;
import java.util.Map;
import java.util.HashMap;
import life.genny.utils.VertxUtils;
import life.genny.qwanda.attribute.EntityAttribute;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwandautils.JsonUtils;
import life.genny.qwanda.rule.RuleDetails;
import life.genny.qwandautils.QwandaUtils;

import java.util.List;
import java.util.ArrayList;

rule "HELPER_PRI_LEGAL_ABN.drl"
    ruleflow-group 'DataProcessing'
        salience 5000 
    when
      beUtils : BaseEntityUtils()
	  answer : Answer( attributeCode == "PRI_LEGAL_NAME" && value == "ABN")
	  answersToSave : Answers()
	  ruleDetails : RuleDetails()
	  output : OutputParam( )
     then
 		System.out.println(ruleDetails+" "+drools.getRule().getName()+"Processing Answer/Data : " + answer );
		String sourceCode = beUtils.getGennyToken().getUserCode();
		String targetCode = answer.getTargetCode();
		
		/* Parse json answer and save the individual answers */
		String FAKE_ABN = "11223491505";
		answersToSave.add(new Answer(sourceCode, targetCode, "PRI_ABN", FAKE_ABN,false,true));
		
		BaseEntity baseEntity = beUtils.updateBaseEntity(targetCode,new Answer(sourceCode, targetCode, "PRI_ABN", FAKE_ABN,false,true));
		baseEntity = beUtils.updateBaseEntity(baseEntity,new Answer(sourceCode, targetCode, "PRI_LEGAL_NAME", "",false,true));
		
		QDataBaseEntityMessage msg = new QDataBaseEntityMessage(baseEntity);
		msg.setToken(beUtils.getGennyToken().getToken());
			
		VertxUtils.writeMsg("webcmds",JsonUtils.toJson(msg));		
	
		/* beUtils.saveAnswers(answers,true); */
		output.setTypeOfResult("NONE");
  	    output.setResultCode("NONE");  /* dont display anything new */
		

		retract(answer);
		update(answersToSave);
	
end
