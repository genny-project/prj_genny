package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.Answers;
import io.vertx.core.json.JsonObject;
import java.util.Map;
import java.util.HashMap;
import life.genny.utils.VertxUtils;
import life.genny.qwandautils.JsonUtils;
import org.apache.commons.lang3.text.WordUtils;

import java.util.List;
import java.util.ArrayList;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.io.UnsupportedEncodingException;




rule "PRI_ATMC_ADDRESS_GROUP"
    ruleflow-group 'DataProcessing'
        salience 1000 
        no-loop
    when
      beUtils : BaseEntityUtils()
	  serviceToken : GennyToken( code == "PER_SERVICE") 
	  address : Answer( attributeCode == "PRI_IMPORT_ADDRESS" )
	  state : Answer( attributeCode == "PRI_IMPORT_STATE" )
	  postcode : Answer( attributeCode == "PRI_IMPORT_POSTCODE" )
	  city : Answer( attributeCode == "PRI_IMPORT_SUBURB" )
	  answersToSave : Answers()
	  output : OutputParam( )
     then
 		System.out.println("Rule -> PRI_FIRSTNAME :  user=" + beUtils.getGennyToken().getUserCode()+" : "+address); 
		String sourceCode = beUtils.getGennyToken().getUserCode();
		String targetCode = address.getTargetCode();
		
		String fullAddress = address+" ," + city + " ," + state + " ,"+ postcode + " ," ;
		System.out.println("IMPORT ADDRESS: fullAddress="+fullAddress);
		String encodedAddress = null;
		try {
            encodedAddress =  URLEncoder.encode(fullAddress, StandardCharsets.UTF_8.toString());
        } catch (UnsupportedEncodingException ex) {
            throw new RuntimeException(ex.getCause());
        }
		System.out.println("IMPORT ADDRESS: encodedAddress="+encodedAddress);
		
		String googleApiUrl = "https://maps.googleapis.com/maps/api/geocode/json?address={}"+encodedAddress;
		
		BaseEntity project = beUtils.getBaseEntityByCode("PRJ_"+serviceToken.getRealm().toUpperCase());
		String googleApiKey = project.getValue("PRI_GOOGLE_API_KEY","");
		System.out.println("IMPORT ADDRESS: google api key="+googleApiKey);
        googleApiUrl  = googleApiUrl  + "&key={}"+googleApiKey;
 
		String addressJsonStr =  QwandaUtils.apiGet(googleApiUrl , null);
 		System.out.println("IMPORT ADDRESS: addressJsonUrl="+addressJsonStr);
  						
		answersToSave.add(new Answer(sourceCode, targetCode, "PRI_ADDRESS_JSON", addressJsonStr,false,true));	
			
			
		output.setTypeOfResult("NONE");
  	    output.setResultCode("NONE");  /* dont display anything new */
		
		

		retract(address); 
		retract(state);
		retract(postcode);
		retract(city);
		update(answersToSave);
	
end
