package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.utils.CapabilityUtils;
import life.genny.qwanda.Answer;
import java.util.List;
import java.util.ArrayList;
import life.genny.model.OutputParamTreeSet;

rule "PROCESS_STATELESS_ANSWERS"
    ruleflow-group 'DataProcessing'
     salience 10000
     no-loop true
    when
	  userToken : GennyToken ( code != "PER_SERVICE" ) 
	  serviceToken : GennyToken ( code == "PER_SERVICE" ) 
	  dataMsg : QDataAnswerMessage( (items != null) && (items.length > 0) && (aliasCode == "STATELESS"))
    then
 		System.out.println("Rule -> PROCESS_STATELESS_ANSWERS Processing Answer/Data!! :  user=" + userToken.getUserCode()); 
 		/* System.out.println("dom = "+dom); */
 		BaseEntityUtils beUtils = new BaseEntityUtils(userToken); 
		beUtils.setServiceToken(serviceToken);
		System.out.println(drools.getRule().getName()+" Process Answwers: beUtils created ");
		
		/* Now set up capability for the user and make it available to all the rules */
		CapabilityUtils capabilityUtils = new CapabilityUtils(beUtils);
		insert(capabilityUtils); 
		
		System.out.println(drools.getRule().getName()+" Capabilitys are "+capabilityUtils.getCapabilityManifest()); 
		

		retract(dataMsg); /* stop this rule from firing again */

		
 		for (Answer answer : dataMsg.getItems()) {
 			answer.setSourceCode(userToken.getUserCode()); /* force that sourceCode */
 			answer.setInferred(false); /* force inference from the user to be off. This ensures that if this flag is set it is from internal */
 			insert(answer); 
 			System.out.println(drools.getRule().getName()+" Process Stateless Answers: inserted answer  "+answer.getTargetCode()+":"+answer.getAttributeCode()); 
 		}
 		insert(beUtils);
end
