package life.genny.rules;

import java.util.Optional;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.Answers;
import io.vertx.core.json.JsonObject;
import java.util.Map;
import java.util.HashMap;
import life.genny.utils.VertxUtils;
import life.genny.qwandautils.JsonUtils;
import org.apache.commons.lang3.text.WordUtils;
import org.apache.commons.lang3.StringUtils;

import java.util.List;
import java.util.ArrayList;



rule "PRI_JOURNAL_LEARNING_OUTCOMES"
    ruleflow-group 'DataProcessing'
        salience 5000 
        no-loop
    when
      beUtils : BaseEntityUtils()
	  serviceToken : GennyToken( code == "PER_SERVICE") 
		userToken : GennyToken( code != "PER_SERVICE")
	  answer : Answer( attributeCode == "PRI_JOURNAL_LEARNING_OUTCOMES" )
	  answersToSave : Answers()
	  output : OutputParam( )
     then
 		System.out.println("Rule -> PRI_JOURNAL_LEARNING_OUTCOMES :  user=" + beUtils.getGennyToken().getUserCode()+" : "+answer); 
		String sourceCode = beUtils.getGennyToken().getUserCode();
		String targetCode = answer.getTargetCode();
		
		BaseEntity journal = beUtils.getBaseEntityByCode(targetCode);
		if (journal == null) {
			System.out.println(drools.getRule().getName()+" Creating new journal be "+targetCode);
			BaseEntity defBE = beUtils.getDEFByCode("DEF_JOURNAL");
			journal = beUtils.create(defBE, targetCode, targetCode);
			beUtils.saveAnswer(new Answer(sourceCode, targetCode, "LNK_INTERN", "[\""+sourceCode+"\"]",false,true));
			beUtils.saveAnswer(new Answer(sourceCode, targetCode, "PRI_SYNC", "TRUE",false,true)); /* set to have synced */

			SearchEntity searchBE = new SearchEntity(drools.getRule().getName(), "Internship Details")
				.addSort("PRI_NAME", "Created", SearchEntity.Sort.ASC)
				.addFilter("PRI_CODE", SearchEntity.StringFilter.LIKE, "BEG_%") 
				.addFilter("PRI_IS_INTERNSHIP", true) 
				.addFilter("LNK_INTERN", SearchEntity.StringFilter.LIKE, "%"+sourceCode+"%") 
				.addColumn("PRI_NAME", "Name")
				.addColumn("PRI_CODE", "Code")
				.addColumn("LNK_INTERNSHIP","Internship")
				.addColumn("LNK_INTERN_SUPERVISOR", "Supervisor")
				.addColumn("LNK_HOST_COMPANY_REP", "Host Company Rep")
				.addColumn("LNK_HOST_COMPANY", "Host Company")
				.setPageStart(0)
				.setPageSize(100);
		
			searchBE.setRealm(serviceToken.getRealm());
		
 			String jsonSearchBE = JsonUtils.toJson(searchBE);
 			/* System.out.println(jsonSearchBE); */
			String resultJson;
			BaseEntity result = null; 
			try {
				resultJson = QwandaUtils.apiPostEntity(GennySettings.qwandaServiceUrl + "/qwanda/baseentitys/search",
					jsonSearchBE, serviceToken.getToken());
				QDataBaseEntityMessage resultMsg = JsonUtils.fromJson(resultJson, QDataBaseEntityMessage.class);
									
				BaseEntity[] bes = resultMsg.getItems();
				System.out.println(drools.getRule().getName()+" The number of items is "+(bes ==null?"NULL":bes.length));
				if ((bes!=null) && (bes.length > 0)) {
					result = bes[0]; 
					System.out.println(drools.getRule().getName()+" Number of bes returned is "+bes.length+":"+result);
					String hostCompanyCode = null;
					String hostCompanyRepCode = null;
					String hostCompanySupervisorCode = null;
					String internshipCode = null;
		
					Optional<String> optHostCompanyCode = result.getValue("LNK_HOST_COMPANY");		
					Optional<String> optHostCompanyRepCode = result.getValue("LNK_HOST_COMPANY_REP");		
					Optional<String> optHostCompanySupervisorCode = result.getValue("LNK_INTERN_SUPERVISOR");		
					Optional<String> optInternshipCode = result.getValue("LNK_INTERNSHIP");		
					
					if (optHostCompanyCode.isPresent()) {
						beUtils.saveAnswer(new Answer(sourceCode, targetCode, "LNK_HOST_COMPANY", optHostCompanyCode.get(),false,true));
					}
					if (optHostCompanyRepCode.isPresent()) {
						beUtils.saveAnswer(new Answer(sourceCode, targetCode, "LNK_HOST_COMPANY_REP", optHostCompanyRepCode.get(),false,true));
					}
					if (optHostCompanySupervisorCode.isPresent()) {
						beUtils.saveAnswer(new Answer(sourceCode, targetCode, "LNK_INTERN_SUPERVISOR", optHostCompanySupervisorCode.get(),false,true));
					}
					if (optInternshipCode.isPresent()) {
						beUtils.saveAnswer(new Answer(sourceCode, targetCode, "LNK_INTERNSHIP", optInternshipCode.get(),false,true));
					}
					
					
				}	
			} catch (Exception e) {
				System.out.println(drools.getRule().getName()+" Error in establishing new journal be");
			}

		} else {
				System.out.println(drools.getRule().getName()+" journal be existing "+targetCode);
		}
					
		Answer ans = new Answer(sourceCode, targetCode, "PRI_JOURNAL_LEARNING_OUTCOMES", answer.getValue(),false,true);	
		answersToSave.add(ans);	
		VertxUtils.sendToFrontEnd(userToken, ans);

		output.setTypeOfResult("NONE");
  	    output.setResultCode("NONE");  /* dont display anything new */
		
		retract(answer); 
	
	
end
