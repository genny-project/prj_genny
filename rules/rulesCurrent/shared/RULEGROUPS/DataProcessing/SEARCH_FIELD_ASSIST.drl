package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import io.vertx.core.json.JsonObject;
import java.util.Map;
import java.util.HashMap;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.List;
import com.google.gson.reflect.TypeToken;
import life.genny.qwandautils.JsonUtils;
import life.genny.qwandautils.KeycloakUtils;
import life.genny.utils.VertxUtils;
import life.genny.utils.TableUtils;
import life.genny.models.TableData;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.qwanda.Ask;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.utils.OutputParam;
import life.genny.jbpm.customworkitemhandlers.ShowFrame;
import life.genny.models.BaseEntityImport;
import io.vavr.Tuple;
import io.vavr.Tuple2;
import life.genny.utils.ImportUtils;
import life.genny.qwanda.datatype.Allowed;
import life.genny.utils.CapabilityUtils;
import java.util.UUID;
import life.genny.rules.listeners.GennyRuleTimingListener;
import life.genny.utils.TableUtils;



rule "SEARCH_FIELD_ASSIST"
    ruleflow-group 'DataProcessing'
        salience 50000
        no-loop true
    when
 	  beUtils : BaseEntityUtils()
 	  allowed : Allowed(code == "USER") 
	  answer : Answer(  (attributeCode matches "PRI_SEARCH_TEXT") && (!(attributeCode  matches "SRT_.*")) && targetCode matches "SBE_.*"  && (!value.startsWith("!")))   
	  userToken : GennyToken (code != "PER_SERVICE" )
	  serviceToken : GennyToken( code == "PER_SERVICE")
	  output : OutputParam( )
	  ruleDetails : RuleDetails()
    then
  		System.out.println("Rule -> "+drools.getRule().getName()+" :  user=" + beUtils.getGennyToken().getUserCode()+" : "+answer);
   		retract(answer);
   		
 		Boolean cache = true;
		
		String searchCode = answer.getTargetCode();
		String attributeCode = answer.getAttributeCode();
		String filterValue = answer.getValue();
		
		/* TODO HACK */
		if ("PRI_ADDRESS_STATE".equals(attributeCode)) {
			switch (filterValue) {
				case "WA":  filterValue = "Western Australia"; break;
				case "SA":  filterValue = "South Australia"; break;
				case "VIC": filterValue = "Victoria"; break;
				case "TAS": filterValue = "Tasmania"; break;
				case "NSW": filterValue = "New South Wales"; break;
				case "ACT": filterValue = "Australian Capital Territory"; break;
				case "NT":  filterValue = "Northern Territory"; break;
				case "QLD": filterValue = "Queensland"; break;
			}
		}


			
		/* TODO -> Check against existing and public attributeCodes for the target */	
			
		/* get current search */
		TableUtils tableUtils = new TableUtils(beUtils);
		System.out.println("Realm is "+beUtils.getGennyToken().getRealm());
 		SearchEntity searchBE = VertxUtils.getObject(beUtils.getGennyToken().getRealm(), "",
				searchCode, SearchEntity.class,userToken.getToken());
		/* System.out.println("SearchBE  is  "+searchBE); */
		
		System.out.println(drools.getRule().getName()+" SEARCH ASSIST for "+searchBE.getCode() + " with attribute Code "+attributeCode+" and value "+filterValue); 

		/*Answer answer2 = new Answer(beUtils.getGennyToken().getUserCode(),searchCode,attributeCode,filterValue); */
		System.out.println("About to set attributeValue in BE");
 		searchBE.setValue(attributeCode,filterValue);
 		System.out.println("About to save searchBE to cache");
		VertxUtils.putObject(beUtils.getGennyToken().getRealm(), "", searchCode, searchBE,
				beUtils.getGennyToken().getToken());
		
		System.out.println("About to search");
		long totalTime = TableUtils.searchTable(beUtils,searchBE, true,null,null,false);

		System.out.println("total took " + (totalTime) + " ms"); 

		output.setTypeOfResult("NONE");
  	    output.setResultCode("NONE");  /* dont display anything new */
		
		
end
