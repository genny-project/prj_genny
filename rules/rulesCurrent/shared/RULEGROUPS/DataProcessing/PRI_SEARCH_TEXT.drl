package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import io.vertx.core.json.JsonObject;
import java.util.Map;
import java.util.HashMap;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.List;
import com.google.gson.reflect.TypeToken;
import life.genny.qwandautils.JsonUtils;
import life.genny.utils.VertxUtils;
import life.genny.utils.TableUtils;
import life.genny.models.TableData;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.Ask;
import life.genny.qwanda.message.QDataAskMessage;
import  life.genny.utils.OutputParam;


import java.util.List;
import java.util.ArrayList;

rule "PRI_SEARCH_TEXT"
    ruleflow-group 'AnswerProcessing'
        salience 500 
    when
      beUtils : BaseEntityUtils()
	  serviceToken : GennyToken( code == "PER_SERVICE") 
	  answer : Answer( attributeCode == "PRI_SEARCH_TEXT" )
	  output : OutputParam( )
	  
     then
  		System.out.println("Rule -> "+drools.getRule().getName()+" :  user=" + beUtils.getGennyToken().getUserCode()+" : "+answer); 
		String sourceCode = beUtils.getGennyToken().getUserCode();
		String targetCode = answer.getTargetCode();
		
		/* Perform a search bar search */
		String searchBarString = answer.getValue();
		searchBarString = searchBarString.trim();
		System.out.println("Search text = ["+searchBarString+"]");
		
		/* fetch Session SearchBar List from User */
		BaseEntity user = VertxUtils.getObject(beUtils.getGennyToken().getRealm(), "", beUtils.getGennyToken().getUserCode(),
				BaseEntity.class, beUtils.getGennyToken().getToken());
		Type type = new TypeToken<List<String>>() {}.getType();
		List<String> defaultList = new ArrayList<String>();
		String defaultListString = JsonUtils.toJson(defaultList);
		String historyStr = user.getValue("PRI_SEARCH_HISTORY",defaultListString);
		List<String> searchHistory = JsonUtils.fromJson(historyStr, type);
		
		/* Add new SearchBarString to Session SearchBar List */
		searchHistory.add(0, searchBarString);
		String newHistoryString = JsonUtils.toJson(searchHistory);
		Answer history = new Answer(beUtils.getGennyToken().getUserCode(),beUtils.getGennyToken().getUserCode(),"PRI_SEARCH_HISTORY",newHistoryString);
		beUtils.saveAnswer(history);
		
		/* Look up Search */
		  SearchEntity searchBE = new SearchEntity("SBE_SEARCH","Search")
  	     .addSort("PRI_CREATED","Created",SearchEntity.Sort.DESC)
  	     .addFilter("PRI_NAME",SearchEntity.StringFilter.LIKE,"%"+searchBarString+"%")
  	     .addColumn("PRI_NAME", "Name")
      	 .addColumn("PRI_LANDLINE", "Phone")
  	     .addColumn("PRI_EMAIL", "Email")
  	     .addColumn("PRI_ADDRESS_CITY", "City")
  	     .addColumn("PRI_ADDRESS_STATE", "State")
  	     .setPageStart(0)
  	     .setPageSize(10);
  	     
  	     TableUtils tableUtils = new TableUtils(beUtils);
  	     
  	     QDataBaseEntityMessage  msg = tableUtils.fetchSearchResults(searchBE,beUtils.getGennyToken());
  	     
  	     
  	     TableData tableData = tableUtils.generateTableAsks(searchBE,beUtils.getGennyToken(),  msg);
  	     VertxUtils.writeMsg("webcmds", JsonUtils.toJson(msg));
  	     
      		  		
         Ask headerAsk = tableData.getAsk();
      	 Ask[] askArray = new Ask[1];
      	 askArray[0] = headerAsk;
      	 QDataAskMessage headerAskMsg = new QDataAskMessage(askArray);
      	 headerAskMsg.setToken(beUtils.getGennyToken().getToken());
      	 VertxUtils.writeMsg("webcmds", JsonUtils.toJson(headerAskMsg));
      	 String headerAskCode = headerAsk.getQuestionCode();
  	     
    		Set<QDataAskMessage> askMsgs = new HashSet<QDataAskMessage>();
  		  	msg = TableUtils.changeQuestion("FRM_TABLE_HEADER",headerAskCode,serviceToken,beUtils.getGennyToken(),askMsgs);
  			    for (QDataAskMessage askMsg : askMsgs) {
  			    	askMsg.setToken(beUtils.getGennyToken().getToken());
  			    	askMsg.getItems()[0] = headerAsk;
  			    	VertxUtils.writeMsg("webcmds", JsonUtils.toJson(askMsg));
  			    }
                
      	                
      	 VertxUtils.writeMsg("webcmds", JsonUtils.toJson(msg));
  	     
  	     /* Send to front end */
   	     
  	     output.setFormCode("FRM_TABLE","FRM_CONTENT");
		retract(answer);
	
end
