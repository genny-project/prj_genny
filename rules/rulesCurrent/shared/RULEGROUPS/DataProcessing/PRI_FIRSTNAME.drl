package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.Answers;
import io.vertx.core.json.JsonObject;
import java.util.Map;
import java.util.HashMap;
import life.genny.utils.VertxUtils;
import life.genny.qwandautils.JsonUtils;
import org.apache.commons.lang3.text.WordUtils;
import org.apache.commons.lang3.StringUtils;

import java.util.List;
import java.util.ArrayList;

rule "PRI_FIRSTNAME"
	ruleflow-group 'DataProcessing'
	salience 10000 
	no-loop
	when
		beUtils : BaseEntityUtils()
		answer : Answer( attributeCode == "PRI_FIRSTNAME" )
		answersToSave : Answers()
		output : OutputParam( )
		serviceToken : GennyToken( code == "PER_SERVICE")
		userToken : GennyToken( code != "PER_SERVICE")
		ruleDetails : RuleDetails()
		allowed: Allowed((code == "USER") || (code == "EDIT_INTERN") || (code == "EDIT_HCR") || (code == "EDIT_EPR") || (code == "EDIT_REF_PART_REP") || (code == "EDIT_AGENT"))

	then
		System.out.println("Rule -> "+drools.getRule().getName()+" :  user=" + beUtils.getGennyToken().getUserCode()+" : "+answer); 
		String sourceCode = beUtils.getGennyToken().getUserCode();
		String targetCode = answer.getTargetCode();
		BaseEntity person = beUtils.getBaseEntityByCode(targetCode);
		
		/* Parse json answer and save the individual answers */
		String firstname = answer.getValue();
		firstname = firstname.toLowerCase().trim();
		firstname = WordUtils.capitalize(firstname);

		String fieldName = "firstName";
		boolean allowedToChange = false;
		System.out.println("Rule -> PRI_LASTNAME, the allowed.code is "+allowed.code);
		/* check if capability to change last name there */
		switch (allowed.code) {
			case "USER":        {allowedToChange = true;} break;
			case "EDIT_INTERN": {allowedToChange = true;} break;
			case "EDIT_AGENT":  {allowedToChange = true;} break;
			case "EDIT_HCR":    {allowedToChange = true;} break;
			case "EDIT_EPR":    {allowedToChange = true;} break;
			case "EDIT_REF_PART_REP": {allowedToChange = true;} break;
		}

		if (allowedToChange && !StringUtils.isEmpty(firstname)) {
			String keycloakUUID = answer.getTargetCode().substring("PER_".length());
			int statusCode = KeycloakUtils.updateUserField(keycloakUUID, serviceToken.getToken(), userToken.getRealm(), fieldName, firstname);
			System.out.println(ruleDetails+" "+drools.getRule().getName()+" Changing "+fieldName+" for "+answer.getTargetCode()+" to "+answer.getValue()+" statusCode="+statusCode);
			if (statusCode > 204) {
				System.out.println(ruleDetails+" "+drools.getRule().getName()+" Error in setting"+fieldName+" for "+answer.getTargetCode()+" to "+answer.getValue()+" statusCode="+statusCode);
			} else {
				System.out.println(ruleDetails+" "+drools.getRule().getName()+"  Saving the good "+fieldName);
			}
		}

		answersToSave.add(new Answer(sourceCode, targetCode, "PRI_FIRSTNAME", firstname,false,false));	

		String lastname = person.getValue("PRI_LASTNAME","");
		String name = firstname  + " " + lastname;
		name = name.trim();	
		System.out.println("Rule -> PRI_FIRSTNAME Name = " + name);
			
		String initials = WordUtils.initials(name).toUpperCase();
		System.out.println("Rule -> PRI_FIRSTNAME initials = " + initials);
	
		Answer answerName = new Answer(sourceCode,targetCode,"PRI_NAME",name,false,true);
 		answersToSave.add(answerName);
		Answer answerInitials = new Answer(sourceCode,targetCode,"PRI_INITIALS",initials,false,true);
		answersToSave.add(answerInitials);
		
		VertxUtils.sendToFrontEnd(userToken, answerName);

		output.setTypeOfResult("NONE");
		output.setResultCode("NONE");  /* dont display anything new */
	
		retract(answer); 
		update(answersToSave);
	
end 
