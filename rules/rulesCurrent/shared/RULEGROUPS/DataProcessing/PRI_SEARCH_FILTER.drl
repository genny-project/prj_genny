package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.Answers;
import io.vertx.core.json.JsonObject;
import java.util.Map;
import java.util.HashMap;
import life.genny.utils.VertxUtils;
import life.genny.qwandautils.JsonUtils;
import life.genny.utils.TableUtils;


import java.util.List;
import java.util.ArrayList;



rule "PRI_SEARCH_FILTER"
    ruleflow-group 'DataProcessing'
        salience 550 
    when
      beUtils : BaseEntityUtils()
	  serviceToken : GennyToken( code == "PER_SERVICE") 
	  userToken : GennyToken( code == "!PER_SERVICE") 
	  dataMsg : QDataAnswerMessage( (items != null) && (items.length > 0) && (aliasCode != "STATELESS") && (aliasCode != "IMPORT") )
	  
	  answersToSave : Answers()
	  output : OutputParam( )
     then
 		System.out.println("Rule -> SCH_FILTER :  user=" + beUtils.getGennyToken().getUserCode()+" : "+answer); 
		String sourceCode = beUtils.getGennyToken().getUserCode();
		
		
		if (dataMsg.getItems()!=null) {
			Integer count = dataMsg.getItems().length;
			Integer index=1;
			Answer filterAnswer = null;
			for (Answer answer : dataMsg.getItems()) {
				answer.setInferred(false); /* force inference from the user to be off. This ensures that if this flag is set it is from internal */
				filterAnswer = answer;
				
				System.out.println("Process Answers: inserted answer "+index+" of "+count+" "+answer.getTargetCode()+":"+answer.getAttributeCode()); 
				break;
			}
			
			if (filterAnswer.sourceCode.equals(userToken.getUserCode())) { /* only user */
				String targetCode = answer.getTargetCode();
		
				SearchEntity searchBE = VertxUtils.getObject(beUtils.getGennyToken().getRealm(), "", targetCode, SearchEntity.class,
				beUtils.getGennyToken().getToken());
				Answer filterUpdate = new Answer(beUtils.getGennyToken().getUserCode(), searchBE.getCode(),answer.getAttributeCode(), answer.getValue());
				searchBE = beUtils.updateBaseEntity(searchBE, filterUpdate,SearchEntity.class);
				VertxUtils.putObject(beUtils.getGennyToken().getRealm(), "", searchBE.getCode(), searchBE,
				beUtils.getGennyToken().getToken());
		
				long totalTime = TableUtils.searchTable(beUtils,searchBE, true);

				System.out.println("total took " + (totalTime) + " ms"); 
		
			}
		}
		
		
	
			
		output.setTypeOfResult("NONE");
  	    output.setResultCode("NONE");  /* dont display anything new */
		
		

		retract(dataMsg);
		update(answersToSave);
	
end
