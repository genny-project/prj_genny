package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.Answers;
import io.vertx.core.json.JsonObject;
import java.util.Map;
import java.util.HashMap;
import life.genny.utils.VertxUtils;
import life.genny.qwandautils.JsonUtils;
import life.genny.utils.TableUtils;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;


import java.util.List;
import java.util.ArrayList;



rule "PRI_SEARCH_FILTER"
    ruleflow-group 'DataProcessing'
        salience 550 
    when
      beUtils : BaseEntityUtils()
	  serviceToken : GennyToken( code == "PER_SERVICE") 
	  answer : Answer( ( attributeCode  matches "FLD_.*" ||  attributeCode  matches "PRI_.*" || attributeCode  matches "LNK_.*" ) && targetCode matches "SBE_.*"  && !(value.startsWith("!")))
	  answersToSave : Answers()
	  output : OutputParam( )
     then
 		System.out.println("Rule -> "+drools.getRule().getName()+" :  user=" + beUtils.getGennyToken().getUserCode()+" : "+answer); 
		String sourceCode = beUtils.getGennyToken().getUserCode();

		if (sourceCode.equals(answer.getSourceCode())) { /* only user */
			System.out.println(drools.getRule().getName()+" Source user is confirmed "+sourceCode);
			String targetCode = answer.getTargetCode();
		
			System.out.println("sourceCode = " + sourceCode);
			System.out.println("targetCode = " + targetCode);
	
			/* Retrieve the target SBE */
			SearchEntity searchBE = VertxUtils.getObject(beUtils.getGennyToken().getRealm(), "", targetCode, SearchEntity.class,
				beUtils.getGennyToken().getToken());
			

			String val = answer.getValue();
			String filterAttributeCode = answer.getAttributeCode();
			if (filterAttributeCode.startsWith("FLD_")) {
				filterAttributeCode = filterAttributeCode.substring(4);
			}
			
			System.out.println("filterAttributeCode = " + filterAttributeCode);
			System.out.println("val = " + val);

			/* remove the attribute if value is blank */
			if (StringUtils.isBlank(answer.getValue())) {

				/* Retrieve the base SBE */
				String baseSearchCode = targetCode.substring(0, targetCode.length()-serviceToken.getSessionCode().length()-1);
				System.out.println("baseSearchCode = " + baseSearchCode);

				SearchEntity baseSearchBE = VertxUtils.getObject(beUtils.getGennyToken().getRealm(), "", baseSearchCode, SearchEntity.class,
					beUtils.getGennyToken().getToken());

				/* Find the highest weight of filters in base SBE */
				Double baseMaxWeight = 0.0;
				for (EntityAttribute ea : baseSearchBE.getBaseEntityAttributes()) {
					if (ea.getAttributeCode().startsWith("PRI_") || ea.getAttributeCode().startsWith("LNK_")) {
						if (ea.getWeight() > baseMaxWeight) {
							baseMaxWeight = ea.getWeight();
						}
					}
				}
				System.out.println("baseMaxWeight = " + baseMaxWeight);
				System.out.println("answer.getWeight() = " + answer.getWeight());

				/* Find and remove the correct filter */
				for (EntityAttribute ea : searchBE.getBaseEntityAttributes()) {
					if (ea.getWeight() == (baseMaxWeight + answer.getWeight())) {
						searchBE.removeAttribute(ea.getAttributeCode());
						System.out.println("Removing filter with code " + ea.getAttributeCode());
						break;
					}
				}

			} else {

				String valString = null;
				Integer valInt = null;
				Long valLong = null;
				Double valDouble = null;
				Boolean valBoolean = null;
				LocalDate valDate = null;
				LocalDateTime valDateTime = null;

				String filterString = null;
				SearchEntity.Filter filtType = null;
				SearchEntity.StringFilter stringFiltType = null;

				Attribute attr = RulesUtils.getAttribute(filterAttributeCode, serviceToken);
				String dtt = attr.getDataType().getClassName();
				System.out.println("Attribute datatype = " + dtt);

				if (val.contains(":")) {
					String[] prms = val.split(":");
					filterString = prms[0];
					val = String.join(":", Arrays.copyOfRange(prms, 1, prms.length));
				} else {
					filterString = "=";
				}
				System.out.println("val = " + val);

				/* Determine the datatype */
				if (dtt.equals("java.lang.Boolean") || dtt.equals("Boolean")) {
					valBoolean = Boolean.valueOf(val);
					System.out.println("valBoolean = " + valBoolean);
				} else if (dtt.equals("java.lang.Double") || dtt.equals("Double")) {
					valDouble = Double.valueOf(val);
					System.out.println("valDouble = " + valDouble);
				} else if (dtt.equals("java.lang.Integer") || dtt.equals("Integer")) {
					valInt = Integer.valueOf(val);
					System.out.println("valInt = " + valInt);
				} else if (dtt.equals("java.lang.Long") || dtt.equals("Long")) {
					valLong = Long.valueOf(val);
					System.out.println("valLong = " + valLong);
				} else if (dtt.equals("java.time.LocalDateTime") || dtt.equals("LocalDateTime")) {
					String dateTimeString = val.split("\\.")[0];
					valDateTime = LocalDateTime.parse(dateTimeString);
					System.out.println("valDateTime = " + valDateTime);
				} else if (dtt.equals("java.time.LocalDate") || dtt.equals("LocalDate")) {
					String dateTimeString = val.split("\\.")[0];
					LocalDateTime dateTime = LocalDateTime.parse(dateTimeString);
					valDate = dateTime.toLocalDate();
					System.out.println("valDate = " + valDate);
				} else {
					/* DEFAULTS TO STRING */
					valString = val;
					System.out.println("valString = " + valString);
				}

				System.out.println("filterString = " + filterString);

				/* Determine the filter type */
				if (filterString.equals("L")) {
					stringFiltType = SearchEntity.StringFilter.LIKE;
					valString = "%" + valString + "%";
				} else if (filterString.equals("NL")) {
					stringFiltType = SearchEntity.StringFilter.NOT_LIKE;
					valString = "%" + valString + "%";
				} else if (filterString.equals(">")) {
					filtType = SearchEntity.Filter.GREATER_THAN;
				} else if (filterString.equals("<")) {
					filtType = SearchEntity.Filter.LESS_THAN;
				} else if (filterString.equals(">=")) {
					filtType = SearchEntity.Filter.GREATER_THAN_AND_EQUAL;
				} else if (filterString.equals("<=")) {
					filtType = SearchEntity.Filter.LESS_THAN_AND_EQUAL;
				} else if (filterString.equals("=")) {
					if (valString != null) {
						stringFiltType = SearchEntity.StringFilter.EQUAL;
					} else {
						filtType = SearchEntity.Filter.EQUALS;
					}
				} else if (filterString.equals("!=")) {
					if (valString != null) {
						stringFiltType = SearchEntity.StringFilter.NOT_EQUAL;
					} else {
						filtType = SearchEntity.Filter.NOT_EQUALS;
					}
				}

				System.out.println("valString = " + valString);
				
				Boolean andTrigger = false;
				for (EntityAttribute ea : searchBE.getBaseEntityAttributes()) {
					if (ea.getAttributeCode().equals(filterAttributeCode)) {
						andTrigger = true;
					}
				}
				
				System.out.println("andTrigger = " + andTrigger);

				/* Add filter */
				if (!andTrigger) {
					if (valString != null) {
						searchBE.addFilter(filterAttributeCode, stringFiltType, valString);
					} else if (valInt != null) {
						searchBE.addFilter(filterAttributeCode, filtType, valInt);
					} else if (valLong != null) {
						searchBE.addFilter(filterAttributeCode, filtType, valLong);
					} else if (valDouble != null) {
						searchBE.addFilter(filterAttributeCode, filtType, valDouble);
					} else if (valDate != null) {
						searchBE.addFilter(filterAttributeCode, filtType, valDate);
					} else if (valDateTime != null) {
						searchBE.addFilter(filterAttributeCode, filtType, valDateTime);
					} else if (valBoolean != null) {
						searchBE.addFilter(filterAttributeCode, valBoolean);
					}
				} else {
					/* Add AND filter if attribute already exists */
					if (valString != null) {
						searchBE.addAnd(filterAttributeCode, stringFiltType, valString);
					} else if (valInt != null) {
						searchBE.addAnd(filterAttributeCode, filtType, valInt);
					} else if (valLong != null) {
						searchBE.addAnd(filterAttributeCode, filtType, valLong);
					} else if (valDouble != null) {
						searchBE.addAnd(filterAttributeCode, filtType, valDouble);
					} else if (valDate != null) {
						searchBE.addAnd(filterAttributeCode, filtType, valDate);
					} else if (valDateTime != null) {
						searchBE.addAnd(filterAttributeCode, filtType, valDateTime);
					} else if (valBoolean != null) {
						System.out.println("WARN: Cannot add a second boolean filter on this attribute " + filterAttributeCode);
					}
				}
			}

			VertxUtils.putObject(beUtils.getGennyToken().getRealm(), "", searchBE.getCode(), searchBE,
				beUtils.getGennyToken().getToken());
			System.out.println("Performing search...");
			long totalTime = TableUtils.searchTable(beUtils,searchBE, true);

			System.out.println("total took " + (totalTime) + " ms"); 
		
		} else {
			System.out.println(drools.getRule().getName()+" sourceCode ("+sourceCode+") not equal to answer.source ("+answer.getSourceCode()+")");
		}
			
		output.setTypeOfResult("NONE");
  	    output.setResultCode("NONE");  /* dont display anything new */
		
		

		retract(answer);
		update(answersToSave);
	
end
