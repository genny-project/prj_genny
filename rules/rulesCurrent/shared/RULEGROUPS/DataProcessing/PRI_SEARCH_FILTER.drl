package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.Answers;
import io.vertx.core.json.JsonObject;
import java.util.Map;
import java.util.HashMap;
import life.genny.utils.VertxUtils;
import life.genny.qwandautils.JsonUtils;
import life.genny.utils.TableUtils;


import java.util.List;
import java.util.ArrayList;



rule "PRI_SEARCH_FILTER"
    ruleflow-group 'DataProcessing'
        salience 550 
    when
      beUtils : BaseEntityUtils()
	  serviceToken : GennyToken( code == "PER_SERVICE") 
	  answer : Answer( ( attributeCode  matches "FLD_.*" ||  attributeCode  matches "PRI_.*" || attributeCode  matches "LNK_.*" ) && targetCode matches "SBE_.*"  && !(value.startsWith("!")))
	  answersToSave : Answers()
	  output : OutputParam( )
     then
 		System.out.println("Rule -> "+drools.getRule().getName()+" :  user=" + beUtils.getGennyToken().getUserCode()+" : "+answer); 
		String sourceCode = beUtils.getGennyToken().getUserCode();
		if (sourceCode.equals(answer.getSourceCode())) { /* only user */
			System.out.println(drools.getRule().getName()+" Source user is confirmed "+sourceCode);
			String targetCode = answer.getTargetCode();
		
	
			SearchEntity searchBE = VertxUtils.getObject(beUtils.getGennyToken().getRealm(), "", targetCode, SearchEntity.class,
				beUtils.getGennyToken().getToken());
				String filterAttributeCode = answer.getAttributeCode();
			/*	if (filterAttributeCode.startsWith("FLD_")) {
					filterAttributeCode = filterAttributeCode.substring(4);
				} */
				
				System.out.println(drools.getRule().getName()+" VALUE  = "+answer.getValue());
				String val = answer.getValue();
				String operator = "_LIKE_";
				
				
				Answer filterUpdate = new Answer(sourceCode, targetCode,filterAttributeCode, val);  /* : used to indicate LIKE */
				System.out.println(drools.getRule().getName()+" Filter ans = "+filterUpdate);
				System.out.println(drools.getRule().getName()+" Before updateBaseEntity for search ");
				
				if (StringUtils.isBlank(answer.getValue())) {
					/* remove the attribute */
					searchBE.removeAttribute(filterAttributeCode);
					System.out.println("Removing "+filterAttributeCode);
				} else {
					searchBE = beUtils.updateBaseEntity(searchBE, filterUpdate,SearchEntity.class);
				}
			VertxUtils.putObject(beUtils.getGennyToken().getRealm(), "", searchBE.getCode(), searchBE,
				beUtils.getGennyToken().getToken());
			System.out.println(drools.getRule().getName()+" Before search ");
			long totalTime = TableUtils.searchTable(beUtils,searchBE, true);

			System.out.println("total took " + (totalTime) + " ms"); 
		
		} else {
			System.out.println(drools.getRule().getName()+" sourceCode ("+sourceCode+") not equal to answer.source ("+answer.getSourceCode()+")");
		}
			
		output.setTypeOfResult("NONE");
  	    output.setResultCode("NONE");  /* dont display anything new */
		
		

		retract(answer);
		update(answersToSave);
	
end
