package life.genny.rules;

import org.apache.commons.lang3.StringUtils;

import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import io.vertx.core.json.JsonObject;
import java.util.Map;
import java.util.HashMap;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.List;
import com.google.gson.reflect.TypeToken;
import life.genny.qwandautils.JsonUtils;
import life.genny.utils.VertxUtils;
import life.genny.utils.TableUtils;
import life.genny.models.TableData;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.qwanda.Ask;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.utils.OutputParam;
import life.genny.jbpm.customworkitemhandlers.ShowFrame;

import java.util.List;
import java.util.ArrayList;

import java.util.concurrent.Callable;
import java.util.concurrent.CompletionService;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorCompletionService;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import life.genny.utils.SearchCallable;
import life.genny.utils.TableFrameCallable;
import life.genny.utils.CacheSearchUtils;

rule "FIX_APP_STAR_RATING"
    ruleflow-group 'EventProcessing'
		salience 2
    no-loop
    when
			message : QEventMessage(data.code == "QUE_FIX_APP_STAR_RATING" && data.parentCode == "QUE_FIX_APP_STAR_RATING_GRP" )
			userToken : GennyToken (code != "PER_SERVICE" )
			serviceToken : GennyToken( code == "PER_SERVICE")
			output : OutputParam( )
			ruleDetails : RuleDetails()
			beUtils : BaseEntityUtils()
    then
			System.out.println(ruleDetails+" "+drools.getRule().getName()+" Processings : " + message );

			System.out.println("Fixing All User Status'");


			SearchEntity searchBE = new SearchEntity("SBE_GET_INTERNS", "Get All Interns")
				.addFilter("PRI_CODE", SearchEntity.StringFilter.LIKE, "PER_%")
				.addFilter("PRI_STATUS", SearchEntity.StringFilter.LIKE, "%")
				.addFilter("PRI_IS_INTERN", true)
				.setPageStart(0).setPageSize(100000);
	
			searchBE.setRealm(serviceToken.getRealm());
			List<BaseEntity> internBaseEntitys = beUtils.getBaseEntitys(searchBE);

			System.out.println("Found " + internBaseEntitys.size() + " Intern BEs");

			Integer changeCount = 0;
			for (BaseEntity intern : internBaseEntitys) {
				System.out.println("Intern Code = " + intern.getCode());
				String valueString = intern.getValueAsString("PRI_STAR_RATING");
				System.out.println("valueString = " + valueString);
				
				/* Get all their applications */
				SearchEntity appSearchBE = new SearchEntity("SBE_APPS_FOR_USER", "Applications for user")
					.addFilter("PRI_CODE", SearchEntity.StringFilter.LIKE, "APP_%")
					.addFilter("PRI_INTERN_CODE", SearchEntity.StringFilter.EQUAL, intern.getCode())
					.setPageStart(0).setPageSize(1000000);
				
				appSearchBE.setRealm(userToken.getRealm());
				List<BaseEntity> applications = beUtils.getBaseEntitys(appSearchBE);

				if (valueString != null) {
					Double value = Double.valueOf(valueString);
					System.out.println("value = " + value); 
					/* Save Star Rating for each APP */
					for (BaseEntity app : applications) {
						changeCount += 1;
						System.out.println("Saving Star Rating for " + app.getCode());
						beUtils.saveAnswer(new Answer(userToken.getUserCode(), app.getCode(), "PRI_STAR_RATING", value));
					}
				} else {
					System.out.println("status is NULL");
				}

			}
			System.out.println("Number of Changed Intern Status' = " + changeCount.toString());

			retract(message);
			output.setTypeOfResult("NONE");
			output.setResultCode("NONE");  /* dont display anything new */
		end
