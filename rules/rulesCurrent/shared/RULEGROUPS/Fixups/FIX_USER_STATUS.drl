package life.genny.rules;

import org.apache.commons.lang3.StringUtils;

import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import io.vertx.core.json.JsonObject;
import java.util.Map;
import java.util.HashMap;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.List;
import com.google.gson.reflect.TypeToken;
import life.genny.qwandautils.JsonUtils;
import life.genny.utils.VertxUtils;
import life.genny.utils.TableUtils;
import life.genny.models.TableData;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.qwanda.Ask;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.utils.OutputParam;
import life.genny.jbpm.customworkitemhandlers.ShowFrame;

import java.util.List;
import java.util.ArrayList;

import java.util.concurrent.Callable;
import java.util.concurrent.CompletionService;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorCompletionService;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import life.genny.utils.SearchCallable;
import life.genny.utils.TableFrameCallable;
import life.genny.utils.CacheSearchUtils;

rule "FIX_USER_STATUS"
    ruleflow-group 'EventProcessing'
		salience 2
    no-loop
    when
			message : QEventMessage(data.code == "QUE_FIX_USER_STATUS" && data.parentCode == "QUE_FIX_USER_STATUS_GRP" )
			userToken : GennyToken (code != "PER_SERVICE" )
			serviceToken : GennyToken( code == "PER_SERVICE")
			output : OutputParam( )
			ruleDetails : RuleDetails()
			beUtils : BaseEntityUtils()
    then
			System.out.println(ruleDetails+" "+drools.getRule().getName()+" Processings : " + message );

			System.out.println("Fixing All User Status'");


			SearchEntity searchBE = new SearchEntity("SBE_GET_INTERNS", "Get All Interns")
				.addFilter("PRI_CODE", SearchEntity.StringFilter.LIKE, "PER_%")
				.addFilter("PRI_STATUS", SearchEntity.StringFilter.LIKE, "%")
				.addFilter("PRI_IS_INTERN", true)
				.setPageStart(0).setPageSize(100000);
	
			searchBE.setRealm(serviceToken.getRealm());
			List<BaseEntity> internBaseEntitys = beUtils.getBaseEntitys(searchBE);

			System.out.println("Found " + internBaseEntitys.size() + " Intern BEs");

			Integer changeCount = 0;
			Integer disableCount = 0;
			Integer qaTestCount = 0;
			for (BaseEntity intern : internBaseEntitys) {
				System.out.println("Intern Code = " + intern.getCode());
				String status = intern.getValue("PRI_STATUS", null);
				System.out.println("Intern Status = " + status);
				
				SearchEntity appSearchBE = new SearchEntity("SBE_LINKED_APPLICATIONS", "Linked Applications")
					.addFilter("PRI_CODE", SearchEntity.StringFilter.LIKE, "APP_%")
					.addFilter("PRI_INTERN_CODE", SearchEntity.StringFilter.EQUAL, intern.getCode())
					.setPageStart(0).setPageSize(100000);
		
				appSearchBE.setRealm(serviceToken.getRealm());
				List<BaseEntity> linkedApps = beUtils.getBaseEntitys(appSearchBE);

				/* Disable all apps if person is archived */
				if (status.equals("ARCHIVED")) {
					System.out.println("Intern is an ARCHIVED intern");
					/* for (BaseEntity app : linkedApps) { */
					/* 	beUtils.saveAnswer(new Answer(userToken.getUserCode(), app.getCode(), "PRI_DISABLED", "true")); */
					/* } */
					disableCount += 1;
				} else if (status.equals("QA_TEST")) {
					System.out.println("Intern is a QA_TEST intern");
					qaTestCount += 1;
				} else {
					/* Otherwise we find the most progressed app status and save it to the person */
					String[] statusArray = { "AVAILABLE", "APPLIED", "SHORTLISTED", "INTERVIEWED", "OFFERED", "PLACED", "PROGRESS", "COMPLETED" };
					int index = 0;
					for (BaseEntity app : linkedApps) {
						/* FIND MOST PROGRESSED STATUS */
						String appStatus = app.getValue("PRI_STATUS", null);
						if (appStatus != null) {
							if (Arrays.toString(statusArray).contains(appStatus)) {
								int pos = Arrays.asList(statusArray).indexOf(appStatus);
								if (pos > index) {
									index = pos;
								}
							}
						} else {
							System.out.println("PRI_STATUS is null for " + app.getCode());
						}
					}
					System.out.println("new status = " + statusArray[index]);
					/* beUtils.saveAnswer(new Answer(userToken.getUserCode(), internBE.getCode() , "PRI_STATUS", statusArray[index])); */
					changeCount += 1;
				}

			}
			System.out.println("Number of Changed Interns = " + changeCount);
			System.out.println("Number of Archived = " + disableCount);
			System.out.println("Number of QA_TEST Interns = " + qaTestCount);

			retract(message);
			output.setTypeOfResult("NONE");
			output.setResultCode("NONE");  /* dont display anything new */
		end
