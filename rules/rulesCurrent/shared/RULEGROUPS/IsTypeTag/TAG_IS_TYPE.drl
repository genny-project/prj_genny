package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.utils.OutputParam;
import life.genny.qwandautils.KeycloakUtils;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.GennySettings;
import java.util.UUID;
import life.genny.notifications.EmailHelper;
import java.util.Random;
import com.google.gson.Gson;

import java.util.List;
import java.util.ArrayList;

rule "TAG_IS_TYPE"
    ruleflow-group 'IsBaseEntity'
    no-loop true
    salience 1000
    when
	 	userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		output : OutputParam()
		baseEntityType : String(baseEntityType.equals("INTERN") || 
								baseEntityType.equals("HOST_CPY_REP") ||
								baseEntityType.equals("EDU_PRO_REP") ||
								baseEntityType.equals("AGENT")
								)
		newBe : BaseEntity()

     then
 		System.out.println("TAG_IS_TYPE: Rule fired" );
 		System.out.println("TAG_IS_TYPE: newBe = " + newBe.getCode());
 	
 		String type = "PRI_IS_" + baseEntityType;
 		System.out.println("type = " + type);
 		
 		BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken, userToken);
 		beUtils.saveAnswer(new Answer(userToken.getUserCode(), newBe.getCode() , type, false));

		newBe = beUtils.getBaseEntityByCode(newBe.getCode());

		retract(newBe)

end
