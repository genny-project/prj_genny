package life.genny.rules;


import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QBulkMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.rules.QRules;
import io.vertx.core.json.JsonObject;
import life.genny.qwandautils.JsonUtils;
import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.utils.VertxUtils;
import life.genny.utils.BaseEntityUtils;
import life.genny.models.GennyToken;
import org.kie.api.runtime.process.WorkflowProcessInstance;
import life.genny.models.Frame3;
import life.genny.models.Theme;
import life.genny.utils.FrameUtils2;
import life.genny.models.FramePosition;
import life.genny.qwanda.VisualControlType;

rule "THM_PROFILE_IMAGE"
  ruleflow-group 'GenerateThemes'

  no-loop true

  when
    not  Theme(code == "THM_PROFILE_IMAGE")
    serviceToken : GennyToken( code == "PER_SERVICE")

  then
    System.out.println(" Generate THM_PROFILE_IMAGE Rule  ");

    Theme theme = Theme.builder("THM_PROFILE_IMAGE")
                  .addAttribute()
                    .imageHeight(40)
                    .imageWidth(40)
                    .showName(false)
                  .end()
                  .build();
    theme.setRealm(serviceToken.getRealm());
    insert (theme);

    VertxUtils.putObject(serviceToken.getRealm(), "", theme.getCode(), theme, 
    serviceToken);
end