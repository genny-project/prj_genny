package life.genny.rules;

global org.apache.logging.log4j.Logger log;

import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QBulkMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.rules.QRules;
import io.vertx.core.json.JsonObject;
import life.genny.qwandautils.JsonUtils;
import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.utils.VertxUtils;
import life.genny.utils.BaseEntityUtils;
import life.genny.models.GennyToken;
import org.kie.api.runtime.process.WorkflowProcessInstance;
import life.genny.models.Frame3;
import life.genny.models.Theme;
import life.genny.utils.FrameUtils2;
import java.util.Map;
import life.genny.models.FrameTuple3;
import life.genny.utils.TableUtils;
import life.genny.utils.BucketUtils;
import life.genny.qwanda.Context;
import life.genny.qwanda.ContextList;
import life.genny.qwanda.ContextType;

rule "FRM_BUCKET_VIEW_CONTENT"
	ruleflow-group 'GenerateFrames'

	when
		not  Frame3(code == "FRM_BUCKET_VIEW_CONTENT")
		FRM_BUCKET_WRAPPER : Frame3 ( code == "FRM_BUCKET_WRAPPER" )
		serviceToken : GennyToken( code == "PER_SERVICE")
		
	then
		System.out.println(" Generating FRM_BUCKET_VIEW_CONTENT Ruless  "+serviceToken.getUserCode());

		Frame3 frame = Frame3.builder("FRM_BUCKET_VIEW_CONTENT")
									.addFrame(FRM_BUCKET_WRAPPER, FramePosition.CENTRE).end()
									.build();
						
		frame.setRealm(serviceToken.getRealm());
		insert (frame);
		
		/* Process and save to cache */
		FrameUtils2.toMessage(frame, serviceToken);
end