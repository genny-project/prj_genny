package life.genny.rules;



global org.apache.logging.log4j.Logger log;

import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QBulkMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.rules.QRules;
import io.vertx.core.json.JsonObject;
import life.genny.qwandautils.JsonUtils;
import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.utils.VertxUtils;
import life.genny.utils.BaseEntityUtils;
import life.genny.models.GennyToken;
import org.kie.api.runtime.process.WorkflowProcessInstance;
import life.genny.models.Frame3;
import life.genny.models.Theme;
import life.genny.utils.FrameUtils2;
import life.genny.models.FramePosition;
import life.genny.qwanda.VisualControlType;


rule "FRM_INTERNSHIP_INDUSTRY_AND_OCCUPATION"
    ruleflow-group 'GenerateFrames'

    when
      not  Frame3(code == "FRM_INTERNSHIP_INDUSTRY_AND_OCCUPATION")
      serviceToken : GennyToken( code == "PER_SERVICE")
      FRM_DUMMY : Frame3 ( code == "FRM_DUMMY" )
    then
     System.out.println("   Generate FRM_INTERNSHIP_INDUSTRY_AND_OCCUPATION Rule  "+serviceToken.getUserCode());

 	 Frame3 frame = Frame3.builder("FRM_INTERNSHIP_INDUSTRY_AND_OCCUPATION")
                                .question("QUE_INDUSTRY_AND_OCCUPATION_GRP")
                                        .addTheme("THM_CARD_DEFAULT",serviceToken)
                                        .vcl(VisualControlType.VCL_LABEL)
                                        .end()
                                .end()
                                .build();
	frame.setRealm(serviceToken.getRealm());
						
	insert (frame);
	
	/* Process and save to cache */
	FrameUtils2.toMessage(frame, serviceToken);

end
