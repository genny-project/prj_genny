package life.genny.rules;
global org.apache.logging.log4j.Logger log;
import life.genny.qwanda.message.QBulkMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventMessage;
import life.genny.rules.QRules;
import io.vertx.core.json.JsonObject;
import java.util.List;
import java.util.ArrayList;
import life.genny.models.Frame3;
import life.genny.models.FramePosition;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.utils.VertxUtils;
import life.genny.utils.BaseEntityUtils;
import life.genny.models.GennyToken;
import org.kie.api.runtime.process.WorkflowProcessInstance;
import life.genny.models.FramePosition;
import life.genny.utils.FrameUtils2;
import life.genny.models.Frame3;
import life.genny.models.FramePosition;
import life.genny.models.GennyToken;
import life.genny.models.Theme;
import life.genny.models.ThemeAttributeType;
import life.genny.qwanda.VisualControlType;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwandautils.QwandaUtils;
import java.lang.reflect.Type;
import com.google.gson.reflect.TypeToken;
import life.genny.qwandautils.JsonUtils;
import life.genny.qwandautils.GennySettings;


rule "FRM_FORM"
    ruleflow-group 'GenerateFrames'

    when
      not  Frame3(code == "FRM_FORM")
      serviceToken : GennyToken( code == "PER_SERVICE")
		dummy : Frame3(code == "NEVER GONNA HAPPEN")
    then
        System.out.println("   Generate FRM_FORM  RULE TEST (PRJ_GENNY)" + serviceToken.getUserCode());
				String apiUrl = GennySettings.qwandaServiceUrl + "/service/forms";
				System.out.println("QwandaServiceUrl is "+apiUrl);
				String jsonFormCodes = null;
				List<String> questionCodes = new ArrayList<String>();

				if (!VertxUtils.cachedEnabled) {  /* Not running junit mode */
					jsonFormCodes = QwandaUtils.apiGet(apiUrl, serviceToken.getToken());
					System.out.println("jsonFormCodes=["+jsonFormCodes+"]");

					Type type = new TypeToken<List<String>>() {
					}.getType();
					questionCodes  = JsonUtils.fromJson(jsonFormCodes, type);
				} else {
					/* used for testing */
					questionCodes.add("QUE_JOURNAL_W1D1_GRP");
				}

				System.out.println("Array of all the Form Codes");
				System.out.println("Form Codes=" + questionCodes);

				for (String questionCode : questionCodes){
					if (questionCode.contains("JOURNAL_W")) {
						continue;
					}
					Frame3 frame2 = Frame3.builder("FRM_CONTENT_" +  questionCode)
                        .question(questionCode).end()
                        .build();

					frame2.setRealm(serviceToken.getRealm());

					Frame3 frame = Frame3.builder("FRM_" +  questionCode)
							.addFrame(frame2,FramePosition.CENTRE)
							.end()
							.build();

					frame.setRealm(serviceToken.getRealm());
					System.out.println(frame.getCode());
					FrameUtils2.toMessage(frame, serviceToken);
				}

end
