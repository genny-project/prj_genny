package life.genny.rules;


global org.apache.logging.log4j.Logger log;

import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QBulkMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.rules.QRules;
import io.vertx.core.json.JsonObject;
import life.genny.qwandautils.JsonUtils;
import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.utils.VertxUtils;
import life.genny.utils.BaseEntityUtils;
import life.genny.models.GennyToken;
import org.kie.api.runtime.process.WorkflowProcessInstance;
import life.genny.models.Frame3;
import life.genny.models.Theme;
import life.genny.utils.FrameUtils2;
import life.genny.models.FramePosition;
import life.genny.models.ThemePosition;

rule "FRM_TABLE_VIEW"
    ruleflow-group 'GenerateFrames'

    when
      not  Frame3(code == "FRM_TABLE_VIEW")
      serviceToken : GennyToken( code == "PER_SERVICE")
      /* FRM_TABLE_TITLE : Frame3 ( code == "FRM_TABLE_TITLE" )
      FRM_TABLE_WRAPPER : Frame3 ( code == "FRM_TABLE_WRAPPER" ) */
      
    then
        System.out.println("   Generates FRM_TABLE_VIEW Rule  "+serviceToken.getUserCode());

        Frame3 frame = Frame3.builder("FRM_TABLE_VIEW")
                      /* .addFrame(FRM_TABLE_TITLE, FramePosition.NORTH).end()
                      .addFrame(FRM_TABLE_WRAPPER, FramePosition.CENTRE).end() */
                      .build();
    
        frame.setRealm(serviceToken.getRealm());

        /* cache the frame */
			  VertxUtils.putObject(serviceToken.getRealm(), "", frame.getCode(), frame, serviceToken);
			
        insert (frame);
end