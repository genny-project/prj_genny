package life.genny.rules;


global org.apache.logging.log4j.Logger log;

import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QBulkMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.rules.QRules;
import io.vertx.core.json.JsonObject;
import life.genny.qwandautils.JsonUtils;
import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.utils.VertxUtils;
import life.genny.utils.BaseEntityUtils;
import life.genny.models.GennyToken;
import org.kie.api.runtime.process.WorkflowProcessInstance;
import life.genny.models.Frame3;
import life.genny.models.Theme;
import life.genny.utils.FrameUtils2;

rule "FRM_CONTENT_WRAPPER"
    ruleflow-group 'GenerateFrames'

    when
      not  Frame3(code == "FRM_CONTENT_WRAPPER")
      serviceToken : GennyToken( code == "PER_SERVICE")
	  FRM_CONTENT : Frame3(code == "FRM_CONTENT")
    then
        System.out.println("   Generate FRM_CONTENT_WRAPPER Rule  "+serviceToken.getUserCode());
                        
        Frame3 frame = Frame3.builder("FRM_CONTENT_WRAPPER")
        			  .addTheme("THM_SHAREABLE", serviceToken).end()
                      .addTheme("THM_PROJECT_COLOR_BACKGROUND", serviceToken).end()
                      .addTheme("THM_SCROLL_VERTICAL", ThemePosition.NORTH, serviceToken).end()
                      /*.addTheme("THM_PADDING_40", ThemePosition.NORTH, serviceToken).end()*/
                      .addFrame(FRM_CONTENT, FramePosition.NORTH).end()
                      .build();        				
        				
    
        frame.setRealm(serviceToken.getRealm());
        FrameUtils2.toMessage(frame, serviceToken);
        insert (frame);
       
			
end