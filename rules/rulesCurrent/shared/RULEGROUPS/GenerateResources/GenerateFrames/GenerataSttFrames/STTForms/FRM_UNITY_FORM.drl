package life.genny.rules;
global org.apache.logging.log4j.Logger log;
import life.genny.qwanda.message.QBulkMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventMessage;
import life.genny.qwandautils.QwandaMessage;
import life.genny.rules.QRules;
import io.vertx.core.json.JsonObject;
import java.util.List;
import java.util.ArrayList;
<<<<<<< Updated upstream
=======
import java.util.Arrays;
>>>>>>> Stashed changes
import life.genny.models.Frame3;
import life.genny.models.FramePosition;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.utils.VertxUtils;
import life.genny.utils.BaseEntityUtils;
import life.genny.models.GennyToken;
import org.kie.api.runtime.process.WorkflowProcessInstance;
import life.genny.models.FramePosition;
import life.genny.utils.FrameUtils2;
import life.genny.models.Frame3;
import life.genny.models.FramePosition;
import life.genny.models.GennyToken;
import life.genny.models.Theme;
import life.genny.models.ThemeAttributeType;
import life.genny.qwanda.VisualControlType;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwandautils.QwandaUtils;
import java.lang.reflect.Type;
import com.google.gson.reflect.TypeToken;
import life.genny.qwandautils.JsonUtils;
import life.genny.qwandautils.GennySettings;
<<<<<<< Updated upstream
=======
import life.genny.qwanda.ContextList;
import life.genny.qwanda.ContextType;
import life.genny.qwanda.Question;
import java.util.Map;
import java.util.Set;
>>>>>>> Stashed changes


rule "FRM_UNITY_FORM"
    ruleflow-group 'GenerateFrames'

    when
      not  Frame3(code == "FRM_UNITY_FORM")

      serviceToken : GennyToken( code == "PER_SERVICE")

    then

        System.out.println(" Generate  FRM_UNITY_FORM  RULE TEST (PRJ_STT)" + serviceToken.getUserCode());

				Validation validation = new Validation("VLD_ANYTHING", "Anything", ".*");
				Validation validationImage = new Validation("VLD_IMAGE_URL", "Text", ".*");
				Validation validationEvent = new Validation("VLD_ANYTHING", "Anything", ".*");

				List<Validation> validations = new ArrayList<>();
				validations.add(validation);

				ValidationList buttonValidationList = new ValidationList();
				buttonValidationList.setValidationList(validations);

				List<Validation> imageValidations = new ArrayList<>();
				imageValidations.add(validationImage);

				ValidationList imageValidationsList = new ValidationList();
				imageValidationsList.setValidationList(imageValidations);

				List<Validation> validationsEvent = new ArrayList<>();
				validations.add(validationEvent);

				ValidationList eventValidationList = new ValidationList();
				eventValidationList.setValidationList(validationsEvent);

				DataType buttonDataType = new DataType("DTT_BUTTON_EVENT", buttonValidationList, "buttonEvent", "");
				DataType imageDataType = new DataType("DTT_IMAGE",imageValidationsList,"Image", "");
				DataType eventDataType = new DataType("DTT_EVENT",eventValidationList,"Button", "");
				
				QwandaMessage askMsg= QuestionUtils.getQuestions("PER_USER1", "PER_USER1", "QUE_STT_S1_A_GRP", serviceToken.getToken());
				QwandaMessage askMsg2= QuestionUtils.getQuestions("PER_USER1", "PER_USER1", "QUE_STT_S1_B_GRP", serviceToken.getToken());
				QwandaMessage askMsg3= QuestionUtils.getQuestions("PER_USER1", "PER_USER1", "QUE_STT_S1_C_GRP", serviceToken.getToken());	
				
				List<Ask[]> asksList = new ArrayList<Ask[]>();
				asksList.add(askMsg.asks.getItems());
				asksList.add(askMsg2.asks.getItems());
				asksList.add(askMsg3.asks.getItems());

				/* Read Unity Context from cache */
				Context ctx = VertxUtils.getObject(serviceToken.getRealm(), "", "CTX_UNITY_CONTEXT", Context.class, serviceToken.getToken());

				/* Get the BaseEntity using the context's entity code */
				/* This is a bit of a hack since the entity is not currently being parsed properly */
				BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken);
				BaseEntity unityBe = beUtils.getBaseEntityByCode(ctx.getContextCode());
				ctx.setEntity(unityBe);
				System.out.println("CTX Entity: " + ctx.getEntity());

				/* create a ContextList with the Unity context */
				List<Context> ctxList = Arrays.asList(ctx);
				ContextList contextList = new ContextList(ctxList);
				
				for(Ask[] asks : asksList ){
				
					for (Ask ask : asks[0].getChildAsks()){
					
						String questionCode = ask.getQuestionCode();
						System.out.println("STT QUESTION  :: "+ questionCode);
						
						Frame3	frame2 = Frame3.builder("FRM_CONTENT_" +  questionCode)
							.addTheme("THM_FORM_ATTRIBUTES_GENNY", serviceToken).end()
							.question(questionCode)
								.addTheme("THM_PROJECT_COLOR_PRIMARY_VARIANT_LIGHT", serviceToken).dataType(buttonDataType).end()
								.addTheme("THM_FORM_BUTTONS", serviceToken).dataType(buttonDataType).vcl(VisualControlType.INPUT_WRAPPER).end()
								.addTheme("THM_FORM_BUTTONS_BEHAVIOUR", serviceToken).dataType(buttonDataType).end()
								.addTheme("THM_FORM_EVENT_BUTTONS_BEHAVIOUR", serviceToken).dataType(eventDataType).end()
								.addTheme("THM_FORM_BUTTONS_BORDER", serviceToken).dataType(buttonDataType).vcl(VisualControlType.INPUT_FIELD).end()
								.addTheme("THM_FORM_IMAGE_RESTRICTIONS", serviceToken).dataType(imageDataType).vcl(VisualControlType.VCL_INPUT).end()
								.addTheme("THM_FORM_IMAGE_RESTRICTIONS_DIMENSION", serviceToken).dataType(imageDataType).vcl(VisualControlType.INPUT_SELECTED).end()
								.addTheme("THM_FORM_VCL_INPUT_GENNY", serviceToken).vcl(VisualControlType.VCL_INPUT).weight(2.0).end()
								.addTheme("THM_FORM_VCL_LABEL_GENNY", serviceToken).vcl(VisualControlType.VCL_LABEL).end()
								.addTheme("THM_FORM_VCL_WRAPPER_GENNY", serviceToken).vcl(VisualControlType.VCL_WRAPPER).end()
								.addTheme("THM_FORM_VCL_ERROR_GENNY", serviceToken).vcl(VisualControlType.VCL_ERROR).end()
								.addTheme("THM_FORM_BEHAVIOUR_GENNY", serviceToken).weight(3.0).end()
								.addTheme("THM_FORM_GROUP_LABEL_GENNY", serviceToken).vcl(VisualControlType.GROUP_LABEL).weight(3.0).end()
								.addTheme("THM_BACKGROUND_NONE", serviceToken).weight(3.0).end()
								.addTheme("THM_FORM_GROUP_WRAPPER_GENNY", serviceToken).vcl(VisualControlType.GROUP_WRAPPER).weight(3.0).end()
								.addTheme("THM_PROJECT_COLOR_SURFACE", serviceToken).vcl(VisualControlType.INPUT_ITEM_WRAPPER).end()
								.addTheme("THM_PROFILE_IMAGE_FORM", serviceToken).dataType(imageDataType).vcl(VisualControlType.INPUT_SELECTED).end()
								.addTheme("THM_PROFILE_IMAGE_PLACEHOLDER_FORM", serviceToken).dataType(imageDataType).vcl(VisualControlType.INPUT_PLACEHOLDER).end()
								.addTheme("THM_PROFILE_IMAGE_FIELD_FORM", serviceToken).dataType(imageDataType).vcl(VisualControlType.INPUT_FIELD).end()
								.addTheme("THM_PROJECT_COLOR_PRIMARY_VARIANT_LIGHT", serviceToken).dataType(imageDataType).vcl(VisualControlType.INPUT_FIELD).end()
								.addTheme("THM_FORM_BUTTONS", serviceToken).dataType(imageDataType).vcl(VisualControlType.INPUT_FIELD).end()
								.addTheme("THM_FORM_BUTTONS_BORDER", serviceToken).dataType(imageDataType).vcl(VisualControlType.INPUT_FIELD).end()
								.addTheme("THM_IS_UNITY_GRP", serviceToken).end()
							.end().build();
								
						frame2.setRealm(serviceToken.getRealm());
	
						Frame3 frame = Frame3.builder("FRM_" +  questionCode)
								.addFrame(frame2,FramePosition.CENTRE)
								.end()
								.build();
						
						frame.setRealm(serviceToken.getRealm());
						System.out.println(frame.getCode());
						
						/* Create a context list Map */
						Map<String, ContextList> contextListMap = new HashMap<String, ContextList>();

						for (Ask childAsk : ask.getChildAsks()) {
							/* Create a map entry for each child ask that isn't a submit button */
							if (!childAsk.getQuestionCode().equals("QUE_SUBMIT")) {
								contextListMap.put(childAsk.getQuestionCode(), contextList);
								System.out.println(childAsk.getQuestionCode() + " : " + contextListMap.get(childAsk.getQuestionCode()));
							}
						}
						/* Cache the Context Map as Json */
						JsonObject ctxMapObj = new JsonObject(JsonUtils.toJson(contextListMap));
						/* VertxUtils.writeCachedJson(serviceToken.getRealm(), "CTX_MAP_" + ask.getQuestionCode(), ctxMapObj.toString(), serviceToken.getToken()); */
						/* To message for frames on demand */
						Set<QDataAskMessage> askSet = new HashSet<QDataAskMessage>();
						FrameUtils2.toMessage(frame, serviceToken, askSet, contextListMap);

					}
				}
end
