package life.genny.rules;


import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QBulkMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.rules.QRules;
import io.vertx.core.json.JsonObject;
import life.genny.qwandautils.JsonUtils;
import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.utils.VertxUtils;
import life.genny.utils.BaseEntityUtils;
import life.genny.models.GennyToken;
import org.kie.api.runtime.process.WorkflowProcessInstance;
import life.genny.models.Frame3;
import life.genny.models.Theme;
import life.genny.utils.FrameUtils2;
import life.genny.models.FramePosition;
import life.genny.qwanda.VisualControlType;
import life.genny.models.ThemePosition;

rule "FRM_TABLE_WRAPPER"
  ruleflow-group 'GenerateFrames'

  when
    not  Frame3(code == "FRM_TABLE_WRAPPER")
    serviceToken : GennyToken( code == "PER_SERVICE")
    FRM_TABLE_BODY : Frame3 ( code == "FRM_TABLE_BODY" )
    FRM_TABLE_FOOTER : Frame3 ( code == "FRM_TABLE_FOOTER" )
  then
    System.out.println(" Generate FRM_TABLE_WRAPPER Rule  "+serviceToken.getUserCode());

    Frame3 frame = Frame3.builder("FRM_TABLE_WRAPPER")
                  .addTheme("THM_SCROLL_HORIZONTAL",ThemePosition.CENTRE,serviceToken).end()
                  .addTheme("THM_BOX_SHADOW_XS",ThemePosition.WRAPPER,serviceToken).end()
                  .addTheme("THM_PROJECT_COLOR_SURFACE", serviceToken).end()
                  .addFrame(FRM_TABLE_BODY, FramePosition.CENTRE).end()
                  .addFrame(FRM_TABLE_FOOTER, FramePosition.SOUTH).end()
                  .build();

    frame.setRealm(serviceToken.getRealm());
    insert (frame);

    /* Process and save to cache */
    FrameUtils2.toMessage(frame, serviceToken);
end