package life.genny.rules;


global org.apache.logging.log4j.Logger log;

import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QBulkMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.rules.QRules;
import io.vertx.core.json.JsonObject;
import life.genny.qwandautils.JsonUtils;
import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.utils.VertxUtils;
import life.genny.utils.BaseEntityUtils;
import life.genny.models.GennyToken;
import org.kie.api.runtime.process.WorkflowProcessInstance;
import life.genny.models.Frame3;
import life.genny.models.Theme;
import life.genny.utils.FrameUtils2;
import life.genny.models.FramePosition;

rule "FRM_TABLE_BODY"
    ruleflow-group 'GenerateFrames'

    when
      not  Frame3(code == "FRM_TABLE_BODY")
      serviceToken : GennyToken( code == "PER_SERVICE")
      FRM_TABLE_CONTENT : Frame3 ( code == "FRM_TABLE_CONTENT" )
    then
        System.out.println("   Generate FRM_TABLE_BODY Rule  "+serviceToken.getUserCode());

        Frame3 frame = Frame3.builder("FRM_TABLE_BODY")
                      .addTheme("THM_SCROLL_VERTICAL",ThemePosition.CENTRE,serviceToken).end()
                      .addFrame(FRM_TABLE_CONTENT, FramePosition.CENTRE).end()
                      .build();

        frame.setRealm(serviceToken.getRealm());
        insert (frame);
        FrameUtils2.toMessage(frame, serviceToken);

end