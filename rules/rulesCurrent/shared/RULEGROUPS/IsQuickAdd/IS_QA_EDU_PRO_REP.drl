package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.utils.OutputParam;
import life.genny.qwandautils.KeycloakUtils;
import java.util.UUID;
import life.genny.qwandautils.GennySettings;

import java.security.SecureRandom;
import java.util.stream.Collectors;

import java.util.List;
import java.util.ArrayList;

rule "IS_QA_EDU_PRO_REP"
    ruleflow-group 'IsQuickAdd'
    no-loop true
    salience 1 
    when
	 	userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		output : OutputParam()
		baseEntityType : String(baseEntityType.equals("QA_EDU_PRO_REP"))
		newBe : BaseEntity()

	  
     then
 		System.out.println("IS_QA_EDU_PRO_REP: Rule fired" );
 		System.out.println("IS_QA_EDU_PRO_REP: newBe = " + newBe.getCode()); 
 		
		/*  Construct answer with Source, Target, Attribute Code, Value */
		BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken, userToken);

		List<Answer> answers = new ArrayList<>();
    
		answers.add(new Answer(userToken.getUserCode(), newBe.getCode() ,"PRI_IS_EDU_PRO_REP", "true"));
		answers.add(new Answer(userToken.getUserCode(), newBe.getCode() ,"PRI_STATUS", "PENDING"));

		/* Record who added them */
		BaseEntity userBe = beUtils.getBaseEntityByCode(userToken.getUserCode());
		if (userBe != null) {
			String addedBy = userBe.getValue("PRI_NAME", null);
			System.out.println("addedBy: " + addedBy);
			answers.add(new Answer(userToken.getCode(), newBe.getCode(), "PRI_ADDED_BY", addedBy));
		}
		
		newBe = beUtils.getBaseEntityByCode(newBe.getCode());
		
		String linkedEP = newBe.getValue("LNK_EDU_PROVIDER", null);
		System.out.println("linkedEP = " +linkedEP);
		if (linkedEP != null && !linkedEP.isEmpty()) {
				String assocEPCode = linkedEP.replace("\"", "").replace("[", "").replace("]", "");
				System.out.println("assocEPCode = " +assocEPCode);
				
				BaseEntity assocEPBe = beUtils.getBaseEntityByCode(assocEPCode);
				System.out.println("assocEPBe: " + assocEPBe);
				
				String assocEP = assocEPBe.getValue("PRI_NAME", null);
				System.out.println("assocEP: " + assocEP);
				
				if (assocEP != null) {
 						answers.add(new Answer(userToken.getUserCode(), newBe.getCode() ,"PRI_ASSOC_EP", assocEP));
						beUtils.createLink(assocEPBe.getCode(), newBe.getCode(), "LNK_CPY", "EDU_PRO_REP", 1.0);
 				}
		} else {
			/* CREATE EMPTY CPY FOR THE USER */
			System.out.println("NO EDU PRO SELECTED, CREATING ONE...");

			String uuid = UUID.randomUUID().toString().toUpperCase();
			String cpyCode = "CPY_"+uuid;
			beUtils.create(cpyCode, cpyCode);

			answers.add(new Answer(userToken.getUserCode(), newBe.getCode(), "LNK_EDU_PROVIDER", "[\""+cpyCode+"\"]"));
			answers.add(new Answer(userToken.getUserCode(), cpyCode, "PRI_PROFILE", "Incomplete"));
		}
		
		/* Set up in Keycloak */
		BaseEntity user = beUtils.getBaseEntityByCode(newBe.getCode());
		String userStr = newBe.getCode();
		String[] userSplit = userStr.split("_");
		String userCode = userSplit[1];
		System.out.println("User "+user+" with userCode = "+userCode);
		
		String email = "";
		/* NOTE: THIS IS ONLY A BACKUP PASSWORD */
		String password = "password1";
		String userId = "";
		
		String firstname = user.getValue("PRI_FIRSTNAME",null);
		if (firstname != null) {
			String lastname = user.getValue("PRI_LASTNAME",null);
			if (lastname != null) {
				email = user.getValue("PRI_EMAIL",null);
				if (email != null) {
					userId = KeycloakUtils.updateUser(userCode,serviceToken.getToken(), serviceToken.getRealm(), email, firstname, lastname,  email, null, "user", "users");
					userId = userId.toUpperCase();
					Answer keycloakId = new Answer(beUtils.getGennyToken().getUserCode(),newBe.getCode(),"PRI_UUID",userId);
					answers.add(keycloakId);
					System.out.println("Created User "+email+" in Keycloak with id = "+userId);

					/* Generate a random 15 char password */
					char[] allowed = "abcdefghijklmnopqrstuvwxyzABCDEFGJKLMNPRSTUVWXYZ0123456789^$?!@#%&".toCharArray();
					password = new SecureRandom().ints(15, 0, allowed.length).mapToObj(i -> String.valueOf(allowed[i])).collect(Collectors.joining());
					KeycloakUtils.setPassword(serviceToken.getToken(), serviceToken.getRealm(), userId, password, true);

				}
			}
		}
		
		String endPoint = GennySettings.projectUrl + "/v7/notes";
		
		String tag = "System";
		String userName = "System";
		String userImage = "";
		
		QwandaUtils.apiPostNote(endPoint, userToken.getUserCode(), newBe.getCode(), "Added as an Education Provider Rep", tag, userName, userImage, serviceToken.getToken());
		
		System.out.println("I just posted the note");
		System.out.println("Note endPoint: " +endPoint);
		System.out.println("Note userToken.getUserCode(): " +userToken.getUserCode());

		
		/* Send email to EPR? */
		
		System.out.println("ABOUT TO SEND THE EMAIL OR MAYBE NOT??");
		String rawSendEmail = "";
		
		if (user != null) {
				rawSendEmail = user.getValue("LNK_SEND_EMAIL",null);
				System.out.println("rawSendEmail: " +rawSendEmail);
		}
		
		if (rawSendEmail.equals("SEL_YES")) {
			String epEmail = newBe.getValue("PRI_EMAIL", null);
			System.out.println("epEmail = " +epEmail);					
			
			BaseEntity project = beUtils.getBaseEntityByCode("PRJ_"+ serviceToken.getRealm().toUpperCase());
			
			String token = KeycloakUtils.getImpersonatedToken(serviceToken.getKeycloakUrl(), serviceToken.getRealm(), project, epEmail, serviceToken.getToken());
			System.out.println("token: " + token);
			
	
			String url = GennySettings.projectUrl+"/home/UVVFX0ZBS0VfUEFSRU5U/UVVFX0ZJTklTSF9FRFVfUFJPX1JFUA==";
			System.out.println("url: " + url);
			
			
			url = url +"?token=" + token;
			System.out.println("url: " + url);
			

			String subject = "You have been registered on InternMatch";
			String template_id = "d-b569cb15814e4f34b5a57c760b9f38f8";
			
			System.out.println("subject: " + subject);
			System.out.println("template_id: " + template_id);
			System.out.println("email: " + epEmail);
			System.out.println("EduProRep: " + firstname);
			
			HashMap<String, String> templateData = new HashMap<String, String>();
	    	templateData.put("EduProRep", firstname);
			templateData.put("password", password);
	    	templateData.put("url", url);
				
			List<String> bccList = Arrays.asList("internmatch@outcomelife.com.au");
			
			EmailHelper.sendGrid(beUtils, epEmail, null, bccList, subject, template_id, templateData, false);		
						
 
			/* 
 			String mobile = "0433501177";
			String smsBody = "You have been recommended for an internship on Internmatch. Login to take a look!";
			SmsHelper smsHelper = new SmsHelper();
			smsHelper.deliverSmsMsg(mobile, smsBody);
			*/
		}
		
		
		
		output.setTypeOfResult("NONE");
  		output.setResultCode("NONE");

  		beUtils.saveAnswers(answers);
		
		retract(newBe)
	
end
