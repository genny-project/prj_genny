package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.utils.OutputParam;
import life.genny.qwandautils.KeycloakUtils;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.GennySettings;
import java.util.UUID;
import life.genny.notifications.EmailHelper;
import life.genny.qwanda.message.QScheduleMessage;
import life.genny.notifications.SmsHelper;
import java.util.Arrays;
import java.time.ZoneOffset;

import java.util.List;
import java.util.ArrayList;

rule "IS_QA_INTERN"
    ruleflow-group 'IsQuickAdd'
    no-loop true
    salience 1000
    when
	 	userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		output : OutputParam()
		baseEntityType : String(baseEntityType.equals("QA_INTERN"))
		newBe : BaseEntity()
		beUtils: BaseEntityUtils()
	  
     then
 		System.out.println("IS_QA_INTERN: Rule fired" );
 		System.out.println("IS_QA_INTERN: newBe = " + newBe.getCode()); 
 		
 	/*  Construct answer with Source, Target, Attribute Code, Value */
 		
 		beUtils.saveAnswer(new Answer(userToken.getUserCode(), newBe.getCode() ,"PRI_IS_INTERN", "true"));
 		beUtils.saveAnswer(new Answer(userToken.getUserCode(), newBe.getCode() ,"PRI_DISABLED", "false"));
 		beUtils.saveAnswer(new Answer(userToken.getUserCode(), newBe.getCode() ,"PRI_STATUS_COLOR", "#5cb85c"));
 		beUtils.saveAnswer(new Answer(userToken.getUserCode(), newBe.getCode() ,"PRI_PROFILE", "Incomplete"));

		
		
		
		/* Set up in Keycloak */
		
		
		BaseEntity user = beUtils.getBaseEntityByCode(newBe.getCode());
		String userStr = newBe.getCode();
		String[] userSplit = userStr.split("_");
		String userCode = userSplit[1];
		System.out.println("User "+user+" with userCode = "+userCode);
		
		String userId = "";
		String email = "stephenie.pulis-cassar@outcomelife.com.au";
		
		String firstname = user.getValue("PRI_FIRSTNAME",null);
		if (firstname != null) {
			String lastname = user.getValue("PRI_LASTNAME",null);
			if (lastname != null) {
				email = user.getValue("PRI_EMAIL",null);
				if (email != null) {
					/*String userPassword = UUID.randomUUID().toString().substring(0,10);*/
					/* TODO HACK */
					if (true) {
						String userPassword = "password1";
						userId = KeycloakUtils.updateUser(userCode,serviceToken.getToken(), serviceToken.getRealm(), email, firstname, lastname,  email, userPassword,"user", "users");
						userId = userId.toUpperCase();
						Answer keycloakId = new Answer(beUtils.getGennyToken().getUserCode(),newBe.getCode(),"PRI_UUID",userId);
						beUtils.saveAnswer(keycloakId);
						System.out.println("Created Quick Add User "+email+" in Keycloak with id = "+userId + " and password:" +userPassword);
					} else {
					     System.out.println("KEYCLOAK QUICK ADD USER CREATION DISABLED IN RULE IS_INTERN");
					}
				}
			}
		}

		


		String endPoint = GennySettings.projectUrl + "/v7/notes";
		/*String endPoint = "https://internmatch-cyrus.gada.io/v7/notes";*/
		
		String tag = "ni";
		
		QwandaUtils.apiPostNote(endPoint, userToken.getUserCode(), tag, userToken.getUserCode(), "Added an Intern: " + firstname, serviceToken.getToken());
		
		System.out.println("I just posted the note");
		System.out.println("Note endPoint: " +endPoint);
		System.out.println("Note userToken.getUserCode(): " +userToken.getUserCode());


		/* Send email to Intern? */
		
		System.out.println("ABOUT TO SEND THE EMAIL OR MAYBE NOT??");
		
		String rawSendEmail = user.getValue("LNK_SEND_EMAIL",null);
		System.out.println("rawSendEmail: " +rawSendEmail);
		
		if (rawSendEmail != null) {
		
				if (rawSendEmail.equals("SEL_YES")) { 
						BaseEntity project = beUtils.getBaseEntityByCode("PRJ_"+ serviceToken.getRealm().toUpperCase());
		
						String token = KeycloakUtils.getImpersonatedToken(serviceToken.getKeycloakUrl(), serviceToken.getRealm(), project, userCode, serviceToken.getToken());
						System.out.println("token: " + token);
					
						String url = GennySettings.projectUrl+"/home/UVVFX0ZBS0VfUEFSRU5U/UVVFX0ZJTklTSF9JTlRFUk4=";
						System.out.println("url: " + url);
						
						url = url +"?token=" + token;
						System.out.println("url: " + url);
						
						String user_email = "c.pyke85@gmail.com";
						String subject = "You have been registered on InternMatch";
						String template_id = "d-94f647d38d7745a1b925300df2208279";
						
						System.out.println("user_email: " + user_email);
						System.out.println("email: " + email);
						System.out.println("subject: " + subject);
						System.out.println("template_id: " + template_id);		
						
						HashMap<String, String> templateData = new HashMap<String, String>();
						templateData.put("intern", firstname);
						templateData.put("url", url);

						List<String> bccList = Arrays.asList("internmatch@outcomelife.com.au");
					
						EmailHelper.sendGrid(beUtils, user_email, null, bccList, subject, template_id, templateData);
						System.out.println("SUCCESS - Email Sent!!");
 
						/* 
 						String mobile = "0433501177";
						String smsBody = "You have been recommended for an internship on Internmatch. Login to take a look!";
						SmsHelper smsHelper = new SmsHelper();
						smsHelper.deliverSmsMsg(mobile, smsBody);
						*/
		
						} else {
							System.out.println("rawSendEmail is not Yes: " + rawSendEmail);
						}
		} else {
			System.out.println("ERROR: null rawSendEmail");
		}
		
		
		
		System.out.println("################## START Shleemy ##################");
		
		String shleemyEndPoint = GennySettings.projectUrl+"/api/schedule";
		System.out.println("shleemyEndPoint: "+shleemyEndPoint);
	
		QEventMessage msgQAInternOrange = null;
		QEventMessage msgQAInternRed = null;

		
		System.out.println("Setting schedule");
		
		msgQAInternOrange = new QEventMessage("TEST_EVT", "SCHEDULE_INTERN_COMPLETE_PROFILE_48HR");
		msgQAInternOrange.getData().setTargetCode(newBe.getCode());
		msgQAInternOrange.setToken(userToken.getToken());
		String[] rxList = new String[2];
		rxList[0] = "SUPERUSER";
		rxList[1] = userToken.getUserCode();
		msgQAInternOrange.setRecipientCodeArray(rxList);
		
		msgQAInternRed = new QEventMessage("TEST_EVT", "SCHEDULE_INTERN_COMPLETE_PROFILE_96HR");
		msgQAInternRed.getData().setTargetCode(newBe.getCode());
		msgQAInternRed.setToken(userToken.getToken());
		msgQAInternRed.setRecipientCodeArray(rxList);
		
		
		
		/* Set trigger times */
		DateTimeFormatter dtf = DateTimeFormatter.ofPattern("hh:mm:ss a, E, dd MMM yyyy");
    
   	 	LocalDateTime now = LocalDateTime.now(ZoneOffset.UTC);
    	String prettyNow = dtf.format(now);
    	System.out.println("The current date and time is ~ " + prettyNow);
		
		LocalDateTime orangeTestTimer = now.plusSeconds(90);
    	LocalDateTime orangeTimer = now.plusHours(48);
		String prettyOrange = dtf.format(orangeTimer);
		System.out.println("The Orange timer is set for ~ " + prettyOrange);
		
		String orangeCode = newBe.getCode() + "_INTERN_COMPLETE_PROFILE_48HR";
		System.out.println("orangeCode " + orangeCode);
		
		LocalDateTime redTestTimer = now.plusSeconds(180);
		LocalDateTime redTimer = now.plusHours(96);
		String prettyRed = dtf.format(redTimer);
		System.out.println("The Red timer is set for ~ " + prettyRed);
		
		String redCode = newBe.getCode() + "_INTERN_COMPLETE_PROFILE_96HR";
		System.out.println("redCode " + redCode);
		
		
		System.out.println("Orange schedule set: " +msgQAInternOrange);
		System.out.println("Red schedule set: " +msgQAInternRed);


		System.out.println("################## Schedule Orange Shleemy ##################");
		
		QScheduleMessage scheduleOrange = new QScheduleMessage(orangeCode, JsonUtils.toJson(msgQAInternOrange), userToken.getUserCode(), "project", orangeTestTimer, userToken.getRealm());
		System.out.println("msgQAInternOrange" + scheduleOrange);
		
		try {
			QwandaUtils.apiPostEntity(shleemyEndPoint, JsonUtils.toJson(scheduleOrange), userToken.getToken());
		} catch (IOException e) {
			e.printStackTrace();
		}		
		
		System.out.println("################## Schedule Red Shleemy ##################");
		
		QScheduleMessage scheduleRed = new QScheduleMessage(redCode, JsonUtils.toJson(msgQAInternRed), userToken.getUserCode(), "project", redTestTimer, userToken.getRealm());
		System.out.println("msgQAInternRed" + scheduleRed);
		
		try {
			QwandaUtils.apiPostEntity(shleemyEndPoint, JsonUtils.toJson(scheduleRed), userToken.getToken());
		} catch (IOException e) {
			e.printStackTrace();
		}			
		
		System.out.println("################## END Shleemy ##################");
		
		
		/* Send Note about reminders */		
		QwandaUtils.apiPostNote(endPoint, userToken.getUserCode(), tag, userToken.getUserCode(), "Scheduled two reminders for : " +prettyOrange + " and " + prettyRed , serviceToken.getToken());
		
		System.out.println("I just posted the note");
		System.out.println("Note endPoint: " +endPoint);
		System.out.println("Note userToken.getUserCode(): " +userToken.getUserCode());
		
		
		
		output.setTypeOfResult("NONE");
		output.setResultCode("NONE");  /* don't display anything new */
		
		retract(newBe)
	
end
