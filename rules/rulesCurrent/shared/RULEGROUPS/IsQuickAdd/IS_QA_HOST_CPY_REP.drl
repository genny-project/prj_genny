package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.utils.OutputParam;
import life.genny.qwandautils.KeycloakUtils;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.GennySettings;
import java.util.UUID;
import life.genny.notifications.EmailHelper;

import java.security.SecureRandom;
import java.util.stream.Collectors;

import java.util.List;
import java.util.ArrayList;

rule "IS_QA_HOST_CPY_REP"
    ruleflow-group 'IsQuickAdd'
    no-loop true
    salience 1000
    when
	 	userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		output : OutputParam()
		baseEntityType : String(baseEntityType.equals("QA_HOST_CPY_REP"))
		newBe : BaseEntity()
	  
     then
 		System.out.println("IS_QA_HOST_CPY_REP: Rule fired" );
 		System.out.println("IS_QA_HOST_CPY_REP: newBe = " + newBe.getCode()); 
 		
 	/*  Construct answer with Source, Target, Attribute Code, Value */
 		BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken, userToken);

 		List<Answer> answers = new ArrayList<>();
 		
 		answers.add(new Answer(userToken.getUserCode(), newBe.getCode() ,"PRI_IS_HOST_CPY_REP", "true"));
 		answers.add(new Answer(userToken.getUserCode(), newBe.getCode() ,"PRI_STATUS_COLOR", "#FF9100"));
		answers.add(new Answer(userToken.getUserCode(), newBe.getCode(), "PRI_PROFILE", "Incomplete"));
		answers.add(new Answer(userToken.getUserCode(), newBe.getCode() ,"PRI_STATUS", "ACTIVE"));

		/* Record who added them */
		BaseEntity userBe = beUtils.getBaseEntityByCode(userToken.getUserCode());
		if (userBe != null) {
			String addedBy = userBe.getValue("PRI_NAME", null);
			System.out.println("addedBy: " + addedBy);
			answers.add(new Answer(userToken.getCode(), newBe.getCode(), "PRI_ADDED_BY", addedBy));
		}
		
		Boolean isHostCpyRep = (Boolean) beUtils.getBaseEntityValue(userToken.getUserCode(), "PRI_IS_HOST_CPY_REP");

		BaseEntity user = beUtils.getBaseEntityByCode(newBe.getCode());
		
		String linkedHC = user.getValue("LNK_HOST_COMPANY", null);
		System.out.println("linkedHC = " + linkedHC);
		BaseEntity companyBe = null;
		if (linkedHC != null && !linkedHC.isEmpty()) {
			System.out.println("LNK_HOST_COMPANY present!");
		} else {
			if (isHostCpyRep != null && isHostCpyRep) {
				/* If HostCpyRep adding another HostCpyRep, then set same company */
				String userHostCpy = beUtils.getBaseEntityValueAsString(userToken.getUserCode(), "LNK_HOST_COMPANY");
				answers.add(new Answer(userToken.getUserCode(), newBe.getCode(), "LNK_HOST_COMPANY", userHostCpy));

				companyBe = beUtils.getBaseEntityByCode(beUtils.cleanUpAttributeValue(userHostCpy));
			} else {
				/* CREATE EMPTY CPY FOR THE USER */
				System.out.println("NO HOST COMPANY SELECTED, CREATING ONE...");

				String uuid = UUID.randomUUID().toString().toUpperCase();
				String cpyCode = "CPY_"+uuid;
				beUtils.create(cpyCode, cpyCode);

				answers.add(new Answer(userToken.getUserCode(), newBe.getCode(), "LNK_HOST_COMPANY", "[\""+cpyCode+"\"]"));
				answers.add(new Answer(userToken.getUserCode(), cpyCode, "PRI_IS_HOST_CPY", true));
				answers.add(new Answer(userToken.getUserCode(), cpyCode, "PRI_PROFILE", "Incomplete"));
				
				companyBe = beUtils.getBaseEntityByCode(cpyCode);
			}

			/* Save the CPY name to the rep BE */
			if(companyBe != null) {
				/* get the name attribute of the company */
				String hcName = companyBe.getValue("PRI_NAME", null);	
				System.out.println("hcName  :: " + hcName);	

				/* save the company's name as PRI_ASSOC_HC attribute for person baseentity */
				if(hcName != null){
					Answer answerHC = new Answer(userToken.getUserCode(), newBe.getCode(), "PRI_ASSOC_HC", hcName);
					answers.add(answerHC);
					VertxUtils.sendToFrontEnd(userToken, answerHC);

				} else {
					System.out.println("hcName is NULL");
				}
			} else {
				System.out.println("companyBe is NULL");
			}
		}
		
		
		/* Set up in Keycloak */
		
		String userId = "";
		
		String userStr = newBe.getCode();
		String[] userSplit = userStr.split("_");
		String userCode = userSplit[1];
		System.out.println("User "+user+" with userCode = "+userCode);
		
		String email = "stephenie.pulis-cassar@outcomelife.com.au";
		/* NOTE: THIS IS ONLY A BACKUP PASSWORD */
		String password = "password1";
		
		String firstname = user.getValue("PRI_FIRSTNAME",null);
		if (firstname != null) {
			String lastname = user.getValue("PRI_LASTNAME",null);
			if (lastname != null) {
				email = user.getValue("PRI_EMAIL",null);
				if (email != null) {
					/* TODO HACK */
					if (true) {
						userId = KeycloakUtils.updateUser(userCode,serviceToken.getToken(), serviceToken.getRealm(), email, firstname, lastname,  email, null, "user", "users");
						userId = userId.toUpperCase();
						Answer keycloakId = new Answer(beUtils.getGennyToken().getUserCode(),newBe.getCode(),"PRI_UUID",userId);
						answers.add(keycloakId);
						System.out.println("Created User "+email+" in Keycloak with id = "+userId);

						/* Generate a random 15 char password */
						char[] allowed = "abcdefghijklmnopqrstuvwxyzABCDEFGJKLMNPRSTUVWXYZ0123456789^$?!@#%&".toCharArray();
						password = new SecureRandom().ints(15, 0, allowed.length).mapToObj(i -> String.valueOf(allowed[i])).collect(Collectors.joining());
						KeycloakUtils.setPassword(serviceToken.getToken(), serviceToken.getRealm(), userId, password, true);

						/* TEMPORARY UNTIL PRODUCTION REACHES 9.2.0 */
						if (GennySettings.projectUrl.contains("dev")) {
							/* Send them an email with their password */
							String url = GennySettings.projectUrl + "/home";
							HashMap<String, String> templateData = new HashMap<String, String>();
							templateData.put("name", firstname);
							templateData.put("password", password);
							templateData.put("url", url);

							EmailHelper.sendGrid(beUtils, email, "", "d-100adae110bb46eb999cd8b48666cad0", templateData, true);
						}

					} else {
					     System.out.println("KEYCLOAK QUICK ADD USER CREATION DISABLED IN RULE IS_INTERN");
					}
				}
			}
		}
		


		String endPoint = GennySettings.projectUrl + "/v7/notes";
		/*String endPoint = "https://internmatch-cyrus.gada.io/v7/notes";*/
		
		String tag = "System";
		String userName = "System";
		String userImage = "";
		
		QwandaUtils.apiPostNote(endPoint, userToken.getUserCode(), newBe.getCode(), "Added as a Host Company Rep", tag, userName, userImage, serviceToken.getToken());
		
		System.out.println("I just posted the note");
		System.out.println("Note endPoint: " +endPoint);
		System.out.println("Note userToken.getUserCode(): " +userToken.getUserCode());


		/* Send email to HCR? */
		
		String superEmail = "spc@outcome.life ";
		System.out.println("superEmail: " +superEmail);
		
		String allEmails = "";
		
		if (user != null) {
				allEmails = user.getValue("LNK_ALL_EMAILS",null);
				System.out.println("allEmails: " +allEmails);

				Boolean allEmailsBool = false;
				if (allEmails != null && allEmails.contains("SEL_YES")) {
					allEmailsBool = true;
				}
				answers.add(new Answer(userToken.getUserCode(), user.getCode(), "PRI_EMAIL_FLAG", allEmailsBool));
		}
		
		if (allEmails.equals("SEL_YES")) {
		
				BaseEntity project = beUtils.getBaseEntityByCode("PRJ_"+ serviceToken.getRealm().toUpperCase());
				
				String token = KeycloakUtils.getImpersonatedToken(serviceToken.getKeycloakUrl(), serviceToken.getRealm(), project, superEmail, serviceToken.getToken());
				System.out.println("token: " + token);
				
				String url = GennySettings.projectUrl+"/home/UVVFX0ZBS0VfUEFSRU5U/UVVFX0ZJTklTSF9IT1NUX0NQWV9SRVA=";
				System.out.println("url: " + url);
				
				url = url +"?token=" + token;
				System.out.println("url: " + url);
		
				superEmail = user.getValue("PRI_EMAIL", null);
				System.out.println("superEmail: " +superEmail);
				
				String subject = "You have been registered on InternMatch";
				String template_id = "d-6c43211b9b934cb6abaceea171f32e09";
		
				System.out.println("email: " + superEmail);
				System.out.println("subject: " + subject);
				System.out.println("template_id: " + template_id);
				
				
				HashMap<String, String> templateData = new HashMap<String, String>();
		    	templateData.put("HostCompanyRep", firstname);
				templateData.put("password", password);
		    	templateData.put("url", url);
		
		
				List<String> bccList = Arrays.asList("internmatch@outcomelife.com.au");
				
				EmailHelper.sendGrid(beUtils, superEmail, null, bccList, subject, template_id, templateData, false);
		}
		
		
		
		output.setTypeOfResult("NONE");
		output.setResultCode("NONE");  /* dont display anything new */

		beUtils.saveAnswers(answers);
		
		retract(newBe)
	
end
