package life.genny.rules;
import java.util.ArrayList;
import life.genny.qwandautils.JsonUtils;
import life.genny.utils.OutputParam;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.message.QEventMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import io.vertx.core.json.JsonObject;
import life.genny.utils.OutputParam;
import life.genny.utils.BucketUtils;
import life.genny.models.ThemePosition;

rule "BUCKET_TAB_ITEM_CLICK_EVENT"
    ruleflow-group 'EventProcessing'
		salience 2
    no-loop
    when
    	
		$message : QEventMessage(data.code matches "QUE_TAB.*" && 
							(	data.parentCode == "QUE_TAB_BUCKET_VIEW" || 
								data.parentCode == "QUE_TAB_DETAIL_VIEW" || 
								data.parentCode == "QUE_TAB_TABLE_VIEW") )	
		userToken : GennyToken (code != "PER_SERVICE" )
		output : OutputParam( )
    then
	
		System.out.println("Processing Answer/Data : " + $message );
		System.out.println("Parent code :  " + $message.getData().getParentCode());
		
		switch($message.getData().getCode()){

			case "QUE_TAB_BUCKET_VIEW" : 
		
				JsonObject tokenObj = VertxUtils.readCachedJson(userToken.getRealm(),"ASK_FRM_BUCKET_VIEW",userToken.getToken());
		
				QDataAskMessage[] askSet = JsonUtils.fromJson(tokenObj.getString("value"), QDataAskMessage[].class);
				
				System.out.println("Sending Asks");
				for(QDataAskMessage ask : askSet) {
					
					ask.setToken(userToken.getToken());
					ask.setReplace(false);	
					String askJson = JsonUtils.toJson(ask);
					VertxUtils.writeMsg("webcmds",askJson );
				}
				output.setFormCode("FRM_BUCKET_VIEW","FRM_TAB_CONTENT"); 

				Theme THM_JUSTIFY_CONTENT_FLEX_START = Theme.builder("THM_JUSTIFY_CONTENT_FLEX_START")
														.addAttribute().justifyContent("flex-start").end()
														.build();

				Frame3 FRM_BUCKET_CONTENT = Frame3.builder("FRM_BUCKET_CONTENT")
										.question("QUE_BUCKET_CONTENT_GRP").end()
											.addTheme(THM_JUSTIFY_CONTENT_FLEX_START, ThemePosition.CENTRE).end()
										.build();

				BaseEntityUtils beUtils = new BaseEntityUtils(userToken);
				BucketUtils bucketUtils = new BucketUtils(beUtils);

				bucketUtils.sendCards(FRM_BUCKET_CONTENT, userToken);
				break;

			case "QUE_TAB_DETAIL_VIEW" : 
				output.setFormCode("FRM_DETAIL_VIEW_CONTENT","FRM_TAB_CONTENT"); 
				break;

			case "QUE_TAB_TABLE_VIEW" : output.setFormCode("FRM_TABLE_VIEW","FRM_TAB_CONTENT"); break;

			default : output.setFormCode("FRM_QUE_DASHBOARD_VIEW","FRM_CONTENT");	break;
		}
		
		
		retract( $message);
end
