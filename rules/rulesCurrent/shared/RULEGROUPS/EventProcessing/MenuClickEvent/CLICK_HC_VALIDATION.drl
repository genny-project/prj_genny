package life.genny.rules;
import io.vertx.core.json.JsonObject;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventBtnClickMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import life.genny.utils.OutputParam;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.utils.BaseEntityUtils;
import life.genny.utils.QuestionUtils;
import life.genny.qwandautils.JsonUtils;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

rule "CLICK_HC_VALIDATION"
    ruleflow-group 'EventProcessing'
		salience 1000
    no-loop
    when
		/*$message : QEventMessage(data.code == "ACT_PRI_EVENT_HC_VALIDATION" || data.code == "ACT_PRI_EVENT_OHS")*/
		$message : QEventMessage(data.code == "ACT_PRI_EVENT_HC_VALIDATION")
		userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		output : OutputParam()
		ruleDetails : RuleDetails()

    then
		System.out.println("Processing CLICK HC VALIDATION : " + $message );

		
		System.out.println(ruleDetails+" "+drools.getRule().getName()+" Processing : " + $message );
		
		BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken);
		
		
		String uuid = UUID.randomUUID().toString();
		String newCode = "DOC_"+uuid;
		newCode = newCode.toUpperCase();
		System.out.println("HC Val: newCode = " + newCode);
		
		BaseEntity newBe = beUtils.create(newCode, newCode);

		System.out.println("HC Val: newBe = " + newBe);
		System.out.println(">>>>>>>>>>>> " + newBe.getName() + " <<<<<<<<<<<<");
		
		output.setTargetCode(newCode);
		SessionFacts facts = new SessionFacts(serviceToken, userToken, output.getTargetCode());
		
		
		String user = userToken.getUserCode();
		System.out.println("user: " + user);
		output.setAskSourceCode(user);
		
		if(user != null) {
				BaseEntity HCRBe = beUtils.getBaseEntityByCode(user);
				System.out.println("HCRBe = " + HCRBe);
				
				if(HCRBe != null) {
						String hcCode = HCRBe.getValue("LNK_HOST_COMPANY",null);
						System.out.println("hcCode: " + hcCode);
						
						hcCode = hcCode.replace("\"", "").replace("[", "").replace("]", "");
						System.out.println("hcCode = " +hcCode);	
							
						if(hcCode != null) { 
								BaseEntity HCBe = beUtils.getBaseEntityByCode(hcCode);
								System.out.println("HCBe = " + HCBe);
								
								if(HCBe != null) { 
										Answer answer = new Answer(userToken.getUserCode(), HCBe.getCode(), "DOC_HC_VAL_CODE", newCode);
 										beUtils.saveAnswer(answer);	
 								
								} else {
									System.out.println("ERROR: Null HCRBe");
								}			
						} else {
							System.out.println("ERROR: Null HCRBe");
						}
				} else {
					System.out.println("ERROR: Null HCRBe");
				}
		} else {
			System.out.println("ERROR: Null userToken.getUserCode()");
		}
		
		
	
		String workflowSignalCode = "HC_VAL";

		output.setTypeOfResult("SIGNAL");
		output.setResultCode("START_"+workflowSignalCode);

	
		System.out.println("START SIGNAL: " +workflowSignalCode);
		System.out.println("STARTING MULTI FORM WITH: " +output);
	
		retract($message);
	end
