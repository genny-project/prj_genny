package life.genny.rules;

import life.genny.qwanda.message.QEventMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import io.vertx.core.json.JsonObject;
import life.genny.utils.OutputParam;
import org.apache.commons.lang3.StringUtils;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.utils.VertxUtils;
import life.genny.qwandautils.QwandaUtils;

rule "NOTE_EVENT"
	ruleflow-group 'EventProcessing'
	salience 2
	no-loop
	when
		$message : QEventMessage(data.code matches "ACT_PRI_EVENT_ACCESS_NOTES")
		userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		output : OutputParam( )
	then
		System.out.println(drools.getRule().getName() + " triggered");
		
		BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken, userToken);

		String targetCode = $message.getData().getTargetCode();
		System.out.println("targetCode :: " + targetCode);

		if(targetCode != null){
			try {
				String url = "https://internmatch-dev.gada.io/v7/notes/"+targetCode+"?tags=''&pageStart=0&pageSize=1000000000";
				System.out.println("url :: " + url);
				String notes = QwandaUtils.sendGET(url, serviceToken.getToken());
				System.out.println("notes :: " + notes);
				
				if(notes != null){
					VertxUtils.writeMsg("webcmds", notes);
				}
			}catch (Exception e) {
				System.out.println("Exception :: " + e);
			}
		}

		retract( $message);
	end
