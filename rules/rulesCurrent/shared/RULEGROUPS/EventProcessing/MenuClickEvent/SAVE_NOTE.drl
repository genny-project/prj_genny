package life.genny.rules;

import life.genny.qwanda.message.QEventMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import io.vertx.core.json.JsonObject;
import life.genny.utils.OutputParam;
import org.apache.commons.lang3.StringUtils;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.utils.VertxUtils;


rule "SAVE_NOTE"
    ruleflow-group 'EventProcessing'
		salience 2
    no-loop
    when
		$message : QEventMessage(data.code matches "ACT_PRI_EVENT_SAVE_NOTE")
		userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		output : OutputParam( )
    then

		System.out.println("SAVE_NOTE fired");
		
		BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken, userToken);

		String sourceCode = beUtils.getGennyToken().getUserCode();
		System.out.println("sourceCode :: " + sourceCode);
		
		String targetCode = $message.getData().getTargetCode();
		System.out.println("targetCode :: " + targetCode);
		
		String content = $message.getData().getContent();
		System.out.println("content :: " + content);
			
		String tags = "BD";
		
		/*String endPoint = GennySettings.projectUrl + "/v7/notes";*/
		String endPoint = "https://internmatch-dev.gada.io/v7/notes";
		System.out.println("endPoint :: " + endPoint);
		
		QwandaUtils.apiPostNote(endPoint, sourceCode, tags, targetCode, content, serviceToken.getToken());
		System.out.println("Note saved against " + targetCode + " with content: " + content);
		
		try {				
				/* to fetch all notes with size limit */
				String url = endPoint + "/"+targetCode + "?tags=&pageIndex=0&pageSize=100";
				
				/* to fetch all notes with tags */
				/* String url = endPoint + "/"+targetCode + "?tags=''&pageIndex=0&pageSize=100"; */
				System.out.println("url :: " + url);

				String notes = QwandaUtils.sendGET(url, serviceToken.getToken());
				System.out.println("notes :: " + notes);

				/*{"msg_type":"DATA_MSG","option":"EXEC","targetCodes":["APP_327132BE-56B0-44EB-A6C4-40E153155D08", "PER_"],"data_type":"Note","delete":false,"replace":false,"items":[],"status":"READ","total":0,"token":"jt8PUTuGgDRzSxcIYx3MrlQ"}
				*/
				if(notes != null){
					JsonObject json = new JsonObject(notes);
					json.put("token", userToken.getToken());

					System.out.println("json :: " + json.toString());
					VertxUtils.writeMsg("webcmds", json.toString());
				}
			}catch (Exception e) {
				System.out.println("Exception :: " + e);
			}	
		
		
		BaseEntity targetBE = beUtils.getBaseEntityByCode(targetCode);
		
		String assocHC = targetBE.getValue("LNK_HOST_COMPANY", null);
		assocHC = assocHC.replace("\"", "").replace("[", "").replace("]", "");
		System.out.println("assocHC: " +assocHC);
		
		String asoscInternship = targetBE.getValue("LNK_INTERNSHIP", null);
		asoscInternship = asoscInternship.replace("\"", "").replace("[", "").replace("]", "");
		System.out.println("asoscInternship: " +asoscInternship);
		
		String asoscSuper = targetBE.getValue("LNK_INTERN_SUPERVISOR", null);
		asoscSuper = asoscSuper.replace("\"", "").replace("[", "").replace("]", "");
		System.out.println("asoscSuper: " +asoscSuper);
		
		String asoscIntern = targetBE.getValue("PRI_INTERN_CODE", null);
		System.out.println("asoscIntern: " +asoscIntern);
		
		
		
		String name = targetBE.getValue("PRI_NAME", null);
		System.out.println("name: " +name);
		
		/* send cmd msg */
		QCmdMessage msg = new QCmdMessage("TOAST", "INFO");
		msg.setMessage("Note saved against " + name + " with content: " + content);
		msg.setToken(beUtils.getGennyToken().getToken());
		msg.setSend(true);
		VertxUtils.writeMsg("webcmds", msg);	


		retract($message);
	end
