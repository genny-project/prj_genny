package life.genny.rules;

import life.genny.qwanda.message.QEventMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import io.vertx.core.json.JsonObject;
import life.genny.utils.OutputParam;
import org.apache.commons.lang3.StringUtils;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.utils.VertxUtils;


rule "SAVE_NOTE"
    ruleflow-group 'EventProcessing'
		salience 2
    no-loop
    when
		$message : QEventMessage(data.code matches "ACT_PRI_EVENT_SAVE_NOTE")
		userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		output : OutputParam( )
    then

		System.out.println("SAVE_NOTE fired");
		
		BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken, userToken);

		String sourceCode = beUtils.getGennyToken().getUserCode();
		System.out.println("sourceCode :: " + sourceCode);
		
		String targetCode = $message.getData().getTargetCode();
		System.out.println("targetCode :: " + targetCode);
	
		/*
		JSON
		{content: "This student is great!", tags: "Business Development, Admin"}
		
		String content = jsonObject.getString("content");
		String tags = jsonObject.getString("tags");
		*/
		
		String content = "This student is great!";
		String tags = "Business Developmen";
		
		String endPoint = GennySettings.projectUrl + "/v7/notes";
		
		QwandaUtils.apiPostNote(endPoint, sourceCode, tags, targetCode, content, serviceToken.getToken());
		System.out.println("Note saved against " + targetCode + " with content: " + content);	
		
		
		/* send cmd msg */
		QCmdMessage msg = new QCmdMessage("TOAST", "INFO");
		msg.setMessage("Note saved against " + targetCode + " with content: " + content);
		msg.setToken(beUtils.getGennyToken().getToken());
		msg.setSend(true);
		VertxUtils.writeMsg("webcmds", msg);	


		retract($message);
	end
