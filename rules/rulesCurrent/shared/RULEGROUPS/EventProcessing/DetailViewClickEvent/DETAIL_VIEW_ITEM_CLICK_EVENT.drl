package life.genny.rules;
import io.vertx.core.json.JsonObject;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventBtnClickMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import life.genny.utils.OutputParam;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.utils.BaseEntityUtils;
import life.genny.utils.QuestionUtils;
import life.genny.qwandautils.JsonUtils;
import java.util.ArrayList;
import java.util.List;

rule "DETAIL_VIEW_ITEM_CLICK_EVENT"
    ruleflow-group 'EventProcessing'
		salience 2
    no-loop
    when
		$message : QEventMessage(data.code matches "QUE_.*" && (data.parentCode == "QUE_DETAIL_VIEW_GRP"))
		userToken : GennyToken (code != "PER_SERVICE" )
		output : OutputParam( )
    then
	
		System.out.println("Processing USER EVENT : " + $message );
		
		System.out.println("Parent code :  " + $message.getData().getParentCode());
		
		String code = ($message.getData().getCode()).replace("QUE_", "FRM_");
	
		BaseEntity person = new BaseEntityUtils(userToken).getBaseEntityByCode("PER_USER1");
		BaseEntity internship = new BaseEntityUtils(userToken).getBaseEntityByCode("BEG_INTERNSHIP_ONE");
		BaseEntity application = new BaseEntityUtils(userToken).getBaseEntityByCode("APP_APPLICATION_THREE");
		
		JsonObject tokenObj = VertxUtils.readCachedJson(userToken.getRealm(),"ASK_"+code,userToken.getToken());
		
		QDataAskMessage[] askSet = JsonUtils.fromJson(tokenObj.getString("value"), QDataAskMessage[].class);
		
		System.out.println("Sending Asks");
		for(QDataAskMessage ask : askSet) {
			
			ask.setToken(userToken.getToken());
			ask.setReplace(false);	
			String askJson = JsonUtils.toJson(ask);
			VertxUtils.writeMsg("webcmds",askJson );
		}
		
		System.out.println("Ask Send");
		
		QDataBaseEntityMessage msgg = new QDataBaseEntityMessage(person);
		msgg.setToken(userToken.getToken());
		msgg.setReplace(true);
		VertxUtils.writeMsg("webcmds", JsonUtils.toJson(msgg));	
		
		msgg = new QDataBaseEntityMessage(internship);
		msgg.setToken(userToken.getToken());
		msgg.setReplace(true);
		VertxUtils.writeMsg("webcmds", JsonUtils.toJson(msgg));	
		
		msgg = new QDataBaseEntityMessage(application);
		msgg.setToken(userToken.getToken());
		msgg.setReplace(true);
		VertxUtils.writeMsg("webcmds", JsonUtils.toJson(msgg));	
		
		output.setFormCode( code ,"FRM_DETAIL_VIEW_CONTENT");
		retract( $message);
	end
