package life.genny.rules;

import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QEventDropdownMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import io.vertx.core.json.JsonObject;
import life.genny.qwanda.utils.OutputParam;
import org.apache.commons.lang3.StringUtils;

rule "FILTER_EVENT"
    ruleflow-group 'EventProcessing'
		salience 200
    no-loop
    when
		message : QEventMessage( 
					data.targetCode matches "SBE_.*" &&
					( 
						data.code matches "QUE_PRI_.*" || 
						data.code matches "QUE_LNK_.*" || 
						data.code matches "QUE_AND_.*" 
					) 
				)
		userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		output : OutputParam( )
		beUtils : BaseEntityUtils()
    then
		System.out.println(drools.getRule().getName()+" Processing : " + message );

		String targetCode = message.getData().getTargetCode();
		System.out.println("targetCode = " + targetCode);
		String code = message.getData().getCode();
		System.out.println("code = " + code);

		String attributeCode = code.substring("QUE_".length());
		System.out.println("attributeCode = " + attributeCode);

		SearchEntity searchBE = VertxUtils.getObject(beUtils.getGennyToken().getRealm(), "", targetCode, SearchEntity.class,
				beUtils.getGennyToken());

		searchBE.removeAttribute(attributeCode);

		System.out.println("Performing search...");

		long totalTime = TableUtils.searchTable(beUtils, searchBE, true);
		System.out.println("total took " + (totalTime) + " ms"); 

		TableUtils.sendFilterQuestions(beUtils, searchBE);
			
		retract(message);
end
