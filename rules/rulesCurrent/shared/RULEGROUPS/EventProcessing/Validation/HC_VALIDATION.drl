package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.utils.OutputParam;
import life.genny.qwandautils.GennySettings;
import life.genny.qwandautils.PDFHelper;
import life.genny.qwanda.message.QCmdMessage;

import java.util.List;
import java.util.ArrayList;

rule "HC_VALIDATION"
    ruleflow-group 'Validation'
    no-loop true
    salience 1000 
    when
	 	userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		output : OutputParam()
		baseEntityType : String(baseEntityType.equals("VALID"))
		hcBe : BaseEntity()

	  
     then
 		System.out.println("HC_VALIDATION: Rule fired" );
 		System.out.println("HC_VALIDATION: hcBe = " + hcBe.getCode()); 
 		
 	    /* Construct answer with Source, Target, Attribute Code, Value */
 		BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken, userToken);
 		
 		/* Create Host company validation Document */
 		
 		/* send Loading TOAST msg */
 		
					QCmdMessage toastMsg = new QCmdMessage("TOAST", "INFO");
					toastMsg.setMessage("Please wait while we prepare your Document!");
					toastMsg.setToken(beUtils.getGennyToken().getToken());
					toastMsg.setSend(true);
					VertxUtils.writeMsg("webcmds", toastMsg);
					
					System.out.println("Generating Document from the system");
					
					String docCode = hcBe.getValue("DOC_HCV_CODE",null);
					System.out.println("docCode   ::   " + docCode);
					if(docCode != null){
				
						BaseEntity docBe = beUtils.getBaseEntityByCode(docCode);
						System.out.println("docBe   ::   " + docBe);
						
						if(docBe == null){
							System.out.println("docBe is null ");
							return;
						}
						
						String template = "https://raw.githubusercontent.com/genny-project/layouts/master/internmatch-new/document_templates/HostCompanyValidation.html";
					
						BaseEntity project = beUtils.getBaseEntityByCode( "PRJ_" + serviceToken.getRealm().toUpperCase());
						if(project != null){
							
							/* get the template url from project if possible */
							template = project.getValue("PRI_HC_VALIDATION_URL", template);
		
						}
						
						for (EntityAttribute ea : docBe.getBaseEntityAttributes()) {
							System.out.println("1" + ea);
							if (ea.getAttributeCode().startsWith("LNK_")) {
								System.out.println("2");
								String beCode = ea.getValueString();
								if(beCode != null){
								System.out.println("3" + beCode);
									beCode = beUtils.cleanUpAttributeValue(beCode);
									BaseEntity linkedBe = beUtils.getBaseEntityByCode(beCode);
									String name = linkedBe.getValue("PRI_NAME", null);
									if (name != null) {
										ea.setValueString(name);
									}
								}
							}
						}
						HashMap<String, Object> contextMap = new HashMap<String, Object>();
						contextMap.put("HCVDoc", docBe);
						contextMap.put("HC", hcBe);
						String pdfUrl = PDFHelper.getDownloadablePdfLinkForHtml(template, contextMap);
						System.out.println("PDF url :: " + pdfUrl);
						beUtils.saveAnswer(new Answer(userToken.getUserCode(), hcBe.getCode() ,"PRI_HC_VALIDATION_DOC_URL", pdfUrl));
					}else{
						System.out.println("docCode is not present in companyBe");
 					}
		
		/* Check Validation Status of HC */
		
		String validationStatus = hcBe.getValue("PRI_VALIDATION", null);
		if (validationStatus != null) {
		
				if (validationStatus.equals("Incomplete") || validationStatus.equals("HCS") || validationStatus.equals("OHS")) {
						System.out.println("ERROR: PRI_VALIDATION is not ready to be changed: " +validationStatus); 
				}
				
				if (validationStatus.equals("Ready")) {
						beUtils.saveAnswer(new Answer(userToken.getUserCode(), hcBe.getCode() ,"PRI_VALIDATION", "Validated"));
						System.out.println("PRI_VALIDATION set to: Validated"); 	
				}
		} else {
			System.out.println("ERROR: Null validationStatus");
		}
		
	
end
