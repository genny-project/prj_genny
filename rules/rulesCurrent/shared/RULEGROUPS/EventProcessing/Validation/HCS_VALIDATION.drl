package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.utils.OutputParam;
import life.genny.qwandautils.GennySettings;

import java.util.List;
import java.util.ArrayList;

rule "HCS_VALIDATION"
    ruleflow-group 'Validation'
    no-loop true
    salience 1000 
    when
	 	userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		output : OutputParam()
		baseEntityType : String(baseEntityType.equals("HCS"))
		hcBe : BaseEntity()

	  
     then
 		System.out.println("HCS_VALIDATION: Rule fired" );
 		System.out.println("HCS_VALIDATION: hcBe = " + hcBe.getCode()); 
 		
 	    /* Construct answer with Source, Target, Attribute Code, Value */
 		BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken, userToken);
 		
		
		/* Check Validation Status of HC */
		
		String validationStatus = hcBe.getValue("PRI_VALIDATION", "Incomplete");
		if (validationStatus != null) {
		
				
				if (validationStatus.equals("Incomplete")) {
						beUtils.saveAnswer(new Answer(userToken.getUserCode(), hcBe.getCode() ,"PRI_VALIDATION", "HCS"));
						System.out.println("PRI_VALIDATION set to : HCS"); 
				}
				
				if (validationStatus.equals("OHS")) {
						beUtils.saveAnswer(new Answer(userToken.getUserCode(), hcBe.getCode() ,"PRI_VALIDATION", "Ready"));	
						System.out.println("PRI_VALIDATION set to : Ready"); 	
						
						/* SEND EMAIL TO AGENT */	
						
						String urlParentCode = "QUE_DASHBOARD_VIEW";
						String urlCode = "QUE_DASHBOARD_VIEW";
						
						urlParentCode = new String(Base64.getEncoder().encode(urlParentCode.getBytes()));
						urlCode = new String(Base64.getEncoder().encode(urlCode.getBytes()));
	
						String url = GennySettings.projectUrl+"/home/"+urlParentCode+"/"+urlCode;
						System.out.println("url: " + url);

						String agentEmail = "internmatch@outcomelife.com.au";

						String subject = "Host Company ready to be Vaildated";
						String template_id = "d-95472fd28165474f80346ff9a1912a4b";
/*
						System.out.println("-------- AGENT EMAIL DATA --------");
						System.out.println("subject: " +subject);
						System.out.println("template_id: " +template_id);
						System.out.println("email: " +agentEmail);
						System.out.println("internshipName: " +title);
						System.out.println("hostCompanyName: " +assocHC);
						System.out.println("intern: " +name);
						System.out.println("----------------------------");
*/						
						HashMap<String, String> templateData = new HashMap<String, String>();
/*			
						templateData.put("hostCompanyName", assocHC);
						templateData.put("intern", name);
						templateData.put("internshipName", title);
*/
						templateData.put("url", url);
			
						EmailHelper.sendGrid(beUtils, agentEmail, null, null, subject, template_id, templateData);
				} 
		} else {
			System.out.println("ERROR: Null validationStatus");
		}
		
		QDataBaseEntityMessage msg = new QDataBaseEntityMessage(hcBe);
		msg.setToken(userToken.getToken());
		msg.setReplace(true);
		VertxUtils.writeMsg("webcmds", JsonUtils.toJson(msg));
		
		
	
end
