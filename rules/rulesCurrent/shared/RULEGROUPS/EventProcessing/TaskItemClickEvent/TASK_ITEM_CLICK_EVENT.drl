package life.genny.rules;

import life.genny.qwanda.message.QEventBtnClickMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import io.vertx.core.json.JsonObject;
import life.genny.qwanda.utils.OutputParam;
import life.genny.utils.TaskUtils;


rule "TASK_ITEM_CLICK_EVENT"
    ruleflow-group 'EventProcessing'
		salience 9999
    no-loop
    when
		$message : QEventMessage(data.code matches "QUE_TASK-.*" && (data.parentCode == "QUE_DRAFTS_GRP"))
		userToken : GennyToken (code != "PER_SERVICE" )
		output : OutputParam( )
		ruleDetails : RuleDetails()
    then
		System.out.println(ruleDetails+" "+drools.getRule().getName()+" Processing : " + $message );
		System.out.println("TASK_ITEM_CLICK_EVENT: Parent code :  " + $message.getData().getParentCode());
		

		String code = $message.getData().getCode();
		System.out.println("TASK_ITEM_CLICK_EVENT: code="+code);
		/* remove the preceeding nn taskId text */
		String taskIdStr = code.substring("QUE_TASK-".length());
		System.out.println("TASK_ITEM_CLICK_EVENT: TaskIdStr="+taskIdStr);
		Long taskId = Long.parseLong(taskIdStr);
		System.out.println("TASK_ITEM_CLICK_EVENT: TaskId="+taskId);
		output = TaskUtils.getTaskOutputParam(userToken,taskId);
		System.out.println("TASK_ITEM_CLICK_EVENT: output="+output);
		
		/* save this to cache */
		String json = JsonUtils.toJson(output);
		System.out.println("TASK_ITEM_CLICK_EVENT: outputJson="+json);
		VertxUtils.writeCachedJson(userToken.getRealm(),"OUTPUT:"+code,json ,userToken);
		
		retract( $message);
		update(output); 
		
		
	end
