package life.genny.rules;

import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QEventDropdownMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import io.vertx.core.json.JsonObject;
import life.genny.qwanda.utils.OutputParam;
import life.genny.qwanda.rule.RuleDetails;
import org.apache.commons.lang3.StringUtils;

rule "DROPDOWN_EVENT_OLD"
    ruleflow-group 'EventProcessing'
		salience 200
    no-loop
    when
		message : QEventDropdownMessage(((data.code matches "PRI_.*" || data.code matches "LNK_.*") &&  event_type == "DD"  ))
		userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		output : OutputParam( )
		ruleDetails : RuleDetails()
		beUtils : BaseEntityUtils()
    then
		System.out.println(ruleDetails+" "+drools.getRule().getName()+" Processing : " + message );

		String attributeCode = message.getData().getCode();
		QEventDropdownMessage msg = (QEventDropdownMessage)message;
		
		/* if attribute has no upstream dependencies then we can generate the dropdown list and send it straight back */
		DropdownUtils dropdown = new DropdownUtils(serviceToken);
	/*	dropdown.setNewSearch("Dropdown", "Dropdown Items")
											.addFilter("PRI_IS_HOST_CPY_REP", true)
											.addFilter("LNK_HOST_COMPANY", SearchEntity.StringFilter.EQUAL, hostCompanyCode)
											.setPageStart(msg.getPageIndex())
											.setPageSize(msg.getPageSize()); */

		/* Send the dropdown options */
	/*	dropdown.sendSearchResults("GRP_HOST_COMPANY_REP_SELECTION", "LNK_ITEM", "ITEM", true, false, userToken, false); */
	
			
		retract( message);
end
