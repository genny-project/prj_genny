package life.genny.rules;

import life.genny.qwanda.message.QEventMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import io.vertx.core.json.JsonObject;
import life.genny.utils.OutputParam;
import org.apache.commons.lang3.StringUtils;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.utils.VertxUtils;


rule "SAVE_NOTE"
    ruleflow-group 'EventProcessing'
		salience 2
    no-loop
    when
		$message : QEventMessage(data.code matches "ACT_PRI_EVENT_SAVE_NOTE")
		userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		output : OutputParam( )
    then

		System.out.println("SAVE_NOTE fired");
		
		BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken, userToken);

		String sourceCode = beUtils.getGennyToken().getUserCode();
		System.out.println("sourceCode :: " + sourceCode);
		
		String targetCode = $message.getData().getTargetCode();
		System.out.println("targetCode :: " + targetCode);
		
		String parentCode = $message.getData().parentCode();
		System.out.println("parentCode :: " + parentCode);
		
		String content = $message.getData().getContent();
		System.out.println("content :: " + content);
			
		String tags = "BD";
		
		BaseEntity targetBE = beUtils.getBaseEntityByCode(targetCode);
		
		/*String endPoint = GennySettings.projectUrl + "/v7/notes";*/
		String endPoint = "https://internmatch-dev.gada.io/v7/notes";
		System.out.println("endPoint :: " + endPoint);
		
		QwandaUtils.apiPostNote(endPoint, sourceCode, tags, targetCode, content, serviceToken.getToken());
		System.out.println("Note saved against " + targetCode + " with content: " + content);
		

		String name = targetBE.getValue("PRI_NAME", null);
		System.out.println("name: " +name);
		
		/* send cmd msg */
		QCmdMessage msg = new QCmdMessage("TOAST", "INFO");
		msg.setMessage("Note saved against " + name + " with content: " + content);
		msg.setToken(beUtils.getGennyToken().getToken());
		msg.setSend(true);
		VertxUtils.writeMsg("webcmds", msg);	
		
		
		/* Send QEventMessage to refresh page */
		String[] parent = parentCode.split("_");
		System.out.println("parent[1]: " +parent[]);
		
		String code = "ACT_PRI_EVENT_ACCESS_NOTES_" + parent[1];
		System.out.println("code: " +code);
		
		QEventMessage refreshNotes = new QEventMessage("SAVE_NOTE", code);
		refreshNotes.setToken(serviceToken.getToken());
		VertxUtils.writeMsg("events", code);
		
		System.out.println("Sent QEventMessage!! - Should be another Note Rule firing...");

		retract($message);
	end
