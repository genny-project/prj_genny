package life.genny.rules;

import life.genny.qwanda.message.QEventMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import io.vertx.core.json.JsonObject;
import life.genny.utils.OutputParam;
import org.apache.commons.lang3.StringUtils;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.utils.VertxUtils;


rule "SAVE_NOTE"
    ruleflow-group 'EventProcessing'
		salience 2
    no-loop
    when
		$message : QEventMessage(data.code matches "ACT_PRI_EVENT_SAVE_NOTE")
		userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		output : OutputParam( )
    then

		System.out.println("SAVE_NOTE fired");
		
		BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken, userToken);

		String sourceCode = beUtils.getGennyToken().getUserCode();
		System.out.println("sourceCode :: " + sourceCode);
		
		String targetCode = $message.getData().getTargetCode();
		System.out.println("targetCode :: " + targetCode);
		
		String parentCode = $message.getData().getParentCode();
		System.out.println("parentCode :: " + parentCode);
		
		String content = $message.getData().getContent();
		System.out.println("content :: " + content);
			
		String tags = "BD";
		
		BaseEntity targetBE = beUtils.getBaseEntityByCode(targetCode);
		
		/*String endPoint = GennySettings.projectUrl + "/v7/notes";*/
		String endPoint = "https://internmatch-dev.gada.io/v7/notes";
		System.out.println("endPoint :: " + endPoint);
		
		QwandaUtils.apiPostNote(endPoint, sourceCode, tags, targetCode, content, serviceToken.getToken());
		System.out.println("Note saved against " + targetCode + " with content: " + content);
		

		String name = targetBE.getValue("PRI_NAME", null);
		System.out.println("name: " +name);
		
		/* send cmd msg */
		QCmdMessage msg = new QCmdMessage("TOAST", "INFO");
		msg.setMessage("Note saved against " + name + " with content: " + content);
		msg.setToken(beUtils.getGennyToken().getToken());
		msg.setSend(true);
		VertxUtils.writeMsg("webcmds", msg);	
		
		
		/* Send QEventMessage to refresh page */
		String[] parent = parentCode.split("_");
		String type = parent[1];
		System.out.println("parent[1]: " +parent[1]);
		
		String code = "ACT_PRI_EVENT_ACCESS_NOTES_" + parent[1].toUpperCase();
		System.out.println("code: " +code);
		
		retract($message);
		/*
		List<String> targetList = new ArrayList<String>();
		targetList.add(targetCode);*/
		
		QEventMessage refreshNotes = new QEventMessage("SAVE_NOTE", code);
		refreshNotes.setTargetCode(targetCode);
		
		/*VertxUtils.writeMsg("events", code);
		VertxUtils.sendEvent(code, sourceCode, targetCode, serviceToken);*/
		
		System.out.println("Sent QEventMessage!! - Should be another Note Rule firing...");
		String key = "Application";
		insert(key);
		insert(targetBE);
		/*insert(refreshNotes);*/
		
		/*
		output.setTypeOfResult("SIGNAL");
		output.setResultCode("START_SAVE_NOTE");
		output.setAskSourceCode(sourceCode);	
		output.setTargetCode(targetCode);
		output.setSuitCase(type);
		
		
		System.out.println("**************************************************");
		System.out.println("TypeOfResult: "  + output.getTypeOfResult());
		System.out.println("ResultCode: "    + output.getResultCode());
		System.out.println("AskSourceCode: " + output.getAskSourceCode());
		System.out.println("TargetCode: "    + output.getTargetCode());
		System.out.println("SuitCase: "      + output.getSuitCase());
		System.out.println("**************************************************");
		*/
		
		/*
		drools.setFocus("SendSummary");
		*/
		
		/*
		output.setTypeOfResult("SIGNAL");
		output.setSuitCase(rulegroup);
		output.setTargetCode(code);
		output.setResultCode("code");
		*/
		
		
	end
