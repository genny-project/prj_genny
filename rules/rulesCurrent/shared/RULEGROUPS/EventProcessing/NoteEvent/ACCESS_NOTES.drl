package life.genny.rules;

import life.genny.qwanda.message.QEventMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import io.vertx.core.json.JsonObject;
import life.genny.qwanda.utils.OutputParam;
import org.apache.commons.lang3.StringUtils;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.utils.VertxUtils;
import life.genny.qwandautils.QwandaUtils;

rule "ACCESS_NOTES"
	ruleflow-group 'AccessNote'
	salience 2
	no-loop
	when
		targetBe : BaseEntity()
		key : String(key.equals("INTERN") || key.equals("INTERNSHIP") || key.equals("HC") || key.equals("HCR"))
		
		userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		output : OutputParam()
		ruleDetails : RuleDetails()
	then
		System.out.println(drools.getRule().getName() + " triggered");
		
		BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken, userToken);
	
		targetBe = beUtils.getBaseEntityByCode(targetBe.getCode());

		if (targetBe != null){
	
				/* Application Details */
				String targetCode = targetBe.getCode();
				System.out.println("targetCode: " +targetCode);
	
				String targetName = targetBe.getValue("PRI_NAME", null);
				System.out.println("targetName: " +targetName);
				
				String targetImage = targetBe.getValue("PRI_IMAGE_URL", null);
				System.out.println("targetImage: " +targetImage);
					
					
				/* Get all notes for the Target */
				String endPoint = GennySettings.projectUrl + "/v7/notes";
				System.out.println("endPoint :: " + endPoint);

				String url = endPoint + "/"+targetCode + "?tags=&pageIndex=0&pageSize=100";
				System.out.println("url :: " + url);

				String notes = QwandaUtils.sendGET(url, serviceToken);
				System.out.println("notes :: " + notes);
				
				
				/* Send Tab order to FE */
				String codes = "[\"" + targetCode + "\"]";
				System.out.println("codes :: " + codes);
	
				QCmdMessage notesMsg = new QCmdMessage("NOTES", "TABS");
				notesMsg.setCode(codes);
				notesMsg.setToken(beUtils.getGennyToken().getToken());
				notesMsg.setSend(true);
				VertxUtils.writeMsg("webcmds", notesMsg);


				/* Search for Applications */
				String linkedApps = targetBe.getValue("LNK_APPLICATIONS", null);
				System.out.println("linkedApps: " +linkedApps);
				
				if (linkedApps != null) {
					if (!linkedApps.equals("[]")) {
						System.out.println("linkedApps: " +linkedApps);									
						linkedApps = linkedApps.replace("\"", "").replace("[", "").replace("]", "");	
						System.out.println("linkedApps: " +linkedApps);
						
						String[] splitApps = linkedApps.split(",");
						int length = splitApps.length;
						System.out.println("length: " +length);	
						
						BaseEntity[] beCodez = new BaseEntity[length];
						BaseEntity appBe = null;
						
						for (int i = 0; i < length; i++) {
							appBe = beUtils.getBaseEntityByCode(splitApps[i]);
							beCodez[i] = appBe;
							System.out.println("beCodez: " +beCodez[i]);
						}
						
						QDataBaseEntityMessage msgMatches = new QDataBaseEntityMessage(beCodez);
						msgMatches.setToken(userToken.getToken());
						msgMatches.setReplace(true);
						VertxUtils.writeMsg("webcmds", JsonUtils.toJson(msgMatches));
					} else {
					System.out.println("ERROR: linkedApps []");
					} 
				} else {
					System.out.println("ERROR: linkedApps is Null");
				} 
				/*String[] tagList = {"Business Development", "Placement", "Outcome Life", "Miscellaneous"};*/
				
				JsonObject json = new JsonObject(notes);
				if(notes != null){
					json.put("token", userToken.getToken());
					json.put("code", targetCode);
					json.put("title", targetName);
					json.put("image", targetImage);
					
					if (linkedApps != null) {
						JsonObject jsonApplication = new JsonObject();
						json.put("linkedApps", linkedApps);
					}

					VertxUtils.writeMsg("webcmds", json.toString());
					System.out.println("Successfully navigated Access Notes");
				} else {
					System.out.println("ERROR: Notes failed to send");
			
					QCmdMessage msg = new QCmdMessage("TOAST", "ERROR");
					msg.setMessage("ERROR: Notes failed to send");
					msg.setToken(beUtils.getGennyToken().getToken());
					msg.setSend(true);
					VertxUtils.writeMsg("webcmds", msg);
				}	
		}

		retract(targetBe);
		retract(key);
	end


