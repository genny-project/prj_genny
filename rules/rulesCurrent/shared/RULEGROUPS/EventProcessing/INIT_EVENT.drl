package life.genny.rules;
import life.genny.qwanda.message.QEventMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import io.vertx.core.json.JsonObject;
import life.genny.utils.OutputParam;
import life.genny.qwanda.rule.RuleDetails;
import java.util.HashMap;
import java.util.Map;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;

rule "INIT_EVENT"
	ruleflow-group 'EventProcessing'
	no-loop
	salience 10000
	when
		$message : QEventMessage()
		userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken( code == "PER_SERVICE")
		beUtils : BaseEntityUtils()
		output : OutputParam( )
	
	then
		System.out.println(drools.getRule().getName() + " triggered");
		
		QCmdMessage msg = new QCmdMessage("DISPLAY", "NONE");
		msg.setToken(beUtils.getGennyToken().getToken());
		msg.setSend(true);  		

		String code = $message.getData().getCode();
		

		if(code != null && !code.isEmpty()){

			if(code.equals("QUE_SUBMIT")){
				String parentCode = $message.getData().getParentCode();
				System.out.println("parentCode  ::  " + parentCode);

				if(parentCode != null && !parentCode.isEmpty()){
					code = parentCode;
				}
			}
			
			Map<String, String> displayCodes = VertxUtils.getMap(serviceToken.getRealm(), "", "DISPLAY_CODES");

			if(displayCodes != null && !displayCodes.isEmpty()){
				
				if(displayCodes.containsKey(code)){
			
					String displayType = displayCodes.get(code);
					
					if(displayType != null && !displayType.isEmpty()){
						
						System.out.println("DISPLAY_TYPE   ::   " + displayType);
						msg.setCode(displayType);

					}
				}
			}
		} else {
		
			System.out.println("WARNING ====> code in INIT_EVENT is NULL ::  " + code);
		}
		
		/* Send cmd message */
		VertxUtils.writeMsg("webcmds",msg);
end