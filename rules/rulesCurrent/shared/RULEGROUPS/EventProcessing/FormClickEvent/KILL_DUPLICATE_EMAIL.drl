package life.genny.rules;

import life.genny.qwanda.message.QEventMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import io.vertx.core.json.JsonObject;
import life.genny.utils.OutputParam;
import life.genny.qwanda.rule.RuleDetails;
import org.apache.commons.lang3.StringUtils;

rule "KILL_DUPLICATE_EMAIL"
    ruleflow-group 'EventProcessing'
		salience 2
    no-loop
    when
		$message : QEventMessage(data.code matches "kill" && data.parentCode matches "DUPLICATE_EMAILS" )
		userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		output : OutputParam( )
    then
		System.out.println("MERGE_DUPLICATE_EMAIL fired");
		
		BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken, userToken);
		
		String sourceCode = $message.getData().getRootCode();
		System.out.println("sourceCode :: " + sourceCode);
		
		String targetCode = $message.getData().getTargetCode();
		System.out.println("targetCode :: " + targetCode);
		
		String rootCode = $message.getData().getRootCode();
		System.out.println("rootCode :: " + rootCode);
		
		/*
		code: kill
		parentCode: DUPLICATE_EMAILS
		sourceCode: PER_
		targetCode: PER_
		rootCode: c.pyke@gmail.com
		*/
		
		String type = beUtils.whoAreYou(targetCode);
		System.out.println("type :: " + type);
		
		/* Kill the target email*/
		beUtils.saveAnswer(new Answer(userToken.getUserCode(), targetCode, type, false));
		beUtils.saveAnswer(new Answer(userToken.getUserCode(), targetCode, "PRI_IS_DELETED", true));
		beUtils.saveAnswer(new Answer(userToken.getUserCode(), targetCode, "PRI_EMAIL", "dummy@gada.io"));
		
		
		/* Send same email back as an answer to the source */
		Answer answer = new Answer(userToken.getUserCode(), sourceCode, "PRI_EMAIL", rootCode);
		beUtils.saveAnswer(answer);		
		VertxUtils.sendToFrontEnd(userToken, answer);
		
		retract($message);
end
