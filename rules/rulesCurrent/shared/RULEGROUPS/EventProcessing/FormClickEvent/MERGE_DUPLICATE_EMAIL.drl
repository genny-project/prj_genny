package life.genny.rules;

import life.genny.qwanda.message.QEventMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import io.vertx.core.json.JsonObject;
import life.genny.utils.OutputParam;
import life.genny.qwanda.rule.RuleDetails;
import org.apache.commons.lang3.StringUtils;
import life.genny.qwandautils.KeycloakUtils;

rule "MERGE_DUPLICATE_EMAIL"
    ruleflow-group 'EventProcessing'
		salience 2
    no-loop
    when
		$message : QEventMessage(data.code matches "merge" && data.parentCode matches "DUPLICATE_EMAILS" )
			userToken : GennyToken (code != "PER_SERVICE" )
			serviceToken : GennyToken( code == "PER_SERVICE")
			output : OutputParam( )
			ruleDetails : RuleDetails()
			beUtils : BaseEntityUtils()
    then
					System.out.println(ruleDetails+" "+drools.getRule().getName()+" Processing : " + $message );

		
		/*
		CPY_1
		Name: ABC
		ABN: 111
		Profile pic: ajhasdjha
		
		
		CPY_2
		Name: ABC
		ABN: 111
		Address: Vic 
		Num interns: 6
		
		
		CPY_2
		Name: ABC
		ABN: 111
		Address: Vic 
		Num interns: 6
		Profile pic: ajhasdjha
		*/
		
		String userCode = userToken.getUserCode();
		System.out.println(ruleDetails+" "+drools.getRule().getName()+" user: " + userCode);
		
		String code = $message.getData().getCode();
		System.out.println(ruleDetails+" "+drools.getRule().getName()+" code: "+code);
		
		String sourceCode = $message.getData().getSourceCode();
		System.out.println(ruleDetails+" "+drools.getRule().getName()+" sourceCode :: " + sourceCode);

		String targetCode = $message.getData().getTargetCode();
		System.out.println(ruleDetails+" "+drools.getRule().getName()+" targetCode :: " + targetCode);
		
		/*
		code: merge
		parentCode: DUPLICATE_EMAILS
		sourceCode: PER_
		targetCode: PER_
		*/
		
		BaseEntity sourceBe = beUtils.getBaseEntityByCode(sourceCode);
		BaseEntity targetBe = beUtils.getBaseEntityByCode(targetCode);
		System.out.println(ruleDetails+" "+drools.getRule().getName()+" sourceBe :: " + sourceBe);
		System.out.println(ruleDetails+" "+drools.getRule().getName()+" targetBe :: " + targetBe);
		
		if (sourceBe != null && targetBe != null) {
		
			System.out.println(ruleDetails+" "+drools.getRule().getName()+" Duplicating attributes");
			beUtils.duplicateAttributes(sourceBe, targetBe);
			
			targetBe = beUtils.getBaseEntityByCode(targetCode);
			System.out.println(ruleDetails+" "+drools.getRule().getName()+" targetBe :: " + targetBe);
			
			String type = beUtils.whoAreYou(targetCode);
			System.out.println(ruleDetails+" "+drools.getRule().getName()+" type :: " + type);
			
			String key = type.substring(7);
			System.out.println(ruleDetails+" "+drools.getRule().getName()+" key :: " + key);
			switch (type) {
				case "PRI_IS_EDU_PROVIDER":
				key = "EDU_PRO";
				System.out.println(ruleDetails+" "+drools.getRule().getName()+" key :: " + key);
				break;
			
			}
			
			output.setTypeOfResult("SIGNAL");
			output.setResultCode("START_ADD_ENTITY");
			output.setSuitCase(key);
			output.setAskSourceCode(userCode);	
			output.setTargetCode(targetCode);
		
		
			System.out.println(ruleDetails+" "+drools.getRule().getName()+" **************************************************");
			System.out.println(ruleDetails+" "+drools.getRule().getName()+" TypeOfResult: "  + output.getTypeOfResult());
			System.out.println(ruleDetails+" "+drools.getRule().getName()+" ResultCode: "    + output.getResultCode());
			System.out.println(ruleDetails+" "+drools.getRule().getName()+" SuitCase: "      + output.getSuitCase());
			System.out.println(ruleDetails+" "+drools.getRule().getName()+" AskSourceCode: " + output.getAskSourceCode());
			System.out.println(ruleDetails+" "+drools.getRule().getName()+" TargetCode: "    + output.getTargetCode());
			System.out.println(ruleDetails+" "+drools.getRule().getName()+" **************************************************");
			
			
			QDataBaseEntityMessage msg = new QDataBaseEntityMessage(targetBe);
			msg.setToken(userToken.getToken());
			msg.setReplace(true);
			VertxUtils.writeMsg("webcmds", JsonUtils.toJson(msg));

			
			QCmdMessage toastMsg = new QCmdMessage("TOAST", "INFO");
			toastMsg.setMessage("Merging " + sourceCode + " and " + targetCode);
			toastMsg.setToken(beUtils.getGennyToken().getToken());
			toastMsg.setSend(true);
			VertxUtils.writeMsg("webcmds", toastMsg);

			KeycloakUtils.updateUserDetails(beUtils, targetBe)
			
		} else {
			System.out.println(ruleDetails+" "+drools.getRule().getName()+" ERROR: Null sourceBe or targetBe. Merging failed");
			
			QCmdMessage msg = new QCmdMessage("TOAST", "INFO");
			msg.setMessage("Merging failed!");
			msg.setToken(beUtils.getGennyToken().getToken());
			msg.setSend(true);
			VertxUtils.writeMsg("webcmds", msg);
		}
		
		retract( $message);
end
