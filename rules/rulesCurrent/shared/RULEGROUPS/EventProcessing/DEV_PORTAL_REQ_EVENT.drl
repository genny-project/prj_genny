package life.genny.rules;

import org.apache.commons.lang3.StringUtils;

import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import io.vertx.core.json.JsonObject;
import java.util.Map;
import java.util.HashMap;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.List;
import com.google.gson.reflect.TypeToken;
import life.genny.qwandautils.JsonUtils;
import life.genny.utils.VertxUtils;
import life.genny.utils.TableUtils;
import life.genny.models.TableData;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.qwanda.Ask;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.utils.OutputParam;
import life.genny.jbpm.customworkitemhandlers.ShowFrame;

import java.util.List;
import java.util.ArrayList;

import java.util.concurrent.Callable;
import java.util.concurrent.CompletionService;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorCompletionService;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import life.genny.utils.SearchCallable;
import life.genny.utils.TableFrameCallable;
import life.genny.utils.CacheSearchUtils;

rule "DEV_PORTAL_REQ_EVENT"
	ruleflow-group 'EventProcessing'
	salience 2
    no-loop
    when
		message : QEventMessage( data.parentCode == "QUE_DEV_PORTAL_GRP" && data.code matches "QUE_DEV_PORTAL__.*" )
		userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken( code == "PER_SERVICE")
		beUtils : BaseEntityUtils()
	then
		System.out.println(drools.getRule().getName() + " Processings : " + message);

		String code = message.getData().getCode();

		String sourceCode = "PER_SERVICE";
		String targetCode = "PER_SERVICE";

		Attribute questionAttribute = new Attribute("QQQ_QUESTION_GROUP", "link", new DataType(String.class));
		Attribute attribute = RulesUtils.getAttribute(code.substring("QUE_DEV_PORTAL__".length()), userToken.getToken());


		Question devPortalGrpQues = new Question("QUE_DEV_PORTAL_EDIT_GRP", "Dev Portal", questionAttribute, true);
		Ask devPortalGrpAsk = new Ask(devPortalGrpQues, sourceCode, targetCode);

		Question devPortalQues = new Question("QUE_EDIT_"+attribute.getCode(), "Edit Value", attribute, true);
		Ask devPortalAsk = new Ask(devPortalQues, sourceCode, targetCode);

		Ask[] childAsks = { devPortalAsk };
		devPortalGrpAsk.setChildAsks(childAsks);

		String json = JsonUtils.toJson(devPortalGrpAsk);
		json = json.replaceAll("PER_SERVICE", userToken.getUserCode());

		devPortalGrpAsk = JsonUtils.fromJson(json, Ask.class);
		VertxUtils.sendAskMsg(beUtils, devPortalGrpAsk);

		retract(message);
	end
