package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.utils.OutputParam;
import life.genny.qwandautils.GennySettings;

import java.util.List;
import java.util.ArrayList;

rule "IS_HOST_CPY"
    ruleflow-group 'IsBaseEntity'
    no-loop true
    salience 1 
    when
	 	userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		output : OutputParam()
		baseEntityType : String(baseEntityType.equals("HOST_CPY"))
		newBe : BaseEntity()

	  
     then
 		System.out.println("IS_HOST_CPY: Rule fired" );
 		System.out.println("IS_HOST_CPY: newBe = " + newBe.getCode()); 
 		
 	/*  Construct answer with Source, Target, Attribute Code, Value */
 		BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken, userToken);
 		
 	 	beUtils.saveAnswer(new Answer(userToken.getUserCode(), newBe.getCode() ,"PRI_IS_HOST_CPY", "true"));	
 		beUtils.saveAnswer(new Answer(userToken.getUserCode(), newBe.getCode() ,"PRI_STATUS", "ACTIVE"));
 		beUtils.saveAnswer(new Answer(userToken.getUserCode(), newBe.getCode() ,"PRI_VALIDATION", "Incomplete"));
 		
 		
		
		BaseEntity user = beUtils.getBaseEntityByCode(newBe.getCode());
		String name = user.getValue("PRI_NAME",null);
	
	
	
		String endPoint = GennySettings.projectUrl + "/v7/notes";
		/*String endPoint = "https://internmatch-cyrus.gada.io/v7/notes";*/
		
		String tag = "ni";
		
		QwandaUtils.apiPostNote(endPoint, userToken.getUserCode(), tag, newBe.getCode(), "Added a Host Company: " + name, serviceToken.getToken());
		
		System.out.println("I just posted the note");
		System.out.println("Note endPoint: " +endPoint);
		System.out.println("Note userToken.getUserCode(): " +userToken.getUserCode());

		/* send the detail sbe */
/* 		long totalTime = TableUtils.searchTable(beUtils,"HOST_CPY", true, "PRI_CODE", newBe.getCode());
		System.out.println("total took " + (totalTime) + " ms");  */

		BaseEntity cpyBe = beUtils.getBaseEntityByCode(newBe.getCode());
		
		if(cpyBe != null){
			
			QDataBaseEntityMessage cpyBeMsg = new QDataBaseEntityMessage(cpyBe);
			cpyBeMsg.setToken(userToken.getToken());
			VertxUtils.writeMsg("webcmds", JsonUtils.toJson(cpyBeMsg));

			String hcName = cpyBe.getValue("PRI_NAME", null);

			if (hcName != null) {

				/* SET ASSOC HC OF HCRS */
				SearchEntity searchBE = new SearchEntity("SBE_LINKED_HCRS", "Linked HCRs")
					.addFilter("PRI_CODE", SearchEntity.StringFilter.LIKE, "PER_%")
					.addFilter("PRI_IS_HOST_CPY_REP", true)
					.addFilter("LNK_HOST_COMPANY", SearchEntity.StringFilter.LIKE, "%"+newBe.getCode()+"%")
					.setPageStart(0).setPageSize(100000);

				searchBE.setRealm(serviceToken.getRealm());
				List<BaseEntity> linkedHCRs = beUtils.getBaseEntitys(searchBE);

				for (BaseEntity hcr : linkedHCRs) {
					System.out.println("Saving PRI_ASSOC_HC = " + hcName + " for be with code " + hcr.getCode());
					beUtils.saveAnswer(new Answer(userToken.getUserCode(), hcr.getCode(), "PRI_ASSOC_HC", hcName));
				}

			} else{
				System.out.println("hcName is NULL");
			}

		} else {
			System.out.println("cpyBe is NULL");
		}

	
		output.setTypeOfResult("NONE");
		output.setResultCode("NONE");  /* dont display anything new */
		
		retract(newBe)
	
end
