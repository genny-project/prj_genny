package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.utils.OutputParam;
import life.genny.qwandautils.GennySettings;

import java.security.SecureRandom;
import java.util.stream.Collectors;

import java.util.List;
import java.util.ArrayList;

rule "IS_AGENT"
    ruleflow-group 'IsBaseEntity'
    no-loop true
    salience 1000 
    when
	 	userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		output : OutputParam()
		baseEntityType : String(baseEntityType.equals("AGENT"))
		newBe : BaseEntity()

	  
     then
 		System.out.println("IS_AGENT: Rule fired" );
 		System.out.println("IS_AGENT: newBe = " + newBe.getCode()); 
 		
 	/*  Construct answer with Source, Target, Attribute Code, Value */
 		BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken, userToken);
 		
 		beUtils.saveAnswer(new Answer(userToken.getUserCode(), newBe.getCode() ,"PRI_IS_AGENT", "true"));
 		beUtils.saveAnswer(new Answer(userToken.getUserCode(), newBe.getCode() ,"PRI_STATUS", "ACTIVE"));
		
		/* Set up in Keycloak */
		
		BaseEntity user = beUtils.getBaseEntityByCode(newBe.getCode());
		String name = user.getValue("PRI_NAME",null);
		
		String userStr = newBe.getCode();
		String[] userSplit = userStr.split("_");
		String userCode = userSplit[1];
		System.out.println("User "+user+" with userCode = "+userCode);

		String userId = "";
		
		String firstname = user.getValue("PRI_FIRSTNAME",null);
		if (firstname != null) {
			String lastname = user.getValue("PRI_LASTNAME",null);
			if (lastname != null) {
				String email = user.getValue("PRI_EMAIL",null);
				if (email != null) {
					/* TODO HACK */
					if (true) {
						String profile = user.getValue("PRI_PROFILE", null);
						if (profile != null && profile.equals("Incomplete")) {
							System.out.println("User was already Quick added, not setting new Password!");
						} else {
							userId = KeycloakUtils.updateUser(userCode,serviceToken.getToken(), serviceToken.getRealm(), email, firstname, lastname,  email, null, "user", "users");
							userId = userId.toUpperCase();
							Answer keycloakId = new Answer(beUtils.getGennyToken().getUserCode(),newBe.getCode(),"PRI_UUID",userId);
							beUtils.saveAnswer(keycloakId);
							System.out.println("Created User "+email+" in Keycloak with id = "+userId);

							/* Generate a random 15 char password */
							char[] allowed = "abcdefghijklmnopqrstuvwxyzABCDEFGJKLMNPRSTUVWXYZ0123456789^$?!@#%&".toCharArray();
							String password = new SecureRandom().ints(15, 0, allowed.length).mapToObj(i -> String.valueOf(allowed[i])).collect(Collectors.joining());
							KeycloakUtils.setPassword(serviceToken.getToken(), serviceToken.getRealm(), userId, password, true);

							/* Send them an email with their password */
							String url = GennySettings.projectUrl + "/home";
							HashMap<String, String> templateData = new HashMap<String, String>();
							templateData.put("name", firstname);
							templateData.put("password", password);
							templateData.put("url", url);
								
							List<String> bccList = Arrays.asList("internmatch@outcomelife.com.au");
							
							EmailHelper.sendGrid(beUtils, email, null, bccList, "", "d-100adae110bb46eb999cd8b48666cad0", templateData, true);		
						}
					} else {
					     System.out.println("KEYCLOAK USER CREATION DISABLED IN RULE IS_AGENT");
					}
				}
			}
		}
	
	
		String endPoint = GennySettings.projectUrl + "/v7/notes";
		/*String endPoint = "https://internmatch-cyrus.gada.io/v7/notes";*/
		
		String tag = "System";
		String userName = "System";
		String userImage = "";
		
		QwandaUtils.apiPostNote(endPoint, userToken.getUserCode(), newBe.getCode(), "Completed profile for Agent account", tag, userName, userImage, serviceToken.getToken());
		
		System.out.println("I just posted the note");
		System.out.println("Note endPoint: " +endPoint);
		System.out.println("Note userToken.getUserCode(): " +userToken.getUserCode());
		System.out.println("Note newBe.getCode(): " +newBe.getCode());
		
		retract(newBe);
	
end
