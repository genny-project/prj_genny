package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.utils.OutputParam;
import life.genny.qwandautils.GennySettings;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

import java.util.List;
import java.util.ArrayList;

rule "IS_INTERNSHIP"
    ruleflow-group 'IsBaseEntity'
    no-loop true
    salience 1 
    when
	 	userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		output : OutputParam()
		baseEntityType : String(baseEntityType.equals("Internship"))
		newBe : BaseEntity()

	  
     then
 		System.out.println("IS_INTERNSHIP: Rule fired" );
 		System.out.println("IS_INTERNSHIP: newBe = " + newBe.getCode()); 
 		
		BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken, userToken);
 		
 		/* Construct answer with Source, Target, Attribute Code, Value */
 		Answer answer = new Answer(userToken.getUserCode(), newBe.getCode() ,"PRI_IS_INTERNSHIP", "true");
 		beUtils.saveAnswer(answer);
 		
 		answer = new Answer(userToken.getUserCode(), newBe.getCode() ,"PRI_STATUS", "ACTIVE");
 		beUtils.saveAnswer(answer);
 		
 		answer = new Answer(userToken.getUserCode(), newBe.getCode() ,"PRI_IS_FULL", "false");
 		beUtils.saveAnswer(answer);
 		
 		answer = new Answer(userToken.getUserCode(), newBe.getCode() ,"PRI_CURRENT_INTERNS", "0");
 		beUtils.saveAnswer(answer);

		System.out.println("IS_INTERNSHIP: Answer = " + answer); 
		
		
		
		
		System.out.println("@@@@@@@@@@@@@ IS_INTERNSHIP RULE: CALCULATING END DATE AND TIMES @@@@@@@@@@@@@");

		String startDateTime = beUtils.getBaseEntityValueAsLocalDate(newBe.getCode(), "PRI_START_DATE").toString();
		System.out.println("startDateTime = " +startDateTime);

		if (startDateTime != null) {
				String startDate = startDateTime.toString();
				System.out.println("startDate : " + startDate); 
		
				String[] startDateArray = startDate.split("-");
		
				String str_year = startDate.split("-")[0];
				String str_month = startDate.split("-")[1];
				String str_day = startDate.split("-")[2];

				int int_year = Integer.parseInt(str_year);
				int int_month = Integer.parseInt(str_month);
				int int_day = Integer.parseInt(str_day);
				System.out.println("int_year: " +int_year + ", int_month: " + int_month + ", int_day: " + int_day);
				
				LocalDate dumbStartDate = LocalDate.of(int_year, int_month, int_day);
				
				String muddleDuration = newBe.getValue("LNK_INTERNSHIP_DURATION", null);
				System.out.println("muddleDuration : " + muddleDuration);
				
				if (muddleDuration != null) {
						String durationStr = muddleDuration.replace("\"", "").replace("[", "").replace("]", "");
						BaseEntity durationBe = beUtils.getBaseEntityByCode(durationStr);
						System.out.println("durationBe: " + durationBe);
						String realDuration = durationBe.getValue("PRI_NAME", null);
						
						if (realDuration != null) {
								Long longDuration = Long.parseLong(realDuration);
																
								LocalDate dumbEndDate = dumbStartDate.plusWeeks(longDuration);
								DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy/mm/dd");
								
								String stringDED = dumbEndDate.format(formatter);
								System.out.println("stringDED : " + stringDED);

								Answer answerEndDate = new Answer(userToken.getUserCode(), newBe.getCode(),"PRI_END_DATE", stringDED);
								beUtils.saveAnswer(answerEndDate);
								
								
						} else {
							System.out.println("ERROR: No realDuration"); 
						}
				} else {
					System.out.println("ERROR: No muddleDuration");
				}
		} else {
			System.out.println("ERROR: No startDate"); 
		}
		
		
		String linkedDPW = newBe.getValue("LNK_DAYS_PER_WEEK", null);
		System.out.println("linkedDPW : " + linkedDPW);
		
		if (linkedDPW != null) {
				linkedDPW = linkedDPW.replace("\"", "").replace("[", "").replace("]", "");
				BaseEntity linkedDPWBe = beUtils.getBaseEntityByCode(linkedDPW);
				
				String dpw = linkedDPWBe.getValue("PRI_NAME", null);
				
				if (dpw != null) {
						int idpw = Integer.parseInt(dpw);
						int intHPW = 8 * idpw;
						System.out.println(intHPW);
						
						String hoursPerWeek = intHPW +"";
						System.out.println(hoursPerWeek);
						
						Answer answerHoursPW = new Answer(userToken.getUserCode(), newBe.getCode(),"PRI_HOURS_PER_WEEK", hoursPerWeek);
						beUtils.saveAnswer(answerHoursPW);
				} else {
					System.out.println("ERROR: No dpw"); 
				}
		} else {
			System.out.println("ERROR: No linkedDPW"); 
		}
		
		
	
		
		BaseEntity user = beUtils.getBaseEntityByCode(newBe.getCode());
		String title = user.getValue("PRI_NAME",null);
		
		

		String endPoint = GennySettings.projectUrl + "/v7/notes";
		/*String endPoint = "https://internmatch-cyrus.gada.io/v7/notes";*/
		
		String tag = "ni";
		
		QwandaUtils.apiPostNote(endPoint, userToken.getUserCode(), tag, userToken.getUserCode(), "Added an Internship: " + title, serviceToken.getToken());
		
		System.out.println("I just posted the note");
		System.out.println("Note endPoint: " +endPoint);
		System.out.println("Note userToken.getUserCode(): " +userToken.getUserCode());

		/* send the detail sbe */
		long totalTime = TableUtils.searchTable(beUtils,"INTERNSHIP", true, "PRI_CODE", newBe.getCode());
		System.out.println("total took " + (totalTime) + " ms"); 
		
		output.setTypeOfResult("NONE");
		output.setResultCode("NONE");  /* dont display anything new */
		
		retract(newBe)
	
end
