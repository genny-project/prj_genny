package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.utils.OutputParam;
import life.genny.qwandautils.GennySettings;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

import java.util.List;
import java.util.ArrayList;
import org.json.JSONArray;

rule "IS_INTERNSHIP"
    ruleflow-group 'IsBaseEntity'
    no-loop true
    salience 1 
    when
	 	userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		output : OutputParam()
		baseEntityType : String(baseEntityType.equals("INTERNSHIP"))
		newBe : BaseEntity()

	  
     then
 		System.out.println("IS_INTERNSHIP: Rule fired" );
 		System.out.println("IS_INTERNSHIP: newBe = " + newBe.getCode()); 
 		
		BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken, userToken);

		List<Answer> answers = new ArrayList<>();
 		
 		/* Construct answer with Source, Target, Attribute Code, Value */
 		
 		answers.add(new Answer(userToken.getUserCode(), newBe.getCode() ,"PRI_IS_INTERNSHIP", "true"));
		answers.add(new Answer(userToken.getUserCode(), newBe.getCode() ,"PRI_STATUS", "ACTIVE"));
		answers.add(new Answer(userToken.getUserCode(), newBe.getCode() ,"PRI_IS_FULL", "false"));
		answers.add(new Answer(userToken.getUserCode(), newBe.getCode() ,"PRI_CURRENT_INTERNS", "0"));
		beUtils.saveAnswers(answers);
 				
		/* Refresh the BaseEntity because reasons... */
 		newBe = beUtils.getBaseEntityByCode(newBe.getCode());
 		
 		
 		String appHC = newBe.getValue("LNK_HOST_COMPANY", null);
		System.out.println("appHC = " + appHC);
		
		if(appHC != null) {
				appHC = appHC.replace("\"", "").replace("[", "").replace("]", "");
				System.out.println("appHC = " +appHC);
				BaseEntity appHCBe = beUtils.getBaseEntityByCode(appHC);
				System.out.println("appHCBe = " + appHCBe);
 				
 				if(appHCBe != null) {	
 						String imageHC = appHCBe.getValue("PRI_IMAGE_URL", null);
 						System.out.println("imageHC = " + imageHC);
 						
 						if(imageHC != null) {
 								answers.add(new Answer(userToken.getUserCode(), newBe.getCode() ,"PRI_IMAGE_URL", imageHC));
 								
 						} else {
							System.out.println("ERROR: Null imageHC"); 
						}
 				} else {
					System.out.println("ERROR: Null appHCBe"); 
				}
		} else {
			System.out.println("ERROR: Null appHC"); 
		}
		
		String appHCR = newBe.getValue("LNK_INTERN_SUPERVISOR", null);
		appHCR = appHCR.replace("\"", "").replace("[", "").replace("]", "");
		System.out.println("appHCR = " +appHCR);
		
		
		/* ========== Add the Internships to the HC and HCR ========== */	
		beUtils.quantumLink(userToken.getUserCode(), appHC, newBe.getCode(), "LNK_INTERNSHIPS");
		beUtils.quantumLink(userToken.getUserCode(), appHCR, newBe.getCode(), "LNK_INTERNSHIPS");
		
		
		

		JSONArray jsonArrayWhichDays = new JSONArray(beUtils.getBaseEntityValue(newBe.getCode(), "LNK_WHICH_DAYS").toString());
		
		int jsonArrayWhichDaysLength = jsonArrayWhichDays.length();
		System.out.println("jsonArrayWhichDaysLength: " + jsonArrayWhichDaysLength);

		String whichDays = "";

		for(int i=0; i<jsonArrayWhichDaysLength; i++) {
		BaseEntity whichDaysEntity = beUtils.getBaseEntityByCode(jsonArrayWhichDays.get(i).toString());
		System.out.println("whichDaysEntity: " + whichDaysEntity);
						
		if(i==0) {
				whichDays = whichDaysEntity.getName();
		} else {
				whichDays = whichDays + ", " + whichDaysEntity.getName();
		}
		
		System.out.println("whichDays: " + whichDays);
		}
		
		Answer answerWhichDays = new Answer(userToken.getUserCode(), newBe.getCode(), "PRI_WHICH_DAYS_STRIPPED", whichDays);
		answers.add(answerWhichDays);
		
	
		
		BaseEntity user = beUtils.getBaseEntityByCode(newBe.getCode());
		String title = user.getValue("PRI_NAME",null);
		
		

		String endPoint = GennySettings.projectUrl + "/v7/notes";
		/*String endPoint = "https://internmatch-cyrus.gada.io/v7/notes";*/
		
		String tag = "System";
		String userName = "System";
		String userImage = "";
		
		QwandaUtils.apiPostNote(endPoint, userToken.getUserCode(), newBe.getCode(), "Added as an Internship", tag, userName, userImage, serviceToken.getToken());
		
		System.out.println("I just posted the note");
		System.out.println("Note endPoint: " +endPoint);
		System.out.println("Note userToken.getUserCode(): " +userToken.getUserCode());
		
		
		/* ========== Sending Slack Notification ============ */
		BaseEntity agent = beUtils.getBaseEntityByCode("CPY_OUTCOME_LIFE");
		System.out.println("Slack Notification :: agent :: " + agent);
		String webhookURL = agent.getValueAsString("PRI_SLACK_NEW_INTERNSHIP_URL");
		System.out.println("Slack Notification :: webhookURL :: " + webhookURL);
		
		LocalDateTime updateTime = LocalDateTime.now();
		DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd MMM yyyy");
		String addedOn = dtf.format(updateTime);
		String assocHC = newBe.getValue("PRI_ASSOC_HC", null);
		String internshipName = newBe.getValue("PRI_NAME", null);
		LocalDate internshipStartDate = newBe.getValue("PRI_INTERNSHIP_START_DATE", null);
		
		HashMap<String, String> payloadDataMap = new HashMap<String, String>();
		payloadDataMap.put("*Host Company:* ",assocHC);
		payloadDataMap.put("*Internship Name:* ",addedOn);
		payloadDataMap.put("*Start Date:* ", internshipName);
		payloadDataMap.put("*Added on:* ", dtf.format(internshipStartDate));
		
		JsonArray jsonArray2 = new JsonArray();
		for(String key : payloadDataMap.keySet())	
		{
			JsonObject jsonChildObj = new JsonObject();
			jsonChildObj.put("type", "mrkdwn");
			jsonChildObj.put("text", key + payloadDataMap.get(key));
			jsonArray2.add(jsonChildObj);
		}
				
				JsonObject parent2 = new JsonObject();
				parent2.put("type", "section");
				parent2.put("fields", jsonArray2);
				
				JsonObject child = new JsonObject();
				child.put("type", "mrkdwn");
				child.put("text", ":new: *New Internship Opportunity Added!*");
				
				JsonObject parent = new JsonObject();
				parent.put("type", "section");
				parent.put("text", child);
				
				JsonObject parent3 = new JsonObject();
				parent3.put("type", "divider");
				
				JsonArray jsonArray = new JsonArray();
				jsonArray.add(parent);
				jsonArray.add(parent2);
				jsonArray.add(parent3);
				
				JsonObject msgPayload = new JsonObject();
     			msgPayload.put("blocks", jsonArray);
     			
     			
				
				System.out.println("Payload is" + msgPayload.toString()); 
				
				try {
					QwandaUtils.apiPostEntity(webhookURL, msgPayload.toString(), serviceToken.getToken());
				} catch (IOException e) {
					e.printStackTrace();
				}
		
		
		/* Construct Business Hours */
		String lnkBH = newBe.getValue("LNK_BUSINESS_HOURS", null);
		if(!(lnkBH.isEmpty()))
		{
			System.out.println("lnkBH = " + lnkBH);
			
	        
	        String input = lnkBH.replace("[","").replace("]","");
	      
	        String[] splt = input.split(",");
	        
	        String startStr = splt[0];
	        String endStr = splt[1];
	    
	    	String minStart = "";
	    	String minEnd = "";
	    
	    	int lenStart = startStr.length();
	    	int lenEnd = endStr.length();    
	    
	    	if (startStr.contains(".5")) {  
	          	minStart = ":30";
	          	startStr = startStr.substring(0, lenStart - 2);
	        } else {
	            minStart = ":00"; 
	        }
	        
	        if (endStr.contains(".5")) {
	            minEnd = ":30";
	          	endStr = endStr.substring(0, lenEnd - 2);
	        } else {
	            minEnd = ":00";
	        }
	    
	    
	    	double startD = Double.parseDouble(startStr);
	        double endD = Double.parseDouble(endStr);
	    
	    	String startMeridiem = "";
	        String endMeridiem = "";
	    	
	    
	        if (startD < 12.0) {
	            startMeridiem = "AM";
	        } else {
	            startMeridiem = "PM";
	            startD = startD - 12.0;
	        }
	        
	        if (endD < 12.0) {
	            endMeridiem = "AM";
	        } else {
	            endMeridiem = "PM";
	          	endD = endD - 12.0;
	        }
	    
	    	String newStartStr = String.valueOf(startD);
	    	String newEndStr = String.valueOf(endD);
	    
	    	int lenNewStart = newStartStr.length();
	    	int lenNewEnd = newEndStr.length();   
	    
	    	String trimStartStr = newStartStr.substring(0, lenNewStart - 2);
	    	String trimEndStr = newEndStr.substring(0, lenNewEnd - 2);
	    
	    	String startTime = trimStartStr + minStart + " "+ startMeridiem;
	    	String endTime = trimEndStr + minEnd + " "+ endMeridiem;
	    
	    	System.out.println("Start time = " + startTime);
	        System.out.println("End time = " + endTime);
	    
	    	String businessHours = startTime + " - " + endTime;
	    	System.out.println("Business hours = " + businessHours);
			
			if (businessHours != null) {
					answers.add(new Answer(userToken.getUserCode(), newBe.getCode(), "PRI_BUSINESS_HOURS", businessHours));
					System.out.println("businessHours: " + businessHours);	
			} else {
				System.out.println("ERROR: Null businessHours"); 
			}
		}	
		/* DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd MMM yyyy");
    	LocalDateTime created = newBe.getCreated();
		System.out.println("created = " +created);
		String prettyCreated = dtf.format(created);
    	System.out.println("prettyCreated ~ " + prettyCreated);
		answers.add(new Answer(userToken.getUserCode(), newBe.getCode(), "PRI_CREATED_DATE", prettyCreated)); */
		
		/* quantumCopy(sourceBE, sourceAtt, saveLink, strip, userToken, targetBE, targetAtt)*/
		beUtils.quantumCopy(newBe, "LNK_NO_OF_INTERNS", false, true, userToken.getUserCode(), newBe.getCode(), "PRI_NO_OF_INTERNS");
	
		
		
		/* send cmd msg */
		QCmdMessage msg = new QCmdMessage("TOAST", "INFO");
		msg.setMessage("Congrats for adding an internship - We will let you know as soon as an intern has applied.");
		msg.setToken(beUtils.getGennyToken().getToken());
		msg.setSend(true);
		VertxUtils.writeMsg("webcmds", msg);
		
		
		output.setTypeOfResult("NONE");
		output.setResultCode("NONE");  /* dont display anything new */

		beUtils.saveAnswers(answers);
		
		retract(newBe)
	
end
