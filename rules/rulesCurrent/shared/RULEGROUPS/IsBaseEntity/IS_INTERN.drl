package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.utils.OutputParam;
import life.genny.qwandautils.KeycloakUtils;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.GennySettings;
import java.util.UUID;
import life.genny.notifications.EmailHelper;
import java.util.Random;
import com.google.gson.Gson;

import java.security.SecureRandom;
import java.util.stream.Collectors;
import java.util.Collections;

import java.util.List;
import java.util.ArrayList;

rule "IS_INTERN"
    ruleflow-group 'IsBaseEntity'
    no-loop true
    salience 1000
    when
	 	userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		output : OutputParam()
		baseEntityType : String(baseEntityType.equals("INTERN"))
		newBe : BaseEntity()

     then
 		System.out.println("IS_INTERN: Rule fired" );
 		System.out.println("IS_INTERN: newBe = " + newBe.getCode());

 	/*  Construct answer with Source, Target, Attribute Code, Value */
 		BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken, userToken);

 		List<Answer> answers = new ArrayList<>();

 		/* answers.add(new Answer(userToken.getUserCode(), newBe.getCode() ,"PRI_IS_INTERN", "true")); */
 		newBe = beUtils.saveAnswer(new Answer(userToken.getUserCode(), newBe.getCode() ,"PRI_STATUS", "AVAILABLE"));
 		/* answers.add(new Answer(userToken.getUserCode(), newBe.getCode() ,"PRI_DISABLED", "false")); */
 		/* answers.add(new Answer(userToken.getUserCode(), newBe.getCode() ,"PRI_STATUS_COLOR", "default")); */
 		/* answers.add(new Answer(userToken.getUserCode(), newBe.getCode() ,"PRI_NUM_JOURNALS", "0")); */



		/* LNK_INTERNSHIP_DURATION */

		String lnkDuration = newBe.getValue("LNK_INTERNSHIP_DURATION", null);
		System.out.println("lnkDuration = " +lnkDuration);
		if (lnkDuration != null) {
				String assoc_duration = lnkDuration.replace("\"", "").replace("[", "").replace("]", "");
				System.out.println("assoc_duration = " +assoc_duration);

				BaseEntity assoc_durationBe = beUtils.getBaseEntityByCode(assoc_duration);
				System.out.println("assoc_durationBe = " + assoc_durationBe);

				if (assoc_durationBe != null) {
						assoc_duration = assoc_durationBe.getValue("PRI_NAME", null);
						System.out.println("assoc_duration = " +assoc_duration);

						newBe = beUtils.saveAnswer(new Answer(userToken.getUserCode(), newBe.getCode(), "PRI_ASSOC_DURATION", assoc_duration));

				} else {
					System.out.println("ERROR: Null assoc_durationBe");
				}
		} else {
			System.out.println("ERROR: Null assoc_duration");
		}

		/* ANZCO */
		newBe = beUtils.saveAnswer(new Answer(userToken.getUserCode(), newBe.getCode(), "PRI_ANZCO", "NA"));

		String lnkIndustry = newBe.getValue("LNK_INDUSTRY", null);
		System.out.println("lnkIndustry : " + lnkIndustry);

		String lnkOcc = newBe.getValue("LNK_OCCUPATION", null);
		System.out.println("lnkOcc : " + lnkOcc);


		String lnkCI = newBe.getValue("LNK_COMP_INTERNSHIP", null);
		System.out.println("lnkCI : " + lnkCI);


		if(lnkIndustry != null && lnkOcc != null && lnkCI != null) {

				String Industry = lnkIndustry.replace("\"", "").replace("[", "").replace("]", "");
				String Occ = lnkOcc.replace("\"", "").replace("[", "").replace("]", "");
				String CI = lnkCI.replace("\"", "").replace("[", "").replace("]", "");
				System.out.println("Industry: " + Industry);
				System.out.println("Occ: " + Occ);
				System.out.println("CI: " + CI);

				if(Industry.equals("SEL_INDUSTRY_INFORMATION_COMMUNICATION_TECHNOLOGY") && CI.equals("SEL_PROFESSIONAL_YEAR")) {
						BaseEntity occBe = beUtils.getBaseEntityByCode(Occ);
						System.out.println("occBe: " + occBe);

						if(occBe != null) {
								String anzcoCode = occBe.getValue("PRI_ANZCO", null);
								System.out.println("anzcoCode: " + anzcoCode);

								if(anzcoCode != null) {
										newBe = beUtils.saveAnswer(new Answer(userToken.getUserCode(), newBe.getCode(), "PRI_ANZCO", anzcoCode));
										System.out.println("Reached the holy land - anzcoCode: " + anzcoCode);
								} else {
									System.out.println("ERROR: Null anzcoCode");
								}
						} else {
							System.out.println("ERROR: Null occBe");
						}
				} else {
					System.out.println("DON'T STRESS: INDUSTRY and/or COMP_INTERNSHIP don't need an ANZCO Code");
				}
		} else {
			System.out.println("ERROR: Null LNK_INDUSTRY or LNK_OCCUPATION or LNK_COMP_INTERNSHIP");
		}



 		String intEP = newBe.getValue("LNK_EDU_PROVIDER", null);
		System.out.println("intEP : " + intEP);

		if(intEP != null) {
				String EP = intEP.replace("\"", "").replace("[", "").replace("]", "");
				System.out.println("EP: " + EP);

				BaseEntity intEPBe = beUtils.getBaseEntityByCode(EP);
				System.out.println("intEPBe: " + intEPBe);

				if(intEPBe != null) {
						String ep_name = intEPBe.getValue("PRI_NAME", null);
						System.out.println("ep_name: " + ep_name);

						if(ep_name != null) {
								newBe = beUtils.saveAnswer(new Answer(userToken.getUserCode(), newBe.getCode(), "PRI_ASSOC_EP", ep_name));
						} else {
							System.out.println("ERROR: Null ep_name");
						}
				} else {
					System.out.println("ERROR: Null intEPBe");
				}
		} else {
			System.out.println("ERROR: Null intEP");
		}

		/* Set up in Keycloak */

		BaseEntity user = beUtils.getBaseEntityByCode(newBe.getCode());
		String userStr = newBe.getCode();
		String[] userSplit = userStr.split("_");
		String userCode = userSplit[1];
		System.out.println("User "+user+" with userCode = "+userCode);

		String userId = "";

		String firstname = user.getValue("PRI_FIRSTNAME",null);
		if (firstname != null) {
			String lastname = user.getValue("PRI_LASTNAME",null);
			if (lastname != null) {
				String email = user.getValue("PRI_EMAIL",null);
				if (email != null) {
					/* TODO HACK */
					if (true) {
						String profile = user.getValue("PRI_PROFILE", null);
						if (profile != null && profile.equals("Incomplete")) {
							System.out.println("User was already Quick added, not setting new Password!");
						} else {
							userId = KeycloakUtils.updateUser(userCode,serviceToken.getToken(), serviceToken.getRealm(), email, firstname, lastname,  email, null, "user", "users");
							userId = userId.toUpperCase();
							Answer keycloakId = new Answer(beUtils.getGennyToken().getUserCode(),newBe.getCode(),"PRI_UUID",userId);
							newBe = beUtils.saveAnswer(keycloakId);
							System.out.println("Created User "+email+" in Keycloak with id = "+userId);

							/* Generate a random 15 char password */
							char[] allowed = "abcdefghijklmnopqrstuvwxyzABCDEFGJKLMNPRSTUVWXYZ0123456789^$?!@#%&".toCharArray();
							String password = new SecureRandom().ints(15, 0, allowed.length).mapToObj(i -> String.valueOf(allowed[i])).collect(Collectors.joining());
							KeycloakUtils.setPassword(serviceToken.getToken(), serviceToken.getRealm(), userId, password, true);

							/* Send them an email with their password */
							String url = GennySettings.projectUrl + "/home";
							HashMap<String, String> templateData = new HashMap<String, String>();
							templateData.put("name", firstname);
							templateData.put("password", password);
							templateData.put("url", url);

							List<String> bccList = Arrays.asList("internmatch@outcomelife.com.au");

							EmailHelper.sendGrid(beUtils, email, null, bccList, "", "d-100adae110bb46eb999cd8b48666cad0", templateData, true);
						}
					} else {
					     System.out.println("KEYCLOAK USER CREATION DISABLED IN RULE IS_INTERN");
					}
				}
			}
		}



		String endPoint = GennySettings.projectUrl + "/v7/notes";
		/*String endPoint = "https://internmatch-cyrus.gada.io/v7/notes";*/

		String tag = "System";
		String userName = "System";
		String userImage = "";

		QwandaUtils.apiPostNote(endPoint, userToken.getUserCode(), newBe.getCode(), "Completed profile for Intern account", tag, userName, userImage, serviceToken.getToken());

		System.out.println("I just posted the note");
		System.out.println("Note endPoint: " +endPoint);
		System.out.println("Note userToken.getUserCode(): " +userToken.getUserCode());

		BaseEntity internBe = beUtils.getBaseEntityByCode(newBe.getCode());

		if(internBe != null){

			QDataBaseEntityMessage internBeMsg = new QDataBaseEntityMessage(internBe);
			internBeMsg.setToken(userToken.getToken());
			VertxUtils.writeMsg("webcmds", JsonUtils.toJson(internBeMsg));
		}


		/* ================== BASIC AF MATCHING ALGORITHM ================== */

		/* Recommendation Algorithm Rules
		From Highest Priority to Lowest Priority
		Match of Intern Industry & Specialisation & Internship Opportunity Industry & Specialisation
		Match of Intern Location & Internship Location (By State)
		Match of Intern 'Technology Known' and Technology Used in Internship */

		String industryAttribute = "PRI_ASSOC_INDUSTRY";
		String occupationAttribute = "PRI_ASSOC_OCCUPATION";
		String stateAttribute = "PRI_ADDRESS_STATE";
		String softwareAttribute = "PRI_ASSOC_CURRENT_SOFTWARE";


		/* Gather Matching Info */
		String assocIndustry = user.getValue("PRI_ASSOC_INDUSTRY", null);
		String assocOccupation = user.getValue("PRI_ASSOC_OCCUPATION", null);
		String state = user.getValue("PRI_ADDRESS_STATE", null);
		String assocSoftware = user.getValue("PRI_ASSOC_CURRENT_SOFTWARE", null);


		if (assocIndustry == null) 		{ industryAttribute = "PRI_CODE";   assocIndustry = "BEG_%"; }
		if (assocOccupation == null) 	{ occupationAttribute = "PRI_CODE";	assocOccupation = "BEG_%"; }
		if (state == null) 				{ stateAttribute = "PRI_CODE";  	state = "BEG_%"; }
		if (assocSoftware == null) 		{ softwareAttribute = "PRI_CODE";  	assocSoftware = "BEG_%"; }


		/* Print Matching Info */
		System.out.println("Industry: " + industryAttribute + " = " + assocIndustry);
		System.out.println("Occupation: " + occupationAttribute + " = " + assocOccupation);
		System.out.println("State: " + stateAttribute + " = " + state);
		System.out.println("Software: " + softwareAttribute + " = " + assocSoftware);


		/* Get all the all the matching Internships */
	    SearchEntity internshipMatch = new SearchEntity("SBE_INTERN_RECOMMENDATIONS_BASIC", "Matching Internships")
	            .addFilter("PRI_IS_INTERNSHIP", true)
				.addFilter("PRI_CODE", SearchEntity.StringFilter.LIKE, "BEG_%")

				.addFilter(industryAttribute, SearchEntity.StringFilter.LIKE, assocIndustry)
				.addFilter(stateAttribute, SearchEntity.StringFilter.LIKE, state)
				/*.addFilter(occupationAttribute, SearchEntity.StringFilter.LIKE, assocOccupation)
				.addFilter(softwareAttribute, SearchEntity.StringFilter.LIKE, assocSoftware)*/

				/* Table Columns */
				.addColumn("PRI_IMAGE_URL", "Company Logo")
				.addColumn("PRI_NAME", "Name")
				.addColumn("PRI_STATUS", "Status")
				.addColumn("PRI_ASSOC_HC", "Host Company")
				.addColumn("PRI_ADDRESS_FULL", "Address")
				.addColumn("PRI_INTERNSHIP_START_DATE", "Proposed Start Date")
				.addColumn("PRI_ASSOC_INDUSTRY", "Industry")
				.addColumn("PRI_ROLES_AND_RESPONSIBILITIES", "Roles and Responsibilities")
				.addColumn("PRI_BASE_LEARNING_OUTCOMES", "Base Learning Outcomes")
				.addColumn("PRI_SPECIFIC_LEARNING_OUTCOMES", "Technical Skills Learning Outcomes")
				.addColumn("PRI_SOFTWARE", "Software")
				.addColumn("PRI_WHICH_DAYS_STRIPPED", "Which Days")
				/*.addColumn("PRI_WORKSITE", "Worksite")*/
				.addColumn("PRI_ASSOC_NUM_INTERNS", "No of Interns")
				.addColumn("PRI_VIDEO_URL", "Video")

				/* Row Actions */
				.addAction("PRI_EVENT_VIEW", "View")


	            .setPageStart(0).setPageSize(1000);

	    internshipMatch.setRealm(serviceToken.getRealm());

		/* Publish Search
	    TableUtils tableUtils = new TableUtils(beUtils);
		TableUtils.searchTable(beUtils, internshipMatch, true);*/

		/* Print out nice things*/

		List<BaseEntity> internships = beUtils.getBaseEntitys(internshipMatch);
		List<BaseEntity> eligbleInternships = beUtils.getBaseEntitys(internshipMatch);

		try {
	        System.out.println("The number of matching internships is " + (internships == null ? "NULL" : internships.size()));
	        if ((internships != null) && (internships.size() > 0)) {
		        for (BaseEntity internship : internships) {
					System.out.println("Matching internship: = " +internship);

					String lnk_HC = internship.getValue("LNK_HOST_COMPANY", null);
					lnk_HC = lnk_HC.replace("\"", "").replace("[", "").replace("]", "");
					System.out.println("lnk_HC: " +lnk_HC);

					if (lnk_HC.startsWith("CPY_")){
						BaseEntity hcBe = beUtils.getBaseEntityByCode(lnk_HC);

					    String rocket = hcBe.getValue("PRI_NAME", null);
					    System.out.println("rocket: " +rocket);

					    String image = hcBe.getValue("PRI_IMAGE_URL", null);
					    System.out.println("image: " +image);

					    if (rocket.equals("Rocket Coders") || image == null || image.equals("") || image.equals(" ")) {
					    	eligbleInternships.remove(internship);
					    	System.out.println("Gone!!");
				    }

				}
			}

			/* shuffle and grab first three */
			Collections.shuffle(eligbleInternships);
			System.out.println("Eligble internships: = " +eligbleInternships);

			/*String results = "[]";*/
			ArrayList<String> results = new ArrayList<String>();
			ArrayList<BaseEntity> entities = new ArrayList<BaseEntity>();

			/*if (eligbleInternships.size() >= 3) {
				results = "[\"" + eligbleInternships.get(0) + "\", " + eligbleInternships.get(1) + "\", " + eligbleInternships.get(2) + "\"]";
				entities = eligbleInternships.subList(0, 3);
			} else if (eligbleInternships.size() == 2) {
				results = "[\"" + eligbleInternships.get(0) + "\", " + eligbleInternships.get(1) + "\"]";
				entities = eligbleInternships.subList(0, 2);
			} else if (eligbleInternships.size() == 1) {
				results = "[\"" + eligbleInternships.get(0) + "\"]";
				entities = eligbleInternships.subList(0, 1);
			}*/


			/* Getting Be codes from eligbleInternships */
			Integer counter = 0;
			for (BaseEntity eligbleInternship : eligbleInternships) {
				counter ++;
				if (!eligbleInternship.getCode().isEmpty() || eligbleInternship.getCode() != null) {
					System.out.println(counter + " -> eligbleInternship.getCode: " +eligbleInternship.getCode());
					results.add(eligbleInternship.getCode());
				} else {
					System.out.println(counter + " -> eligbleInternship.getCode is NULL");
				}
			}

			/*for (Integer i = 0; i < eligbleInternships.size(); i++) {
				if (eligbleInternships[i].getCode != null) {
					System.out.println(i + " -> eligbleInternships.getCode: " +eligbleInternships[i].getCode());
					results.add(eligbleInternships[i].getCode);
				} else {
					System.out.println(i + " -> eligbleInternships.getCode is NULL");
				}
			}*/

			/*System.out.println("Results to save on PRI_MATCHED_INTERNSHIPS::  " + results);

			newBe = beUtils.saveAnswer(new Answer(userToken.getUserCode(), newBe.getCode(), "PRI_MATCHED_INTERNSHIPS", results.toString()));*/

			/* Send BE to the FE */
			QDataBaseEntityMessage msg = new QDataBaseEntityMessage(newBe);
			msg.setToken(userToken.getToken());
			msg.setReplace(true);
			VertxUtils.writeMsg("webcmds", JsonUtils.toJson(msg));


			QDataBaseEntityMessage msgMatches = new QDataBaseEntityMessage(entities);
			msgMatches.setToken(userToken.getToken());
			msgMatches.setReplace(true);
			VertxUtils.writeMsg("webcmds", JsonUtils.toJson(msgMatches));

		}
		} catch (Exception e) {
        	e.printStackTrace();
    	}

		/* ================================================================= */



		retract(newBe);

end
