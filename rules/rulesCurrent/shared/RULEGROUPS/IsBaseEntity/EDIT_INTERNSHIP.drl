package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.notifications.NotificationHelper;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.utils.OutputParam;
import life.genny.qwandautils.GennySettings;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

import java.util.List;
import java.util.ArrayList;
import org.json.JSONArray;

rule "EDIT_INTERNSHIP"
    ruleflow-group 'IsBaseEntity'
    no-loop true
    salience 1 
    when
	 	userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		output : OutputParam()
		baseEntityType : String("INTERNSHIP".equals(baseEntityType))
		newBe : BaseEntity()

	  
     then
 		System.out.println("EDIT_INTERNSHIP: Rule fired" );
 		System.out.println("EDIT_INTERNSHIP: newBe = " + newBe.getCode()); 
 		
		BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken, userToken);

		List<Answer> answers = new ArrayList<>();
 		
		/* Refresh the BaseEntity because reasons... */
 		newBe = beUtils.getBaseEntityByCode(newBe.getCode());

 		BaseEntity parentInternshipBe = beUtils.getBaseEntityFromLNKAttr(newBe.getCode(), "LNK_INTERNSHIP");
		System.out.println(drools.getRule().getName() + " - parent internship BaseEntity: " + parentInternshipBe.getCode());

 		BaseEntity limitInternsBe = beUtils.getBaseEntityFromLNKAttr(parentInternshipBe, "LNK_NO_OF_INTERNS");
 		Integer limitNumberInterns = Integer.valueOf(limitInternsBe.getName());
 		
 		Integer currentNumberInterns = Integer.valueOf(parentInternshipBe.getValueAsString("PRI_CURRENT_INTERNS"));
 		
 		if (currentNumberInterns >= limitNumberInterns) {
 			System.out.println("currentNumberInterns: " + currentNumberInterns + " || limitNumberInterns: " + limitNumberInterns);
			System.out.println(drools.getRule().getName() + " - INTERN LIMIT REACHED FOR " + parentInternshipBe.getCode());
			
			/* Turn off Internship */
			answers.add(new Answer(userToken.getUserCode(), parentInternshipBe.getCode(), "PRI_STATUS", "FULL"));
		} else {
			answers.add(new Answer(userToken.getUserCode(), parentInternshipBe.getCode(), "PRI_STATUS", "ACTIVE"));

		}

		beUtils.saveAnswers(answers);
		
		retract(newBe)
	
end
