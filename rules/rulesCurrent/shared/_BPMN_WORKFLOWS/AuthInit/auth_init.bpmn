<?xml version="1.0" encoding="UTF-8"?>
<!-- origin at X=0.0 Y=0.0 -->
<bpmn2:definitions xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:bpmn2="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmn20="http://www.omg.org/bpmn20" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:di="http://www.omg.org/spec/DD/20100524/DI" xmlns:drools="http://www.jboss.org/drools" xmlns="http://www.jboss.org/drools" xmlns:xs="http://www.w3.org/2001/XMLSchema" xsi:schemaLocation="http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd http://www.jboss.org/drools drools.xsd http://www.bpsim.org/schemas/1.0 bpsim.xsd" id="_rgjd0GkSEeGLXa7Rf4_OXA" exporter="org.eclipse.bpmn2.modeler.core" exporterVersion="1.5.3.Final-v20210519-2007-B1" name="auth_init" targetNamespace="http://www.omg.org/bpmn20">
  <bpmn2:itemDefinition id="ItemDefinition_1" isCollection="false" structureRef="life.genny.qwanda.message.QEventMessage"/>
  <bpmn2:itemDefinition id="ItemDefinition_2" isCollection="false" structureRef="life.genny.rules.QRules"/>
  <bpmn2:itemDefinition id="ItemDefinition_3" isCollection="false" structureRef="java.lang.String"/>
  <bpmn2:itemDefinition id="ItemDefinition_6" isCollection="false" structureRef="org.kie.api.runtime.process.WorkflowProcessInstance"/>
  <bpmn2:itemDefinition id="ItemDefinition_7" isCollection="false" structureRef="life.genny.eventbus.EventBusInterface"/>
  <bpmn2:itemDefinition id="ItemDefinition_9" isCollection="false" structureRef="life.genny.eventbus.VertxCache"/>
  <bpmn2:itemDefinition id="ItemDefinition_11" isCollection="false" structureRef="life.genny.eventbus.WildflyCacheInterface"/>
  <bpmn2:itemDefinition id="ItemDefinition_5" isCollection="false" structureRef="life.genny.qwanda.message.QDataBaseEntityMessage"/>
  <bpmn2:itemDefinition id="ItemDefinition_13" isCollection="false" structureRef="life.genny.utils.VertxUtils.ESubscriptionType"/>
  <bpmn2:itemDefinition id="ItemDefinition_14" isCollection="false" structureRef="life.genny.utils.VertxUtils"/>
  <bpmn2:itemDefinition id="ItemDefinition_16" isCollection="false" structureRef="life.genny.qwanda.entity.BaseEntity"/>
  <bpmn2:itemDefinition id="ItemDefinition_18" isCollection="false" structureRef="java.util.List"/>
  <bpmn2:itemDefinition id="ItemDefinition_21" isCollection="false" structureRef="java.util.Map.Entry"/>
  <bpmn2:itemDefinition id="ItemDefinition_22" isCollection="false" structureRef="java.util.Map"/>
  <bpmn2:itemDefinition id="ItemDefinition_24" isCollection="false" structureRef="java.util.HashMap"/>
  <bpmn2:itemDefinition id="ItemDefinition_27" isCollection="false" structureRef="life.genny.qwanda.VisualControlType"/>
  <bpmn2:itemDefinition id="ItemDefinition_28" isCollection="false" structureRef="life.genny.qwanda.Context"/>
  <bpmn2:itemDefinition id="ItemDefinition_30" isCollection="false" structureRef="life.genny.qwanda.ContextList"/>
  <bpmn2:itemDefinition id="ItemDefinition_32" isCollection="false" structureRef="java.util.ArrayList"/>
  <bpmn2:itemDefinition id="ItemDefinition_34" isCollection="false" structureRef="life.genny.qwanda.Layout"/>
  <bpmn2:itemDefinition id="ItemDefinition_36" isCollection="false" structureRef="life.genny.utils.Layout.LayoutUtils"/>
  <bpmn2:itemDefinition id="ItemDefinition_38_1" isCollection="false" structureRef="life.genny.utils.Layout.LayoutPosition"/>
  <bpmn2:itemDefinition id="ItemDefinition_38" isCollection="false" structureRef="life.genny.qwanda.ContextType"/>
  <bpmn2:itemDefinition id="ItemDefinition_4" isCollection="false" structureRef="java.lang.Integer"/>
  <bpmn2:itemDefinition id="ItemDefinition_8" isCollection="false" structureRef="java.lang.Boolean"/>
  <bpmn2:itemDefinition id="ItemDefinition_12" isCollection="false" structureRef="org.apache.logging.log4j.Logger"/>
  <bpmn2:itemDefinition id="ItemDefinition_17" isCollection="false" structureRef="life.genny.models.GennyToken"/>
  <bpmn2:itemDefinition id="ItemDefinition_15" isCollection="false" structureRef="life.genny.qwanda.message.QDataAttributeMessage"/>
  <bpmn2:itemDefinition id="ItemDefinition_20" isCollection="false" structureRef="life.genny.utils.BaseEntityUtils"/>
  <bpmn2:itemDefinition id="ItemDefinition_25" isCollection="false" structureRef="life.genny.utils.RulesUtils"/>
  <bpmn2:itemDefinition id="ItemDefinition_19" isCollection="false" structureRef="life.genny.qwandautils.JsonUtils"/>
  <bpmn2:itemDefinition id="ItemDefinition_23" isCollection="false" structureRef="life.genny.qwandautils.QwandaUtils"/>
  <bpmn2:itemDefinition id="ItemDefinition_26" isCollection="false" structureRef="java.util.Optional"/>
  <bpmn2:itemDefinition id="ItemDefinition_31" isCollection="false" structureRef="life.genny.qwanda.Answer"/>
  <bpmn2:itemDefinition id="ItemDefinition_35" isCollection="false" structureRef="java.util.concurrent.CopyOnWriteArrayList"/>
  <bpmn2:itemDefinition id="ItemDefinition_29" isCollection="false" structureRef="life.genny.qwanda.message.QBulkMessage"/>
  <bpmn2:itemDefinition id="ItemDefinition_33" isCollection="false" structureRef="java.util.HashSet"/>
  <bpmn2:itemDefinition id="ItemDefinition_39" isCollection="false" structureRef="java.util.Set"/>
  <bpmn2:itemDefinition id="ItemDefinition_41" isCollection="false" structureRef="life.genny.qwanda.attribute.Attribute"/>
  <bpmn2:itemDefinition id="ItemDefinition_37" isCollection="false" structureRef="life.genny.qwanda.message.QCmdMessage"/>
  <bpmn2:itemDefinition id="ItemDefinition_40" isCollection="false" structureRef="life.genny.qwanda.attribute.EntityAttribute"/>
  <bpmn2:itemDefinition id="ItemDefinition_43" isCollection="false" structureRef="org.apache.commons.lang3.StringUtils"/>
  <bpmn2:process id="auth_init" drools:packageName="life.genny.jbpm" name="Auth Init" isExecutable="true">
    <bpmn2:extensionElements>
      <drools:import name="life.genny.qwanda.message.QEventMessage"/>
      <drools:import name="life.genny.rules.QRules"/>
      <drools:import name="java.lang.String"/>
      <drools:import name="org.kie.api.runtime.process.WorkflowProcessInstance"/>
      <drools:import name="life.genny.eventbus.EventBusInterface"/>
      <drools:import name="life.genny.eventbus.VertxCache"/>
      <drools:import name="life.genny.eventbus.WildflyCacheInterface"/>
      <drools:global identifier="processInstance" type="org.kie.api.runtime.process.WorkflowProcessInstance"/>
      <drools:import name="life.genny.qwanda.message.QDataBaseEntityMessage"/>
      <drools:import name="life.genny.utils.VertxUtils"/>
      <drools:import name="life.genny.utils.VertxUtils.ESubscriptionType"/>
      <drools:import name="life.genny.qwanda.entity.BaseEntity"/>
      <drools:import name="java.util.List"/>
      <drools:import name="java.util.Map"/>
      <drools:import name="java.util.Map.Entry"/>
      <drools:import name="java.util.HashMap"/>
      <drools:import name="life.genny.qwanda.Context"/>
      <drools:import name="life.genny.qwanda.VisualControlType"/>
      <drools:import name="life.genny.qwanda.ContextList"/>
      <drools:import name="java.util.ArrayList"/>
      <drools:import name="life.genny.qwanda.Layout"/>
      <drools:import name="life.genny.utils.Layout.LayoutUtils"/>
      <drools:import name="life.genny.utils.Layout.LayoutPosition"/>
      <drools:import name="life.genny.qwanda.ContextType"/>
      <drools:import name="org.apache.logging.log4j.Logger"/>
      <drools:import name="life.genny.models.GennyToken"/>
      <drools:global identifier="log" type="org.apache.logging.log4j.Logger"/>
      <drools:import name="life.genny.qwanda.message.QDataAttributeMessage"/>
      <drools:import name="life.genny.utils.BaseEntityUtils"/>
      <drools:import name="life.genny.utils.RulesUtils"/>
      <drools:import name="life.genny.qwandautils.JsonUtils"/>
      <drools:import name="life.genny.qwandautils.QwandaUtils"/>
      <drools:import name="java.util.Optional"/>
      <drools:import name="life.genny.qwanda.Answer"/>
      <drools:import name="java.util.concurrent.CopyOnWriteArrayList"/>
      <drools:import name="life.genny.qwanda.message.QBulkMessage"/>
      <drools:import name="java.util.HashSet"/>
      <drools:import name="java.util.Set"/>
      <drools:import name="life.genny.qwanda.attribute.Attribute"/>
      <drools:import name="life.genny.qwanda.message.QCmdMessage"/>
      <drools:import name="life.genny.qwanda.attribute.EntityAttribute"/>
      <drools:import name="org.apache.commons.lang3.StringUtils"/>
    </bpmn2:extensionElements>
    <bpmn2:property id="message" itemSubjectRef="ItemDefinition_1" name="message"/>
    <bpmn2:property id="userToken" itemSubjectRef="ItemDefinition_17" name="userToken"/>
    <bpmn2:property id="serviceToken" itemSubjectRef="ItemDefinition_17" name="serviceToken"/>
    <bpmn2:property id="currentUser" itemSubjectRef="ItemDefinition_16" name="currentUser"/>
    <bpmn2:property id="payload" itemSubjectRef="ItemDefinition_29" name="payload"/>
    <bpmn2:property id="stringSet" itemSubjectRef="ItemDefinition_33" name="stringSet"/>
    <bpmn2:property id="termsAndConditions" itemSubjectRef="ItemDefinition_8" name="termsAndConditions"/>
    <bpmn2:property id="project" itemSubjectRef="ItemDefinition_16" name="project"/>
    <bpmn2:property id="submitCode" itemSubjectRef="ItemDefinition_3" name="submitCode"/>
    <bpmn2:startEvent id="StartEvent_1" name="AuthInit">
      <bpmn2:extensionElements>
        <drools:metaData name="elementname">
          <drools:metaValue><![CDATA[AuthInit]]></drools:metaValue>
        </drools:metaData>
      </bpmn2:extensionElements>
      <bpmn2:outgoing>SequenceFlow_15</bpmn2:outgoing>
    </bpmn2:startEvent>
    <bpmn2:scriptTask id="ScriptTask_13" name="Entry" scriptFormat="http://www.java.com/java">
      <bpmn2:documentation id="Documentation_3"><![CDATA[System.out.println("Auth Init Start");
processInstance = (WorkflowProcessInstance)kcontext.getProcessInstance();
System.out.println("workprocessInstanceId = "+processInstance.getId());
Integer count = kcontext.getKieRuntime().getEntryPoint("DEFAULT").getObjects().size();
System.out.println("count="+count);

kcontext.getKieRuntime().getEntryPoint("DEFAULT").getObjects().forEach(obj -> {
	
if(obj instanceof String){
		kcontext.setVariable("name", (String)obj);
	System.out.println("FOUND STRING");
	} else if(obj instanceof QEventMessage){
		kcontext.setVariable("message", (QEventMessage)obj);
System.out.println("FOUND QEVENTMESSAGE");
	} else if (obj instanceof QRules){
		kcontext.setVariable("rules", (QRules)obj);
		System.out.println("FOUND QRULE ");
		
	}  
    });

QRules rs = ((QRules)kcontext.getVariable("rules"));
if (rs != null ){
   System.out.println("JBPM QRules="+rs.realm());
} else {
   System.out.println("rs is null");
}

]]></bpmn2:documentation>
      <bpmn2:extensionElements>
        <drools:metaData name="elementname">
          <drools:metaValue><![CDATA[Entry]]></drools:metaValue>
        </drools:metaData>
      </bpmn2:extensionElements>
      <bpmn2:incoming>SequenceFlow_15</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_10</bpmn2:outgoing>
      <bpmn2:script>/* System.out.println(&quot;authInit: AuthInit Entry&quot;); */
kcontext.setVariable(&quot;currentUser&quot;,currentUser);
kcontext.setVariable(&quot;userToken&quot;, userToken);

BaseEntityUtils beUtils = new BaseEntityUtils(userToken);
beUtils.saveAnswer(new Answer(userToken.getUserCode(), currentUser.getCode(), &quot;PRI_TERMS_ACCEPTED&quot;, true));

/*
termsAndConditions = currentUser.getValue(&quot;PRI_TERMS_ACCEPTED&quot;, null);
if (termsAndConditions == null) {
	termsAndConditions = false;
	System.out.println(&quot;termsAndConditions attr is NULL&quot;);
}

kcontext.setVariable(&quot;termsAndConditions&quot;, termsAndConditions);
*/</bpmn2:script>
    </bpmn2:scriptTask>
    <bpmn2:sequenceFlow id="SequenceFlow_15" drools:priority="1" sourceRef="StartEvent_1" targetRef="ScriptTask_13"/>
    <bpmn2:scriptTask id="ScriptTask_14" name="Send Attributes" scriptFormat="http://www.java.com/java">
      <bpmn2:extensionElements>
        <drools:metaData name="elementname">
          <drools:metaValue><![CDATA[Send Attributes]]></drools:metaValue>
        </drools:metaData>
      </bpmn2:extensionElements>
      <bpmn2:incoming>SequenceFlow_10</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_4</bpmn2:outgoing>
      <bpmn2:script>System.out.println(&quot;authInit: Send Attributes!!&quot;);

String realm = &quot;internmatch&quot;;
String key = &quot;attributes&quot;;

try {
	/* String jsonAttribute = (String) CacheUtils.readCache(realm, key); */
	QDataAttributeMessage msg = VertxUtils.getObject(userToken.getRealm(), &quot;&quot;, key, QDataAttributeMessage.class);
	msg.setToken(userToken.getToken());
		if (userToken.getToken()==null) {
				System.out.println(&quot;NULL TOKEN IN SENDING ATTRIBUTES&quot;);
		}
	VertxUtils.writeMsg(&quot;webcmds&quot;,JsonUtils.toJson(msg));
	System.out.println(&quot;authInit: All the def attributes sent &quot; + msg.getItems().length + &quot; of them&quot;);

} catch (Exception e) {
	System.out.println(&quot;authInit: No web browser to talk to!&quot;);
}</bpmn2:script>
    </bpmn2:scriptTask>
    <bpmn2:scriptTask id="ScriptTask_1" name="SendProject" scriptFormat="http://www.java.com/java">
      <bpmn2:extensionElements>
        <drools:metaData name="elementname">
          <drools:metaValue><![CDATA[SendProject]]></drools:metaValue>
        </drools:metaData>
      </bpmn2:extensionElements>
      <bpmn2:incoming>SequenceFlow_4</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_5</bpmn2:outgoing>
      <bpmn2:script>System.out.println(&quot;authInit: SendProject&quot;);
BaseEntityUtils beUtils = new BaseEntityUtils(userToken);
String projectCode = &quot;PRJ_&quot;+userToken.getRealm().toUpperCase();
/* BaseEntity project = QwandaUtils.getBaseEntityByCodeWithAttributes(projectCode, userToken.getToken()); */
project = beUtils.getBaseEntityByCode(projectCode);
kcontext.setVariable(&quot;project&quot;, project);

System.out.println(&quot;authInit: Sending &quot;+project);
VertxUtils.publish(currentUser,&quot;webcmds&quot;,project, &quot;PROJECT&quot;, userToken.getToken()); 




</bpmn2:script>
    </bpmn2:scriptTask>
    <bpmn2:sequenceFlow id="SequenceFlow_4" drools:priority="1" sourceRef="ScriptTask_14" targetRef="ScriptTask_1"/>
    <bpmn2:endEvent id="EndEvent_2" name="End Auth Init">
      <bpmn2:extensionElements>
        <drools:metaData name="elementname">
          <drools:metaValue><![CDATA[End Auth Init]]></drools:metaValue>
        </drools:metaData>
      </bpmn2:extensionElements>
      <bpmn2:incoming>SequenceFlow_6</bpmn2:incoming>
    </bpmn2:endEvent>
    <bpmn2:scriptTask id="ScriptTask_2" name="SendUser" scriptFormat="http://www.java.com/java">
      <bpmn2:extensionElements>
        <drools:metaData name="elementname">
          <drools:metaValue><![CDATA[SendUser]]></drools:metaValue>
        </drools:metaData>
      </bpmn2:extensionElements>
      <bpmn2:incoming>SequenceFlow_7</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_2</bpmn2:outgoing>
      <bpmn2:script>package life.genny.jbpm.customworkitemhandlers;

import java.lang.invoke.MethodHandles;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CopyOnWriteArrayList;
import life.genny.models.GennyToken;
import life.genny.qwanda.Answer;
import life.genny.qwanda.Ask;
import life.genny.qwanda.Question;
import life.genny.qwanda.TaskAsk;
import life.genny.qwanda.attribute.Attribute;
import life.genny.qwanda.attribute.EntityAttribute;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventMessage;
import life.genny.qwandautils.JsonUtils;
import life.genny.rules.RulesLoader;
import life.genny.utils.BaseEntityUtils;
import life.genny.utils.RulesUtils;
import life.genny.utils.SessionFacts;
import life.genny.utils.TaskUtils;
import life.genny.utils.VertxUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.Logger;
import org.drools.core.ClassObjectFilter;
import org.drools.core.process.instance.impl.WorkItemImpl;
import org.jbpm.process.core.timer.DateTimeUtils;
import org.jbpm.services.task.impl.util.HumanTaskHandlerHelper;
import org.jbpm.services.task.utils.ContentMarshallerHelper;
import org.jbpm.services.task.utils.OnErrorAction;
import org.jbpm.services.task.wih.NonManagedLocalHTWorkItemHandler;
import org.jbpm.services.task.wih.util.PeopleAssignmentHelper;
import org.kie.api.KieBase;
import org.kie.api.KieServices;
import org.kie.api.runtime.Environment;
import org.kie.api.runtime.KieSession;
import org.kie.api.runtime.KieSessionConfiguration;
import org.kie.api.runtime.manager.RuntimeEngine;
import org.kie.api.runtime.process.CaseData;
import org.kie.api.runtime.process.WorkItem;
import org.kie.api.runtime.process.WorkItemManager;
import org.kie.api.task.TaskService;
import org.kie.api.task.model.I18NText;
import org.kie.api.task.model.OrganizationalEntity;
import org.kie.api.task.model.PeopleAssignments;
import org.kie.api.task.model.Task;
import org.kie.api.task.model.User;
import org.kie.internal.runtime.StatefulKnowledgeSession;
import org.kie.internal.runtime.manager.context.EmptyContext;
import org.kie.internal.task.api.InternalTaskService;
import org.kie.internal.task.api.TaskModelProvider;
import org.kie.internal.task.api.model.ContentData;
import org.kie.internal.task.api.model.InternalI18NText;
import org.kie.internal.task.api.model.InternalOrganizationalEntity;
import org.kie.internal.task.api.model.InternalTask;
import org.kie.internal.task.api.model.InternalTaskData;

public class AskQuestionTaskWorkItemHandler extends NonManagedLocalHTWorkItemHandler {

  protected static final Logger log =
      org.apache.logging.log4j.LogManager.getLogger(
          MethodHandles.lookup().lookupClass().getCanonicalName());

  RuntimeEngine runtimeEngine;
  String wClass;
  String baseEntitySourceCode = null;
  String baseEntityTargetCode = null;

  public AskQuestionTaskWorkItemHandler() {
    super();
  }

  public &lt;R> AskQuestionTaskWorkItemHandler(
      Class&lt;R> workflowQueryInterface, KieSession ksession, TaskService taskService) {
    super(ksession, taskService);
    this.wClass = workflowQueryInterface.getCanonicalName();
  }

  public &lt;R> AskQuestionTaskWorkItemHandler(Class&lt;R> workflowQueryInterface) {
    this.wClass = workflowQueryInterface.getCanonicalName();
  }

  public &lt;R> AskQuestionTaskWorkItemHandler(
      Class&lt;R> workflowQueryInterface, RuntimeEngine rteng, KieSession session) {
    super(session, rteng.getTaskService());
    this.runtimeEngine = rteng;
    this.wClass = workflowQueryInterface.getCanonicalName();
  }

  public &lt;R> AskQuestionTaskWorkItemHandler(Class&lt;R> workflowQueryInterface, RuntimeEngine rteng) {
    super(rteng.getKieSession(), rteng.getTaskService());
    this.runtimeEngine = rteng;
    this.wClass = workflowQueryInterface.getCanonicalName();
  }

  @Override
  public void executeWorkItem(WorkItem workItem, WorkItemManager manager) {
    GennyToken userToken = (GennyToken) workItem.getParameter(&quot;userToken&quot;);
    GennyToken serviceToken = (GennyToken) workItem.getParameter(&quot;serviceToken&quot;);
    BaseEntityUtils beUtils = new BaseEntityUtils(userToken);
    if (serviceToken == null) {
      beUtils.setServiceToken(userToken);
    } else {
      beUtils.setServiceToken(serviceToken);
    }

    System.out.println(&quot;userToken = &quot; + userToken);
    System.out.println(&quot;userCode = &quot; + userToken.getUserCode());

    BaseEntity targetDefBE = null;

    if (this.runtimeEngine == null) {
      this.runtimeEngine = RulesLoader.runtimeManager.getRuntimeEngine(EmptyContext.get());
    }

    String callingWorkflow = (String) workItem.getParameter(&quot;callingWorkflow&quot;);
    if (StringUtils.isBlank(callingWorkflow)) {
      callingWorkflow = &quot;&quot;;
    }

    baseEntitySourceCode = userToken.getUserCode();
    BaseEntity baseEntitySource = (BaseEntity) workItem.getParameter(&quot;baseEntitySource&quot;);
    if (baseEntitySource != null) {
      baseEntitySourceCode = baseEntitySource.getCode();
    }

    baseEntityTargetCode = userToken.getUserCode();
    BaseEntity baseEntityTarget = (BaseEntity) workItem.getParameter(&quot;baseEntityTarget&quot;);
    if (baseEntityTarget != null) {
      baseEntityTargetCode = baseEntityTarget.getCode();
      targetDefBE = beUtils.getDEF(baseEntityTarget);
      if (&quot;DEF_PERSON&quot;.equals(targetDefBE.getCode())) {
        log.error(&quot;DEF identified as DEF_PERSON! - &quot; + baseEntityTargetCode);
      }
    }

    log.info(&quot;baseEntityTargetCode = &quot; + baseEntityTargetCode);
    log.info(&quot;baseEntitySourceCode = &quot; + baseEntitySourceCode);

    String formCode = (String) workItem.getParameter(&quot;formCode&quot;);
    String targetCode = (String) workItem.getParameter(&quot;targetCode&quot;);

    if (formCode == null) {
      formCode = &quot;FRM_QUE_TAB_VIEW&quot;;
    }

    if (targetCode == null) {
      targetCode = &quot;FRM_CONTENT&quot;;
    }

    BaseEntity target = beUtils.getBaseEntityByCode(baseEntityTargetCode);
    if (target == null) {
      log.error(&quot;TARGET BE DOES NOT EXIST - &quot; + baseEntityTargetCode);
    }
    target.setRealm(userToken.getToken());

    // remove any empty task that matches the type
    Question q = null;
    String questionCode = (String) workItem.getParameter(&quot;questionCode&quot;);
    q = TaskUtils.getQuestion(questionCode, userToken);
    if (q != null) TaskUtils.clearTaskType(userToken, q);

    Task task = null; // TaskUtils.getSameTask(q, baseEntityTargetCode, userToken);
    if (task == null) {
      task = createTaskBasedOnWorkItemParams(this.getKsession(), workItem);
    }

    // Fetch the questions and set in the task for us to tick off as they get done
    Set&lt;QDataAskMessage> formSet = ShowFrame.fetchAskMessages(task.getFormName(), userToken);
    Map&lt;String, Object> taskAsksMap = new ConcurrentHashMap&lt;String, Object>();
    List&lt;Answer> newFields = new CopyOnWriteArrayList&lt;Answer>();
    for (QDataAskMessage dataMsg : formSet) {
      Boolean createOnTrigger = false;
      for (Ask askMsg : dataMsg.getItems()) {
        createOnTrigger = askMsg.hasTriggerQuestion();
        processAsk(
            beUtils,
            task.getFormName(),
            askMsg,
            taskAsksMap,
            userToken,
            createOnTrigger,
            newFields);
      }
    }
    if (!newFields.isEmpty()) {
      List&lt;Answer> saveFields = new CopyOnWriteArrayList&lt;Answer>();
      for (Answer ans : newFields) {
        if (!(&quot;PRI_SUBMIT&quot;.equals(ans.getAttributeCode())
            || &quot;QQQ_QUESTION_GROUP&quot;.equals(ans.getAttributeCode()))) {
          saveFields.add(ans);
        }
      }
      beUtils.saveAnswers(targetDefBE, saveFields, true);

      //			for (Answer ans : newFields) {
      //				String attributeCode = ans.getAttributeCode();
      //				Boolean hasAttribute = target.containsEntityAttribute(attributeCode);
      //				if (!hasAttribute) {
      //					// create a dummy
      //
      //				}
      //
      //			}

      QDataBaseEntityMessage msg = new QDataBaseEntityMessage(target);
      msg.setToken(userToken.getToken());
      String tJson = JsonUtils.toJson(msg);

      VertxUtils.writeMsg(&quot;webcmds&quot;, tJson);
    }

    //            Attachment attach = TaskModelProvider.getFactory().newAttachment();
    //            ((InternalAttachment)attach).setAccessType(AccessType.Inline);
    //            ((InternalAttachment)attach).setAttachedAt(new Date());
    //            ((InternalAttachment)attach).setName(task.getFormName());
    //            ((InternalAttachment)attach).setContentType(&quot;String&quot;);
    //            Content content2 = TaskModelProvider.getFactory().newContent();
    //            byte[] byteArray = SerializationUtils.serialize(taskAsksMap);
    //            ((InternalContent)content2).setContent(byteArray);

    // Now tuck the intended after complete formcode into taskAsksMap
    taskAsksMap.put(&quot;FORM_CODE&quot;, formCode);
    taskAsksMap.put(&quot;TARGET_CODE&quot;, targetCode);
    //            InternalTask iTask = (InternalTask) task;
    //			InternalTaskData iTaskData = (InternalTaskData) iTask.getTaskData();
    //            iTaskData.setTaskOutputVariables(new HashMap&lt;String,Object>());
    //            task.getTaskData().getTaskOutputVariables().put(&quot;FORM_CODE&quot;, formCode);
    //            task.getTaskData().getTaskOutputVariables().put(&quot;TARGET_CODE&quot;, targetCode);

    ContentData content = createTaskContentBasedOnWorkItemParams(this.getKsession(), taskAsksMap);

    try {
      long taskId = ((InternalTaskService) this.getTaskService()).addTask(task, content);
      if (isAutoClaim(this.getKsession(), workItem, task)) {
        this.getTaskService().claim(taskId, (String) workItem.getParameter(&quot;SwimlaneActorId&quot;));
      }

      // ((InternalContent)content).setContent(ContentMarshallerHelper.marshallContent(task,
      // payload, null));
      // taskData.getAttachments().add(attach);

      sendTaskSignal(
          userToken,
          task,
          callingWorkflow); // TODO, watch the timing as the workitem may not be ready
      // if the target tries to do stuff.

      // Now update the frontend Drafts Menu with the new Task
      TaskUtils.sendTaskAskItems(userToken);

    } catch (Exception e) {
      if (action.equals(OnErrorAction.ABORT)) {
        manager.abortWorkItem(workItem.getId());
      } else if (action.equals(OnErrorAction.RETHROW)) {
        if (e instanceof RuntimeException) {
          throw (RuntimeException) e;
        } else {
          throw new RuntimeException(e);
        }
      } else if (action.equals(OnErrorAction.LOG)) {
        StringBuilder logMsg = new StringBuilder();
        logMsg
            .append(new Date())
            .append(&quot;: Error when creating task on task server for work item id &quot;)
            .append(workItem.getId());
        logMsg.append(&quot;. Error reported by task server: &quot;).append(e.getMessage());
        log.error(logMsg.toString(), e);
      }
    }
  }

  private void processAsk(
      BaseEntityUtils beUtils,
      String formName,
      Ask askMsg,
      Map&lt;String, Object> taskAsksMap,
      GennyToken userToken,
      Boolean createOnTrigger,
      List&lt;Answer> newFields) {
    // replace askMesg source and target with required src and target, initially we
    // will use both src and target
    String json = JsonUtils.toJson(askMsg);
    json = json.replaceAll(&quot;PER_SOURCE&quot;, baseEntitySourceCode);
    json = json.replaceAll(&quot;PER_TARGET&quot;, baseEntityTargetCode);
    json = json.replaceAll(&quot;PER_SERVICE&quot;, baseEntitySourceCode);
    Ask newMsg = JsonUtils.fromJson(json, Ask.class);
    String key =
        baseEntitySourceCode + &quot;:&quot; + baseEntityTargetCode + &quot;:&quot; + newMsg.getAttributeCode();
    // work out whether an Ask has already got a value for that attribute
    Boolean answered = false;
    if (&quot;PRI_SUBMIT&quot;.equals(newMsg.getAttributeCode())) {
      newMsg.setDisabled(true); // default disabled
    }

    Boolean isTableRow = false;
    // TODO, if the question is a submit then

    Boolean formTrigger = newMsg.getFormTrigger();
    TaskAsk taskAsk =
        new TaskAsk(newMsg, formName, answered, isTableRow, formTrigger, createOnTrigger);

    // Check if already answered ...
    BaseEntity target = beUtils.getBaseEntityByCode(newMsg.getTargetCode());
    Optional&lt;EntityAttribute> attributeValue =
        target.findEntityAttribute(taskAsk.getAsk().getAttributeCode());
    // Optional&lt;String> value =
    // target.getValue(taskAsk.getAsk().getAttributeCode());
    if (attributeValue.isPresent()) {
      EntityAttribute ea = attributeValue.get();
      if (StringUtils.isBlank(ea.getAsString())) {
        taskAsk.setAnswered(false);
      } else {
        taskAsk.setAnswered(true);
      }
      taskAsk.setValue(ea.getAsString());
    } else {
      // add the attribute with default value
      Attribute newAttribute =
          RulesUtils.getAttribute(taskAsk.getAsk().getAttributeCode(), userToken.getToken());
      if (newAttribute.dataType.getClassName().contains(&quot;Integer&quot;)) {
        if (newAttribute.getDefaultValue() == null) {
          newAttribute.setDefaultValue(&quot;0&quot;);
        }
      }
      try {
        Answer newField = new Answer(target, target, newAttribute, newAttribute.getDefaultValue());
        newFields.add(newField);
      } catch (Exception e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
      }
    }
    // don't add questions that are just groups
    if (!askMsg.getQuestionCode().endsWith(&quot;_GRP&quot;)) {
      taskAsksMap.put(key, taskAsk);
    }
    if ((newMsg.getChildAsks() != null) &amp;&amp; (newMsg.getChildAsks().length > 0)) {
      for (Ask childAsk : newMsg.getChildAsks()) {
        processAsk(beUtils, formName, childAsk, taskAsksMap, userToken, createOnTrigger, newFields);
      }
    }
    return;
  }

  /**
   * @param userToken
   * @param task
   * @param callingWorkflow
   */
  private void sendTaskSignal(GennyToken userToken, Task task, String callingWorkflow) {
    Long targetProcessId = null;

    QEventMessage taskMsg = new QEventMessage(&quot;EVT_MSG&quot;, &quot;TASK&quot;);
    taskMsg.getData().setValue(task.getId() + &quot;&quot;);
    taskMsg.setToken(userToken.getToken());

    SessionFacts sessionFacts =
        new SessionFacts(userToken, userToken, taskMsg); // Let the userSession know that
    // there is a question Waiting

    Method m;
    Optional&lt;Long> processIdBysessionId = Optional.empty();
    try {
      Class&lt;?> cls = Class.forName(this.wClass); // needs filtering.
      m = cls.getDeclaredMethod(&quot;getProcessIdBysessionId&quot;, String.class, String.class);
      String realm = userToken.getRealm();
      String param = userToken.getJTI();
      processIdBysessionId = (Optional&lt;Long>) m.invoke(null, (Object) realm, (Object) param);

    } catch (NoSuchMethodException | SecurityException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } catch (IllegalAccessException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } catch (IllegalArgumentException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } catch (InvocationTargetException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } catch (ClassNotFoundException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    }
    boolean hasProcessIdBySessionId = processIdBysessionId.isPresent();
    if (hasProcessIdBySessionId) {
      targetProcessId = processIdBysessionId.get();
    }

    if (targetProcessId != null) {

      long taskId = task.getId();

      log.info(
          callingWorkflow
              + &quot; &quot;
              + task.getDescription()
              + &quot; Sending Question Code  &quot;
              + task.getFormName()
              + &quot; to processId &quot;
              + targetProcessId
              + &quot; for target user &quot;
              + userToken.getUserCode()
              + &quot; using TASK &quot;
              + taskId);

      KieSessionConfiguration ksconf = KieServices.Factory.get().newKieSessionConfiguration();

      KieSession newKieSession = null;

      if (this.runtimeEngine != null) {

        newKieSession = (StatefulKnowledgeSession) this.runtimeEngine.getKieSession();
        // newKieSession.signalEvent(&quot;IS_&quot;+userToken.getJTI(), sessionFacts);
        newKieSession.signalEvent(&quot;internalSignal&quot;, sessionFacts, targetProcessId);
      } else {

        KieBase kieBase = RulesLoader.getKieBaseCache().get(userToken.getRealm());
        newKieSession = (StatefulKnowledgeSession) kieBase.newKieSession(ksconf, null);

        // newKieSession.signalEvent(&quot;IS_&quot;+userToken.getJTI(), sessionFacts);
        newKieSession.signalEvent(&quot;internalSignal&quot;, sessionFacts, targetProcessId);

        newKieSession.dispose();
      }
    }
  }

  @Override
  protected Task createTaskBasedOnWorkItemParams(KieSession session, WorkItem workItem) {

    CaseData caseFile = null;
    GennyToken userToken = (GennyToken) workItem.getParameter(&quot;userToken&quot;);
    GennyToken serviceToken = (GennyToken) workItem.getParameter(&quot;serviceToken&quot;);
    BaseEntityUtils beUtils = new BaseEntityUtils(userToken);
    beUtils.setServiceToken(serviceToken);
    String userCode = userToken.getRealm() + &quot;+&quot; + userToken.getUserCode();
    String questionCode = (String) workItem.getParameter(&quot;questionCode&quot;);
    String callingWorkflow = (String) workItem.getParameter(&quot;callingWorkflow&quot;);
    if (StringUtils.isBlank(callingWorkflow)) {
      callingWorkflow = &quot;&quot;;
    }
    Boolean liveQuestions = false;

    String liveQuestionsStr = (String) workItem.getParameter(&quot;liveQuestions&quot;);
    if (!StringUtils.isBlank(liveQuestionsStr)) {
      liveQuestions = liveQuestionsStr.toLowerCase().contains(&quot;true&quot;);
    }

    Boolean showInDrafts = true;
    String showInDraftsStr = (String) workItem.getParameter(&quot;showInDrafts&quot;);
    if (!StringUtils.isBlank(showInDraftsStr)) {
      showInDrafts = showInDraftsStr.toLowerCase().contains(&quot;true&quot;);
    }

    log.info(callingWorkflow + &quot; Live Questions are &quot; + (liveQuestions ? &quot;ON&quot; : &quot;OFF&quot;));
    log.info(callingWorkflow + &quot; Show In Drafts is &quot; + (showInDrafts ? &quot;ON&quot; : &quot;OFF&quot;));

    Question q = null;
    q = TaskUtils.getQuestion(questionCode, userToken);

    workItem.getParameters().put(&quot;SwimlaneActorId&quot;, userCode);
    workItem.getParameters().put(&quot;ActorId&quot;, userCode);

    String locale = (String) workItem.getParameter(&quot;Locale&quot;);
    if (locale == null) {
      locale = &quot;en-AU&quot;;
    }

    InternalTask task = TaskUtils.createTask(userToken, questionCode);

    if (questionCode != null) {
      List&lt;I18NText> names = new CopyOnWriteArrayList&lt;I18NText>();
      I18NText text = TaskModelProvider.getFactory().newI18NText();
      ((InternalI18NText) text).setLanguage(locale);
      ((InternalI18NText) text).setText(questionCode);
      names.add(text);
      task.setNames(names);
    }
    task.setName(questionCode);
    // this should be replaced by FormName filled by designer
    // TaskName shouldn't be trimmed if we are planning to use that for the task
    // lists
    String formName = &quot;FRM_&quot; + questionCode; // (String) workItem.getParameter(questionCode);
    if (formName != null) {
      task.setFormName(formName);
    }

    String comment = (String) workItem.getParameter(&quot;Comment&quot;);
    if (comment == null) {
      comment = &quot;&quot;;
    }

    String description = (String) workItem.getParameter(&quot;Description&quot;);
    if (description == null) {
      if (q != null) {
        description = q.getName(); // question.getName();
      } else {
        description = questionCode;
      }
    }

    List&lt;I18NText> subjects = new CopyOnWriteArrayList&lt;I18NText>();
    I18NText subjectText = TaskModelProvider.getFactory().newI18NText();
    ((InternalI18NText) subjectText).setLanguage(locale);
    ((InternalI18NText) subjectText).setText(comment);
    subjects.add(subjectText);
    task.setSubjects(subjects);
    BaseEntity baseEntityTarget = (BaseEntity) workItem.getParameter(&quot;baseEntityTarget&quot;);
    if (baseEntityTarget != null) {
      baseEntityTargetCode = baseEntityTarget.getCode();
    } else {
      log.error(&quot;No BaseEntityTarget supplied to Ask in AskQuestionWIH&quot;);
    }
    baseEntityTarget = beUtils.getBaseEntityByCode(baseEntityTargetCode); // get latest
    if (baseEntityTarget == null) {
      log.error(&quot;The Target BaseEntity DOES NOT EXIST - &quot; + baseEntityTargetCode);
      return null;
    }

    // Work out tyope of BE
    String beType = &quot;&quot;;
    List&lt;EntityAttribute> eas = baseEntityTarget.findPrefixEntityAttributes(&quot;PRI_IS_&quot;);
    if ((eas == null) || (eas.isEmpty())) {

      beType = baseEntityTarget.getValueAsString(&quot;PRI_STATUS&quot;);
      if (!StringUtils.isBlank(beType)) {
        // will be only one
        if (beType.contains(&quot;PENDING_&quot;)) {
          String attributeCode = beType.substring(&quot;PENDING_&quot;.length());
          attributeCode = attributeCode.replaceAll(&quot;_&quot;, &quot; &quot;);
          beType = StringUtils.capitalize(attributeCode.toLowerCase());
        } else {
          beType = &quot;&quot;;
        }
      }
    } else {
      Optional&lt;EntityAttribute> role = baseEntityTarget.getHighestEA(&quot;PRI_IS_&quot;);
      if (role.isPresent()) {
        String roleName = role.get().getAttributeCode();
        roleName = roleName.substring(&quot;PRI_IS_&quot;.length());
        roleName = roleName.replaceAll(&quot;_&quot;, &quot; &quot;);
        beType = StringUtils.capitalize(roleName.toLowerCase());
      }
    }

    List&lt;I18NText> descriptions = new CopyOnWriteArrayList&lt;I18NText>();
    I18NText descText = TaskModelProvider.getFactory().newI18NText();
    ((InternalI18NText) descText).setLanguage(locale);
    ((InternalI18NText) descText).setText(description);
    descriptions.add(descText);
    task.setDescriptions(descriptions);

    if (beType != null) {
      description = beType;
    }

    task.setDescription(description);

    task.setSubject(baseEntityTargetCode);

    String priorityString = (String) workItem.getParameter(&quot;Priority&quot;);
    int priority = 0;
    if (priorityString != null) {
      try {
        priority = new Integer(priorityString);
      } catch (NumberFormatException e) {
        // do nothing
      }
    }
    task.setPriority(priority);

    InternalTaskData taskData = (InternalTaskData) TaskModelProvider.getFactory().newTaskData();
    taskData.setWorkItemId(workItem.getId());
    taskData.setProcessInstanceId(workItem.getProcessInstanceId());
    if (session != null) {
      if (session.getProcessInstance(workItem.getProcessInstanceId()) != null) {
        taskData.setProcessId(
            session.getProcessInstance(workItem.getProcessInstanceId()).getProcess().getId());
        String deploymentId = ((WorkItemImpl) workItem).getDeploymentId();
        taskData.setDeploymentId(deploymentId);
      }
      if (session instanceof KieSession) {
        taskData.setProcessSessionId(((KieSession) session).getIdentifier());
        log.info(
            &quot;####### askQuestion! &quot;
                + questionCode
                + &quot; ,sessionId=&quot;
                + taskData.getProcessSessionId());
      }
      @SuppressWarnings(&quot;unchecked&quot;)
      Collection&lt;CaseData> caseFiles =
          (Collection&lt;CaseData>) session.getObjects(new ClassObjectFilter(CaseData.class));
      if (caseFiles != null &amp;&amp; caseFiles.size() == 1) {
        caseFile = caseFiles.iterator().next();
      }
    }
    taskData.setSkipable(!&quot;false&quot;.equals(workItem.getParameter(&quot;Skippable&quot;)));

    // Sub Task Data
    Long parentId = (Long) workItem.getParameter(&quot;ParentId&quot;);
    if (parentId != null) {
      taskData.setParentId(parentId);
    }

    String createdBy = userToken.getUserCode(); // (String) workItem.getParameter(&quot;CreatedBy&quot;);
    if (createdBy != null &amp;&amp; createdBy.trim().length() > 0) {
      User user = TaskModelProvider.getFactory().newUser();
      ((InternalOrganizationalEntity) user).setId(userToken.getRealm() + &quot;+&quot; + createdBy);
      taskData.setCreatedBy(user);
    }
    String dueDateString = (String) workItem.getParameter(&quot;DueDate&quot;);
    Date date = null;
    if (dueDateString != null &amp;&amp; !dueDateString.isEmpty()) {
      if (DateTimeUtils.isPeriod(dueDateString)) {
        Long longDateValue = DateTimeUtils.parseDateAsDuration(dueDateString.substring(1));
        date = new Date(System.currentTimeMillis() + longDateValue);
      } else {
        date = new Date(DateTimeUtils.parseDateTime(dueDateString));
      }
    }
    if (date != null) {
      taskData.setExpirationTime(date);
    }

    //		Map&lt;String,Object> taskInputVariables = new ConcurrentHashMap&lt;String,Object>();
    //		taskInputVariables.put(&quot;liveQuestions&quot;, liveQuestions);
    //		taskInputVariables.put(&quot;beType&quot;, beType);
    //		taskData.setTaskInputVariables(taskInputVariables);

    //// TODO HACK - until we can work out how to persist the setTaskInputVariables
    if (liveQuestions) {
      taskData.setFaultType(&quot;SEND_INFERRED&quot;);
    } else {
      taskData.setFaultType(&quot;ABSORB_INFERRED&quot;);
    }

    if (showInDrafts) {
      taskData.setFaultName(&quot;SHOW_IN_DRAFTS&quot;);
    } else {
      taskData.setFaultName(&quot;DO_NOT_SHOW_IN_DRAFTS&quot;);
    }
    PeopleAssignmentHelper peopleAssignmentHelper = new PeopleAssignmentHelper(caseFile);
    peopleAssignmentHelper.handlePeopleAssignments(workItem, task, taskData);

    PeopleAssignments peopleAssignments = task.getPeopleAssignments();
    List&lt;OrganizationalEntity> businessAdministrators =
        peopleAssignments.getBusinessAdministrators();

    task.setTaskData(taskData);
    task.setDeadlines(
        HumanTaskHandlerHelper.setDeadlines(
            workItem.getParameters(), businessAdministrators, session.getEnvironment()));

    return task;
  }

  protected ContentData createTaskContentBasedOnWorkItemParams(
      KieSession session, Map&lt;String, Object> taskAsksMap) {
    ContentData content = null;
    Object contentObject = null;
    contentObject = new ConcurrentHashMap&lt;String, Object>(taskAsksMap);
    if (contentObject != null) {
      Environment env = null;
      if (session != null) {
        env = session.getEnvironment();
      }

      content = ContentMarshallerHelper.marshal(null, contentObject, env);
    }
    return content;
  }
}
</bpmn2:script>
    </bpmn2:scriptTask>
    <bpmn2:task id="Task_1" drools:taskName="RuleFlowGroup" drools:displayName="RunRuleFlowGroup" drools:icon="icons/icon-info.gif" name="SendActionCaches">
      <bpmn2:extensionElements>
        <drools:metaData name="elementname">
          <drools:metaValue><![CDATA[SendActionCaches]]></drools:metaValue>
        </drools:metaData>
        <drools:onExit-script scriptFormat="http://www.java.com/java">
          <drools:script>QBulkMessage qp = (QBulkMessage)kcontext.getVariable(&quot;payload&quot;);
if (qp != null) {

	System.out.println(&quot;auth_init:SendActionCaches&quot;);
	/* VertxUtils.writeMsg(&quot;webcmds&quot;,qp);  */
}</drools:script>
        </drools:onExit-script>
      </bpmn2:extensionElements>
      <bpmn2:incoming>SequenceFlow_8</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_3</bpmn2:outgoing>
      <bpmn2:ioSpecification id="InputOutputSpecification_1">
        <bpmn2:dataInput id="DataInput_1" itemSubjectRef="ItemDefinition_17" name="serviceToken"/>
        <bpmn2:dataInput id="DataInput_2" itemSubjectRef="ItemDefinition_17" name="userToken"/>
        <bpmn2:dataInput id="DataInput_3" name="ruleFlowGroup"/>
        <bpmn2:dataInput id="DataInput_4" name="callingWorkflow"/>
        <bpmn2:dataOutput id="DataOutput_1" itemSubjectRef="ItemDefinition_29" name="payload"/>
        <bpmn2:inputSet id="_InputSet_2">
          <bpmn2:dataInputRefs>DataInput_1</bpmn2:dataInputRefs>
          <bpmn2:dataInputRefs>DataInput_2</bpmn2:dataInputRefs>
          <bpmn2:dataInputRefs>DataInput_3</bpmn2:dataInputRefs>
          <bpmn2:dataInputRefs>DataInput_4</bpmn2:dataInputRefs>
        </bpmn2:inputSet>
        <bpmn2:outputSet id="OutputSet_1" name="Output Set 1">
          <bpmn2:dataOutputRefs>DataOutput_1</bpmn2:dataOutputRefs>
        </bpmn2:outputSet>
      </bpmn2:ioSpecification>
      <bpmn2:dataInputAssociation id="_DataInputAssociation_2">
        <bpmn2:sourceRef>serviceToken</bpmn2:sourceRef>
        <bpmn2:targetRef>DataInput_1</bpmn2:targetRef>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataInputAssociation id="_DataInputAssociation_3">
        <bpmn2:sourceRef>userToken</bpmn2:sourceRef>
        <bpmn2:targetRef>DataInput_2</bpmn2:targetRef>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataInputAssociation id="_DataInputAssociation_4">
        <bpmn2:targetRef>DataInput_3</bpmn2:targetRef>
        <bpmn2:assignment id="Assignment_1">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_3">ActionCaches</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_1">DataInput_3</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataInputAssociation id="_DataInputAssociation_5">
        <bpmn2:targetRef>DataInput_4</bpmn2:targetRef>
        <bpmn2:assignment id="Assignment_2">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_6">auth_init:SendActionCaches</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_4">DataInput_4</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataOutputAssociation id="DataOutputAssociation_1">
        <bpmn2:sourceRef>DataOutput_1</bpmn2:sourceRef>
        <bpmn2:targetRef>payload</bpmn2:targetRef>
      </bpmn2:dataOutputAssociation>
    </bpmn2:task>
    <bpmn2:task id="Task_2" drools:taskName="RuleFlowGroup" drools:displayName="RunRuleFlowGroup" drools:icon="icons/icon-info.gif" name="Send Asks">
      <bpmn2:extensionElements>
        <drools:metaData name="elementname">
          <drools:metaValue><![CDATA[Send Asks]]></drools:metaValue>
        </drools:metaData>
      </bpmn2:extensionElements>
      <bpmn2:incoming>SequenceFlow_3</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_6</bpmn2:outgoing>
      <bpmn2:ioSpecification id="InputOutputSpecification_2">
        <bpmn2:dataInput id="DataInput_5" itemSubjectRef="ItemDefinition_17" name="serviceToken"/>
        <bpmn2:dataInput id="DataInput_6" itemSubjectRef="ItemDefinition_17" name="userToken"/>
        <bpmn2:dataInput id="DataInput_7" name="ruleFlowGroup"/>
        <bpmn2:dataInput id="DataInput_8" name="callingWorkflow"/>
        <bpmn2:inputSet id="_InputSet_120">
          <bpmn2:dataInputRefs>DataInput_5</bpmn2:dataInputRefs>
          <bpmn2:dataInputRefs>DataInput_6</bpmn2:dataInputRefs>
          <bpmn2:dataInputRefs>DataInput_7</bpmn2:dataInputRefs>
          <bpmn2:dataInputRefs>DataInput_8</bpmn2:dataInputRefs>
        </bpmn2:inputSet>
        <bpmn2:outputSet id="OutputSet_2" name="Output Set 2"/>
      </bpmn2:ioSpecification>
      <bpmn2:dataInputAssociation id="_DataInputAssociation_534">
        <bpmn2:sourceRef>serviceToken</bpmn2:sourceRef>
        <bpmn2:targetRef>DataInput_5</bpmn2:targetRef>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataInputAssociation id="_DataInputAssociation_535">
        <bpmn2:sourceRef>userToken</bpmn2:sourceRef>
        <bpmn2:targetRef>DataInput_6</bpmn2:targetRef>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataInputAssociation id="_DataInputAssociation_536">
        <bpmn2:targetRef>DataInput_7</bpmn2:targetRef>
        <bpmn2:assignment id="Assignment_3">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_7">SendAsks</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_2">DataInput_7</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataInputAssociation id="_DataInputAssociation_537">
        <bpmn2:targetRef>DataInput_8</bpmn2:targetRef>
        <bpmn2:assignment id="Assignment_4">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_10">Auth_Init</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_8">DataInput_8</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataInputAssociation>
    </bpmn2:task>
    <bpmn2:sequenceFlow id="SequenceFlow_3" drools:priority="1" sourceRef="Task_1" targetRef="Task_2"/>
    <bpmn2:sequenceFlow id="SequenceFlow_6" drools:priority="1" sourceRef="Task_2" targetRef="EndEvent_2"/>
    <bpmn2:task id="Task_3" drools:taskName="RuleFlowGroup" drools:displayName="RunRuleFlowGroup" drools:icon="icons/icon-info.gif" name="SetSubscriptions">
      <bpmn2:extensionElements>
        <drools:metaData name="elementname">
          <drools:metaValue><![CDATA[SetSubscriptions]]></drools:metaValue>
        </drools:metaData>
        <drools:onExit-script scriptFormat="http://www.java.com/java">
          <drools:script>BaseEntityUtils beUtils = new BaseEntityUtils(userToken); 
Set&lt;String> subscriptions = (Set&lt;String>)kcontext.getVariable(&quot;stringSet&quot;);
System.out.println(&quot;authinit: exit SetSubscriptions - &quot;+subscriptions);
String jsonSubscriptions = JsonUtils.toJson(subscriptions);
Attribute attribute = RulesUtils.getAttribute(&quot;PRI_SUBSCRIPTIONS&quot;, userToken.getToken());
currentUser.addAnswer(new Answer(currentUser,currentUser,attribute,jsonSubscriptions));
kcontext.setVariable(&quot;currentUser&quot;,currentUser);
System.out.println(&quot;authinit: exit SetSubscriptions - &quot;+currentUser.getValue(&quot;PRI_SUBSCRIPTIONS&quot;,&quot;&quot;));


</drools:script>
        </drools:onExit-script>
      </bpmn2:extensionElements>
      <bpmn2:incoming>SequenceFlow_5</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_7</bpmn2:outgoing>
      <bpmn2:ioSpecification id="InputOutputSpecification_3">
        <bpmn2:dataInput id="DataInput_9" itemSubjectRef="ItemDefinition_17" name="serviceToken"/>
        <bpmn2:dataInput id="DataInput_10" itemSubjectRef="ItemDefinition_17" name="userToken"/>
        <bpmn2:dataInput id="DataInput_11" name="ruleFlowGroup"/>
        <bpmn2:dataInput id="DataInput_12" name="callingWorkflow"/>
        <bpmn2:dataOutput id="DataOutput_2" itemSubjectRef="ItemDefinition_33" name="stringSet"/>
        <bpmn2:inputSet id="_InputSet_121">
          <bpmn2:dataInputRefs>DataInput_9</bpmn2:dataInputRefs>
          <bpmn2:dataInputRefs>DataInput_10</bpmn2:dataInputRefs>
          <bpmn2:dataInputRefs>DataInput_11</bpmn2:dataInputRefs>
          <bpmn2:dataInputRefs>DataInput_12</bpmn2:dataInputRefs>
        </bpmn2:inputSet>
        <bpmn2:outputSet id="OutputSet_3" name="Output Set 3">
          <bpmn2:dataOutputRefs>DataOutput_2</bpmn2:dataOutputRefs>
        </bpmn2:outputSet>
      </bpmn2:ioSpecification>
      <bpmn2:dataInputAssociation id="_DataInputAssociation_538">
        <bpmn2:sourceRef>serviceToken</bpmn2:sourceRef>
        <bpmn2:targetRef>DataInput_9</bpmn2:targetRef>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataInputAssociation id="_DataInputAssociation_539">
        <bpmn2:sourceRef>userToken</bpmn2:sourceRef>
        <bpmn2:targetRef>DataInput_10</bpmn2:targetRef>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataInputAssociation id="_DataInputAssociation_540">
        <bpmn2:targetRef>DataInput_11</bpmn2:targetRef>
        <bpmn2:assignment id="Assignment_5">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_11">SubscriptionRules</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_5">DataInput_11</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataInputAssociation id="_DataInputAssociation_541">
        <bpmn2:targetRef>DataInput_12</bpmn2:targetRef>
        <bpmn2:assignment id="Assignment_6">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_14">auth_init:SetSubscriptions</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_12">DataInput_12</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataOutputAssociation id="DataOutputAssociation_2">
        <bpmn2:sourceRef>DataOutput_2</bpmn2:sourceRef>
        <bpmn2:targetRef>stringSet</bpmn2:targetRef>
      </bpmn2:dataOutputAssociation>
    </bpmn2:task>
    <bpmn2:sequenceFlow id="SequenceFlow_5" drools:priority="1" sourceRef="ScriptTask_1" targetRef="Task_3"/>
    <bpmn2:sequenceFlow id="SequenceFlow_7" drools:priority="1" sourceRef="Task_3" targetRef="ScriptTask_2"/>
    <bpmn2:task id="Task_4" drools:taskName="RuleFlowGroup" drools:displayName="RunRuleFlowGroup" drools:icon="icons/icon-info.gif" name="SendSummary">
      <bpmn2:extensionElements>
        <drools:metaData name="elementname">
          <drools:metaValue><![CDATA[SendSummary]]></drools:metaValue>
        </drools:metaData>
      </bpmn2:extensionElements>
      <bpmn2:incoming>SequenceFlow_9</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_8</bpmn2:outgoing>
      <bpmn2:ioSpecification id="InputOutputSpecification_4">
        <bpmn2:dataInput id="DataInput_13" itemSubjectRef="ItemDefinition_17" name="serviceToken"/>
        <bpmn2:dataInput id="DataInput_14" itemSubjectRef="ItemDefinition_17" name="userToken"/>
        <bpmn2:dataInput id="DataInput_15" name="ruleFlowGroup"/>
        <bpmn2:dataInput id="DataInput_16" name="callingWorkflow"/>
        <bpmn2:inputSet id="_InputSet_122">
          <bpmn2:dataInputRefs>DataInput_13</bpmn2:dataInputRefs>
          <bpmn2:dataInputRefs>DataInput_14</bpmn2:dataInputRefs>
          <bpmn2:dataInputRefs>DataInput_15</bpmn2:dataInputRefs>
          <bpmn2:dataInputRefs>DataInput_16</bpmn2:dataInputRefs>
        </bpmn2:inputSet>
        <bpmn2:outputSet id="OutputSet_4" name="Output Set 4"/>
      </bpmn2:ioSpecification>
      <bpmn2:dataInputAssociation id="_DataInputAssociation_542">
        <bpmn2:sourceRef>serviceToken</bpmn2:sourceRef>
        <bpmn2:targetRef>DataInput_13</bpmn2:targetRef>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataInputAssociation id="_DataInputAssociation_543">
        <bpmn2:sourceRef>userToken</bpmn2:sourceRef>
        <bpmn2:targetRef>DataInput_14</bpmn2:targetRef>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataInputAssociation id="_DataInputAssociation_544">
        <bpmn2:targetRef>DataInput_15</bpmn2:targetRef>
        <bpmn2:assignment id="Assignment_7">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_15">SendSummary</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_9">DataInput_15</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataInputAssociation id="_DataInputAssociation_545">
        <bpmn2:targetRef>DataInput_16</bpmn2:targetRef>
        <bpmn2:assignment id="Assignment_8">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_18">auth_init</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_16">DataInput_16</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataInputAssociation>
    </bpmn2:task>
    <bpmn2:sequenceFlow id="SequenceFlow_8" drools:priority="1" sourceRef="Task_4" targetRef="Task_1"/>
    <bpmn2:task id="Task_5" drools:taskName="RuleFlowGroup" drools:displayName="RunRuleFlowGroup" drools:icon="icons/icon-info.gif" name="SendDashboardStuff">
      <bpmn2:extensionElements>
        <drools:metaData name="elementname">
          <drools:metaValue><![CDATA[SendDashboardStuff]]></drools:metaValue>
        </drools:metaData>
      </bpmn2:extensionElements>
      <bpmn2:incoming>SequenceFlow_11</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_9</bpmn2:outgoing>
      <bpmn2:ioSpecification id="InputOutputSpecification_5">
        <bpmn2:dataInput id="DataInput_17" itemSubjectRef="ItemDefinition_17" name="serviceToken"/>
        <bpmn2:dataInput id="DataInput_18" itemSubjectRef="ItemDefinition_17" name="userToken"/>
        <bpmn2:dataInput id="DataInput_19" name="ruleFlowGroup"/>
        <bpmn2:dataInput id="DataInput_20" name="callingWorkflow"/>
        <bpmn2:inputSet id="InputSet_1">
          <bpmn2:dataInputRefs>DataInput_17</bpmn2:dataInputRefs>
          <bpmn2:dataInputRefs>DataInput_18</bpmn2:dataInputRefs>
          <bpmn2:dataInputRefs>DataInput_19</bpmn2:dataInputRefs>
          <bpmn2:dataInputRefs>DataInput_20</bpmn2:dataInputRefs>
        </bpmn2:inputSet>
        <bpmn2:outputSet id="OutputSet_5" name="Output Set 4"/>
      </bpmn2:ioSpecification>
      <bpmn2:dataInputAssociation id="DataInputAssociation_1">
        <bpmn2:sourceRef>serviceToken</bpmn2:sourceRef>
        <bpmn2:targetRef>DataInput_17</bpmn2:targetRef>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataInputAssociation id="DataInputAssociation_2">
        <bpmn2:sourceRef>userToken</bpmn2:sourceRef>
        <bpmn2:targetRef>DataInput_18</bpmn2:targetRef>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataInputAssociation id="DataInputAssociation_3">
        <bpmn2:targetRef>DataInput_19</bpmn2:targetRef>
        <bpmn2:assignment id="Assignment_9">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_13">SendDashboardStuff</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_17">DataInput_15</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataInputAssociation id="DataInputAssociation_4">
        <bpmn2:targetRef>DataInput_20</bpmn2:targetRef>
        <bpmn2:assignment id="Assignment_10">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_19">auth_init</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_20">DataInput_16</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataInputAssociation>
    </bpmn2:task>
    <bpmn2:sequenceFlow id="SequenceFlow_9" drools:priority="1" sourceRef="Task_5" targetRef="Task_4"/>
    <bpmn2:sequenceFlow id="SequenceFlow_10" drools:priority="1" sourceRef="ScriptTask_13" targetRef="ScriptTask_14"/>
    <bpmn2:task id="Task_6" drools:taskName="RuleFlowGroup" drools:displayName="RunRuleFlowGroup" drools:icon="icons/icon-info.gif" name="SendPCMs">
      <bpmn2:extensionElements>
        <drools:metaData name="elementname">
          <drools:metaValue><![CDATA[SendPCMs]]></drools:metaValue>
        </drools:metaData>
      </bpmn2:extensionElements>
      <bpmn2:incoming>SequenceFlow_2</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_11</bpmn2:outgoing>
      <bpmn2:ioSpecification id="InputOutputSpecification_6">
        <bpmn2:dataInput id="DataInput_21" itemSubjectRef="ItemDefinition_17" name="serviceToken"/>
        <bpmn2:dataInput id="DataInput_22" itemSubjectRef="ItemDefinition_17" name="userToken"/>
        <bpmn2:dataInput id="DataInput_23" name="ruleFlowGroup"/>
        <bpmn2:dataInput id="DataInput_24" name="callingWorkflow"/>
        <bpmn2:inputSet id="InputSet_2">
          <bpmn2:dataInputRefs>DataInput_21</bpmn2:dataInputRefs>
          <bpmn2:dataInputRefs>DataInput_22</bpmn2:dataInputRefs>
          <bpmn2:dataInputRefs>DataInput_23</bpmn2:dataInputRefs>
          <bpmn2:dataInputRefs>DataInput_24</bpmn2:dataInputRefs>
        </bpmn2:inputSet>
        <bpmn2:outputSet id="OutputSet_6" name="Output Set 4"/>
      </bpmn2:ioSpecification>
      <bpmn2:dataInputAssociation id="DataInputAssociation_5">
        <bpmn2:sourceRef>serviceToken</bpmn2:sourceRef>
        <bpmn2:targetRef>DataInput_21</bpmn2:targetRef>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataInputAssociation id="DataInputAssociation_6">
        <bpmn2:sourceRef>userToken</bpmn2:sourceRef>
        <bpmn2:targetRef>DataInput_22</bpmn2:targetRef>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataInputAssociation id="DataInputAssociation_7">
        <bpmn2:targetRef>DataInput_23</bpmn2:targetRef>
        <bpmn2:assignment id="Assignment_11">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_21">SendPCMs</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_22">DataInput_15</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataInputAssociation id="DataInputAssociation_8">
        <bpmn2:targetRef>DataInput_24</bpmn2:targetRef>
        <bpmn2:assignment id="Assignment_12">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_23">auth_init</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_24">DataInput_16</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataInputAssociation>
    </bpmn2:task>
    <bpmn2:sequenceFlow id="SequenceFlow_2" drools:priority="1" sourceRef="ScriptTask_2" targetRef="Task_6"/>
    <bpmn2:sequenceFlow id="SequenceFlow_11" drools:priority="1" sourceRef="Task_6" targetRef="Task_5"/>
  </bpmn2:process>
  <bpmndi:BPMNDiagram id="BPMNDiagram_1" name="Default Process Diagram">
    <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="auth_init">
      <bpmndi:BPMNShape id="BPMNShape_1" bpmnElement="StartEvent_1">
        <dc:Bounds height="36.0" width="36.0" x="55.0" y="104.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_1" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="11.0" width="31.0" x="57.0" y="140.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_ScriptTask_13" bpmnElement="ScriptTask_13" isExpanded="true">
        <dc:Bounds height="33.0" width="63.0" x="130.0" y="105.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_2" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="11.0" width="22.0" x="150.0" y="116.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_ScriptTask_14" bpmnElement="ScriptTask_14" isExpanded="true">
        <dc:Bounds height="50.0" width="110.0" x="220.0" y="97.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_4" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="11.0" width="62.0" x="244.0" y="116.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_ScriptTask_1" bpmnElement="ScriptTask_1" isExpanded="true">
        <dc:Bounds height="50.0" width="91.0" x="350.0" y="97.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_7" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="11.0" width="50.0" x="370.0" y="116.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_EndEvent_1" bpmnElement="EndEvent_2">
        <dc:Bounds height="36.0" width="36.0" x="1380.0" y="104.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_8" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="11.0" width="52.0" x="1372.0" y="140.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_ScriptTask_2" bpmnElement="ScriptTask_2" isExpanded="true">
        <dc:Bounds height="50.0" width="75.0" x="580.0" y="97.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_3">
          <dc:Bounds height="11.0" width="41.0" x="597.0" y="116.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_Task_1" bpmnElement="Task_1" isExpanded="true">
        <dc:Bounds height="50.0" width="110.0" x="1090.0" y="97.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_5">
          <dc:Bounds height="11.0" width="77.0" x="1106.0" y="116.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_Task_2" bpmnElement="Task_2" isExpanded="true">
        <dc:Bounds height="50.0" width="110.0" x="1240.0" y="97.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_6">
          <dc:Bounds height="11.0" width="43.0" x="1273.0" y="116.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_Task_3" bpmnElement="Task_3" isExpanded="true">
        <dc:Bounds height="50.0" width="86.0" x="470.0" y="97.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_9">
          <dc:Bounds height="11.0" width="68.0" x="479.0" y="116.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_Task_4" bpmnElement="Task_4" isExpanded="true">
        <dc:Bounds height="50.0" width="110.0" x="940.0" y="97.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_10">
          <dc:Bounds height="11.0" width="60.0" x="965.0" y="116.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_Task_5" bpmnElement="Task_5" isExpanded="true">
        <dc:Bounds height="50.0" width="97.0" x="810.0" y="97.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_11">
          <dc:Bounds height="11.0" width="84.0" x="816.0" y="116.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_Task_6" bpmnElement="Task_6" isExpanded="true">
        <dc:Bounds height="50.0" width="97.0" x="682.0" y="97.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_12">
          <dc:Bounds height="11.0" width="46.0" x="707.0" y="116.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_15" bpmnElement="SequenceFlow_15" sourceElement="BPMNShape_1" targetElement="BPMNShape_ScriptTask_13">
        <di:waypoint xsi:type="dc:Point" x="91.0" y="122.0"/>
        <di:waypoint xsi:type="dc:Point" x="110.0" y="122.0"/>
        <di:waypoint xsi:type="dc:Point" x="130.0" y="121.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_17"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_4" bpmnElement="SequenceFlow_4" sourceElement="BPMNShape_ScriptTask_14" targetElement="BPMNShape_ScriptTask_1">
        <di:waypoint xsi:type="dc:Point" x="330.0" y="122.0"/>
        <di:waypoint xsi:type="dc:Point" x="340.0" y="122.0"/>
        <di:waypoint xsi:type="dc:Point" x="350.0" y="122.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_9"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_3" bpmnElement="SequenceFlow_3" sourceElement="BPMNShape_Task_1" targetElement="BPMNShape_Task_2">
        <di:waypoint xsi:type="dc:Point" x="1200.0" y="122.0"/>
        <di:waypoint xsi:type="dc:Point" x="1220.0" y="122.0"/>
        <di:waypoint xsi:type="dc:Point" x="1240.0" y="122.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_10"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_6" bpmnElement="SequenceFlow_6" sourceElement="BPMNShape_Task_2" targetElement="BPMNShape_EndEvent_1">
        <di:waypoint xsi:type="dc:Point" x="1350.0" y="122.0"/>
        <di:waypoint xsi:type="dc:Point" x="1365.0" y="122.0"/>
        <di:waypoint xsi:type="dc:Point" x="1380.0" y="122.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_11"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_5" bpmnElement="SequenceFlow_5" sourceElement="BPMNShape_ScriptTask_1" targetElement="BPMNShape_Task_3">
        <di:waypoint xsi:type="dc:Point" x="441.0" y="122.0"/>
        <di:waypoint xsi:type="dc:Point" x="455.0" y="122.0"/>
        <di:waypoint xsi:type="dc:Point" x="470.0" y="122.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_12"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_7" bpmnElement="SequenceFlow_7" sourceElement="BPMNShape_Task_3" targetElement="BPMNShape_ScriptTask_2">
        <di:waypoint xsi:type="dc:Point" x="556.0" y="122.0"/>
        <di:waypoint xsi:type="dc:Point" x="568.0" y="122.0"/>
        <di:waypoint xsi:type="dc:Point" x="580.0" y="122.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_13"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_8" bpmnElement="SequenceFlow_8" sourceElement="BPMNShape_Task_4" targetElement="BPMNShape_Task_1">
        <di:waypoint xsi:type="dc:Point" x="1050.0" y="122.0"/>
        <di:waypoint xsi:type="dc:Point" x="1073.0" y="122.0"/>
        <di:waypoint xsi:type="dc:Point" x="1090.0" y="122.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_15"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_9" bpmnElement="SequenceFlow_9" sourceElement="BPMNShape_Task_5" targetElement="BPMNShape_Task_4">
        <di:waypoint xsi:type="dc:Point" x="907.0" y="122.0"/>
        <di:waypoint xsi:type="dc:Point" x="923.0" y="122.0"/>
        <di:waypoint xsi:type="dc:Point" x="940.0" y="122.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_16"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_10" bpmnElement="SequenceFlow_10" sourceElement="BPMNShape_ScriptTask_13" targetElement="BPMNShape_ScriptTask_14">
        <di:waypoint xsi:type="dc:Point" x="193.0" y="121.0"/>
        <di:waypoint xsi:type="dc:Point" x="206.0" y="122.0"/>
        <di:waypoint xsi:type="dc:Point" x="220.0" y="122.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_18"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_2" bpmnElement="SequenceFlow_2" sourceElement="BPMNShape_ScriptTask_2" targetElement="BPMNShape_Task_6">
        <di:waypoint xsi:type="dc:Point" x="655.0" y="122.0"/>
        <di:waypoint xsi:type="dc:Point" x="668.0" y="122.0"/>
        <di:waypoint xsi:type="dc:Point" x="682.0" y="122.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_14"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_11" bpmnElement="SequenceFlow_11" sourceElement="BPMNShape_Task_6" targetElement="BPMNShape_Task_5">
        <di:waypoint xsi:type="dc:Point" x="779.0" y="122.0"/>
        <di:waypoint xsi:type="dc:Point" x="794.0" y="122.0"/>
        <di:waypoint xsi:type="dc:Point" x="810.0" y="122.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_19"/>
      </bpmndi:BPMNEdge>
    </bpmndi:BPMNPlane>
    <bpmndi:BPMNLabelStyle id="BPMNLabelStyle_1">
      <dc:Font name="arial" size="9.0"/>
    </bpmndi:BPMNLabelStyle>
  </bpmndi:BPMNDiagram>
</bpmn2:definitions>