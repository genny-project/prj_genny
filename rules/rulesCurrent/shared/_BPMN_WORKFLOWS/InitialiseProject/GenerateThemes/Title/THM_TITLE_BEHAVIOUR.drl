package life.genny.rules;








import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QBulkMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventMessage;
import life.genny.rules.QRules;
import io.vertx.core.json.JsonObject;
import life.genny.qwandautils.JsonUtils;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.List;
import java.util.ArrayList;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.utils.VertxUtils;
import life.genny.utils.BaseEntityUtils;
import life.genny.models.GennyToken;
import org.kie.api.runtime.process.WorkflowProcessInstance;
import life.genny.models.Theme;



rule "THM_TITLE_BEHAVIOUR"
    ruleflow-group 'GenerateThemes'
    no-loop true

    when
      not  Theme (code == "THM_TITLE_BEHAVIOUR")
      serviceToken : GennyToken( code == "PER_SERVICE")

    then

     	System.out.println("   Generate THM_TITLE_BEHAVIOUR Rule ");

			BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken);
			BaseEntity project = beUtils.getBaseEntityByCode( "PRJ_" + serviceToken.getRealm().toUpperCase());

			Theme theme = Theme.builder("THM_TITLE_BEHAVIOUR")
										.addAttribute(ThemeAttributeType.PRI_HAS_INPUT, false).end()
										.addAttribute(ThemeAttributeType.PRI_HAS_LABEL, true).end()
										.build();  


			theme.setRealm(serviceToken.getRealm());

			insert(theme);

			VertxUtils.putObject(serviceToken.getRealm(), "", theme.getCode(), theme, serviceToken.getToken());
end
