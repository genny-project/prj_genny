package life.genny.rules;



import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QBulkMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventMessage;
import life.genny.rules.QRules;
import io.vertx.core.json.JsonObject;
import life.genny.qwandautils.JsonUtils;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.List;
import java.util.ArrayList;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.utils.VertxUtils;
import life.genny.utils.BaseEntityUtils;
import life.genny.models.GennyToken;
import org.kie.api.runtime.process.WorkflowProcessInstance;
import life.genny.models.Theme;
import life.genny.models.ThemeAttributeType;



rule "THM_CARD"
    ruleflow-group 'GenerateThemes'
    no-loop true
    
    when
      not  Theme (code == "THM_CARD")
      serviceToken : GennyToken( code == "PER_SERVICE")
      
    then
    
     	System.out.println("   Generate THM_CARD Rule ");
      
      /* Theme theme = Theme.builder("THM_CARD")
                        .addAttribute(ThemeAttributeType.PRI_IS_INHERITABLE, false)
                        .end().addAttribute().marginBottom(20).height(150).flexGrow(0).flexShrink(0)
                        .flexBasis("initial").backgroundColor("#F8F9FA").width("100%").shadowColor("#000")
                        .shadowOpacity(0.4).shadowRadius(5).end().addAttribute().shadowOffset().width(0)
                        .height(0).end().end().build(); */

      Theme theme = Theme.builder("THM_CARD")
                    .addAttribute()
                      .backgroundColor("white")
                      .height("auto")
                      .width("100%")
                      .backgroundColor("#F8F9FA")
                      .flexBasis("initial")
                      .flexGrow(0)
                      .flexShrink(0)
                      .marginBottom(20)
                      .shadowColor("#000")
                      .shadowOffset()
                        .height(0)
                        .width(0)                                        
                      .end()
                      .shadowOpacity(0.4)
                      .shadowRadius(5)
                    .end()
                    .addAttribute(ThemeAttributeType.PRI_IS_INHERITABLE, false).end()
                    .build();

		theme.setRealm(serviceToken.getRealm());
		
		insert(theme);

		VertxUtils.putObject(serviceToken.getRealm(), "", theme.getCode(), theme, serviceToken.getToken());
	 
end
