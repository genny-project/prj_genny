package life.genny.rules;


global org.apache.logging.log4j.Logger log;

import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QBulkMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.rules.QRules;
import io.vertx.core.json.JsonObject;
import life.genny.qwandautils.JsonUtils;
import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.utils.VertxUtils;
import life.genny.utils.BaseEntityUtils;
import life.genny.models.GennyToken;
import org.kie.api.runtime.process.WorkflowProcessInstance;
import life.genny.models.Frame3;
import life.genny.models.Theme;
import life.genny.utils.FrameUtils2;
import life.genny.models.FramePosition;
import life.genny.qwanda.validation.Validation;
import life.genny.qwanda.validation.ValidationList;
import life.genny.qwanda.datatype.DataType;

rule "FRM_TABLE_CONTENT"
    ruleflow-group 'GenerateFrames'

    when
      not  Frame3(code == "FRM_TABLE_CONTENT")
      serviceToken : GennyToken( code == "PER_SERVICE")
    then
        System.out.println("   Generate FRM_TABLE_CONTENT Rule  "+serviceToken.getUserCode());

        Validation tableRowValidation = new Validation("VLD_ANYTHING", "Anything", ".*");

        List<Validation> tableRowValidations = new ArrayList<>();
        tableRowValidations.add(tableRowValidation);

        ValidationList tableRowValidationList = new ValidationList();
        tableRowValidationList.setValidationList(tableRowValidations);

        DataType tableRowDataType = new DataType("DTT_TABLE_ROW_GRP", tableRowValidationList, "Table Row Group", "");

        Frame3 frame =  Frame3.builder("FRM_TABLE_CONTENT")
                        .addTheme("THM_TABLE_BORDER", serviceToken).end()
                        .addTheme("THM_TABLE_CONTENT_CENTRE", ThemePosition.CENTRE, serviceToken).end()
                        .question("QUE_TABLE_RESULTS_GRP")
                                .addTheme("THM_DISPLAY_HORIZONTAL", serviceToken).dataType(tableRowDataType).weight(1.0).end()
                                .addTheme("THM_TABLE_ROW_CONTENT_WRAPPER", serviceToken).dataType(tableRowDataType).vcl(VisualControlType.GROUP).weight(1.0).end()
                                .addTheme("THM_TABLE_ROW", serviceToken).dataType(tableRowDataType).weight(1.0).end()
                                .addTheme("THM_TABLE_CONTENT", serviceToken).vcl(VisualControlType.GROUP).end()			
                                .addTheme("THM_TABLE_ROW_CELL", serviceToken).vcl(VisualControlType.VCL_WRAPPER).end()			
                        .end()
                        .build();
    
        frame.setRealm(serviceToken.getRealm());
        insert (frame);
        FrameUtils2.toMessage(frame, serviceToken);
			
end