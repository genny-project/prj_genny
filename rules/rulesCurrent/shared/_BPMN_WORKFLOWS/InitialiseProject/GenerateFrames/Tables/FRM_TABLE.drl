package life.genny.rules;


global org.apache.logging.log4j.Logger log;

import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QBulkMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.rules.QRules;
import io.vertx.core.json.JsonObject;
import life.genny.qwandautils.JsonUtils;
import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.utils.VertxUtils;
import life.genny.utils.BaseEntityUtils;
import life.genny.models.GennyToken;
import org.kie.api.runtime.process.WorkflowProcessInstance;
import life.genny.models.Frame3;
import life.genny.models.Theme;
import life.genny.utils.FrameUtils2;
import life.genny.models.FramePosition;
import life.genny.models.ThemePosition;

rule "FRM_TABLE"
    ruleflow-group 'GenerateFrames'

    when
      not  Frame3(code == "FRM_TABLE")
      serviceToken : GennyToken( code == "PER_SERVICE")
      FRM_TABLE_TITLE : Frame3 ( code == "FRM_TABLE_TITLE" )
      FRM_TABLE_WRAPPER : Frame3 ( code == "FRM_TABLE_WRAPPER" )
      
    then
        System.out.println("   Generate FRM_TABLE Rule   "+serviceToken.getUserCode());

        Theme THM_TABLE = VertxUtils.getObject(serviceToken.getRealm(), "", "THM_TABLE",
        				Theme.class, serviceToken.getToken());

 
 
        Frame3 frame = Frame3.builder("FRM_TABLE")
                      .addTheme("THM_WIDTH_100_PERCENT", ThemePosition.WRAPPER, serviceToken).end()
                      .addTheme("THM_PROJECT_COLOR_BACKGROUND", serviceToken).end()
                      .addTheme("THM_PADDING_20", ThemePosition.WRAPPER, serviceToken).end()
                      .addFrame(FRM_TABLE_TITLE, FramePosition.NORTH).end()
                      .addFrame(FRM_TABLE_WRAPPER, FramePosition.CENTRE).end()
                      .build();
    
        frame.setRealm(serviceToken.getRealm());
        insert (frame);
        FrameUtils2.toMessage(frame, serviceToken);
			
end