package life.genny.rules;


global org.apache.logging.log4j.Logger log;

import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QBulkMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.rules.QRules;
import io.vertx.core.json.JsonObject;
import life.genny.qwandautils.JsonUtils;
import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.utils.VertxUtils;
import life.genny.utils.BaseEntityUtils;
import life.genny.models.GennyToken;
import org.kie.api.runtime.process.WorkflowProcessInstance;
import life.genny.models.Frame3;
import life.genny.models.Theme;
import life.genny.utils.FrameUtils2;
import life.genny.models.FramePosition;

rule "FRM_MAINFRAME"
    ruleflow-group 'GenerateFrames'

    when
      not  Frame3(code == "FRM_MAINFRAME")
      serviceToken : GennyToken( code == "PER_SERVICE")
      FRM_SIDEBAR  : Frame3 ( code == "FRM_SIDEBAR" )
      FRM_SIDEBAR2 : Frame3 ( code == "FRM_SIDEBAR2" )
      FRM_SIDEBAR3 : Frame3 ( code == "FRM_SIDEBAR3" )
      FRM_FOOTER   : Frame3 ( code == "FRM_FOOTER" )
      FRM_CENTRE   : Frame3 ( code == "FRM_CENTRE" )  
      FRM_HEADER   : Frame3 ( code == "FRM_HEADER" )        
        
    then
     System.out.println("   Generate FRM_MAINFRAME Rule  "+serviceToken.getUserCode());

 	Frame3 frame = Frame3.builder("FRM_MAINFRAME")
 						.addTheme("THM_BACKGROUND_WHITE",serviceToken).end()
						.addFrame(FRM_SIDEBAR, FramePosition.WEST).end()
						.addFrame(FRM_SIDEBAR2, FramePosition.WEST).end()
						.addFrame(FRM_SIDEBAR3, FramePosition.WEST).end()
						.addFrame(FRM_FOOTER, FramePosition.SOUTH).end()
						.addFrame(FRM_CENTRE, FramePosition.CENTRE).end()
						.addFrame(FRM_HEADER, FramePosition.NORTH).end()
						.build();
						
	frame.setRealm(serviceToken.getRealm());
						
	insert (frame);
	
	VertxUtils.putObject(serviceToken.getRealm(), "", frame.getCode(), frame, serviceToken.getToken());
	Set<QDataAskMessage> askMsgs = new HashSet<QDataAskMessage>();

	QDataBaseEntityMessage msg = FrameUtils2.toMessage(frame, serviceToken, askMsgs);
	VertxUtils.putObject(serviceToken.getRealm(), "", frame.getCode()+"-MSG", msg, serviceToken.getToken());

end
