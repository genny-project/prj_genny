package life.genny.rules;

import java.util.Arrays;
import life.genny.utils.TableUtils;
global org.apache.logging.log4j.Logger log;
import java.util.Map;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QBulkMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.rules.QRules;
import io.vertx.core.json.JsonObject;
import life.genny.qwandautils.JsonUtils;
import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import life.genny.qwanda.ContextList;
import java.util.HashSet;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.utils.VertxUtils;
import life.genny.utils.BaseEntityUtils;
import life.genny.models.GennyToken;
import org.kie.api.runtime.process.WorkflowProcessInstance;
import life.genny.models.Frame3;
import life.genny.models.Theme;
import life.genny.utils.FrameUtils2;

rule "FRM_INTERNSHIP_DETAIL_VIEW"
    ruleflow-group 'GenerateFrames'

    when
      not  Frame3(code == "FRM_INTERNSHIP_DETAIL_VIEW")
      serviceToken : GennyToken( code == "PER_SERVICE")
      FRM_DETAIL_VIEW_TOP_CARD : Frame3 ( code == "FRM_DETAIL_VIEW_TOP_CARD" )
      FRM_DETAIL_VIEW_CARD : Frame3 ( code == "FRM_DETAIL_VIEW_CARD" )
      
    then
        System.out.println("   Generate FRM_INTERNSHIP_DETAIL_VIEW Rule  "+serviceToken.getUserCode());
		
		/*
			Setting appropriate question code !!!!	
			For top FRM_DETAIL_VIEW_TOP_CARD send questions with groupCode QUE_DETAIL_VIEW_TOP_SUMMARY_GRP
			For FRM_DETAIL_VIEW_CARD send questions with groupCode QUE_INTERNSHIP_DETAIL_SUMMARY_GRP or change to desire question group code
		*/
		
		Frame3 internshipDetails =  Frame3.clone(FRM_DETAIL_VIEW_CARD) ;
		internshipDetails.setCode("FRM_INTERNSHIP_DETAIL_SUMMARY");
		
		/*Question code should be exactly same as the SBE questiongroup code*/
		internshipDetails.setQuestionCode("QUE_INTERNSHIP_DETAIL_SUMMARY_GRP");
		internshipDetails.getQuestionGroup().setCode("QUE_INTERNSHIP_DETAIL_SUMMARY_GRP");
		internshipDetails.getQuestionGroup().setTargetAlias("BEG_INTERNSHIP_ONE");
		
 	  	Frame3 FRM_INTERNSHIP_DETAIL_VIEW = Frame3.builder("FRM_INTERNSHIP_DETAIL_VIEW_CONTENT")
						.addTheme("THM_SCROLL_VERTICAL", ThemePosition.WRAPPER, serviceToken).end()
						.addTheme("THM_DETAIL_VIEW_BODY", ThemePosition.WRAPPER, serviceToken).end()
						.addTheme("THM_JUSTIFY_CONTENT_FLEX_START", ThemePosition.CENTRE, serviceToken).end()
						.addFrame(FRM_DETAIL_VIEW_TOP_CARD,FramePosition.CENTRE).end()
						.addFrame(internshipDetails, FramePosition.CENTRE).end()
						.build();

								
		Frame3 frame = Frame3.builder("FRM_INTERNSHIP_DETAIL_VIEW")
				.addFrame(FRM_INTERNSHIP_DETAIL_VIEW).end()
				.build();
				
		frame.setRealm(serviceToken.getRealm());
		insert (frame);
		
		/*
		 *	Processing Ask
		 */
		SearchEntity searchBE = VertxUtils.getObject(serviceToken.getRealm(), "", "SBE_INTERNSHIP_DETAIL_VIEW",SearchEntity.class, serviceToken.getToken());	
		
		BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken);
		TableUtils tableUtils = new TableUtils(beUtils);
		Set<QDataAskMessage> askSet = new HashSet<QDataAskMessage>();
		Map<String, ContextList> contextListMap = new HashMap<String, ContextList>();
		Map<String, QDataAskMessage> virtualAskMap = new HashMap<String, QDataAskMessage>();
		
		/* Fetching searh resutls and labels for internship detail view */
		QDataBaseEntityMessage fetchResultMsg = tableUtils.fetchSearchResults(searchBE, serviceToken);
		Map<String, String> askLabels = tableUtils.getTableColumns(searchBE);
		List<Object> belist = new ArrayList<>(Arrays.asList(fetchResultMsg.getItems()));
		List<BaseEntity> results = (List<BaseEntity>) (List) belist;
		List<Ask> asks = TableUtils.generateQuestions(serviceToken, beUtils, results, askLabels, "PRJ_INTERNMATCH");

		/*  Ask Question code should be similar to the frame question code */
		Ask askInternshipDetail = asks.get(0);
		askInternshipDetail.setQuestionCode("QUE_INTERNSHIP_DETAIL_SUMMARY_GRP");
		askInternshipDetail.setName("Internship Details");
		
		/* Process and save to cache */
		virtualAskMap.put(askInternshipDetail.getQuestionCode(), new QDataAskMessage(askInternshipDetail));
		
		/* Fetching searh resutls and labels for internship detail view top summary*/
		searchBE = VertxUtils.getObject(serviceToken.getRealm(), "", "SBE_INTERNSHIP_DETAIL_VIEW_TOP_SUMMARY",SearchEntity.class, serviceToken.getToken());
		fetchResultMsg = tableUtils.fetchSearchResults(searchBE, serviceToken);
		askLabels = tableUtils.getTableColumns(searchBE);
		belist = new ArrayList<>(Arrays.asList(fetchResultMsg.getItems()));
		results = (List<BaseEntity>) (List) belist;
		asks = TableUtils.generateQuestions(serviceToken, beUtils, results, askLabels, "PRJ_INTERNMATCH");
		
		/*  Ask Question code should be similar to the frame question code */
		/*Ask askTopSummary = asks.get(0);
		askTopSummary.setQuestionCode("QUE_DETAIL_VIEW_TOP_SUMMARY_GRP");
		askTopSummary.setName("Internship");*/
		
		/* Process and save to cache */
		/*virtualAskMap.put(askTopSummary.getQuestionCode(), new QDataAskMessage(askTopSummary));*/

		/* generating frame sg and saving to cache */
		FrameUtils2.toMessage(frame, serviceToken,askSet,contextListMap,virtualAskMap);
		
		VertxUtils.putObject(serviceToken.getRealm(), "", frame.getCode(), frame, serviceToken.getToken());
		System.out.println("Writing to cache");
		
		VertxUtils.writeCachedJson(serviceToken.getRealm(),"ASK_" + frame.getCode(), JsonUtils.toJson(askSet.toArray()),serviceToken.getToken());
		
	end
