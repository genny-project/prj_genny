       package life.genny.rules;
global org.apache.logging.log4j.Logger log;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QBulkMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventMessage;
import life.genny.rules.QRules;
import io.vertx.core.json.JsonObject;
import java.util.List;
import java.util.ArrayList;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.utils.VertxUtils;
import life.genny.utils.BaseEntityUtils;
import life.genny.models.GennyToken;
import org.kie.api.runtime.process.WorkflowProcessInstance;
import life.genny.models.FramePosition;
import life.genny.utils.FrameUtils2;
import life.genny.models.Frame3;
import life.genny.models.FramePosition;
import life.genny.models.GennyToken;
import life.genny.models.Theme;
import life.genny.models.ThemeAttributeType;
import life.genny.qwanda.VisualControlType;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwandautils.QwandaUtils;
import java.lang.reflect.Type;
import com.google.gson.reflect.TypeToken;
import life.genny.qwandautils.JsonUtils;
import life.genny.qwandautils.GennySettings;
import life.genny.models.Frame3;
import life.genny.models.FramePosition;

rule "FRM_PRE"
    ruleflow-group 'GenerateFrames'

    when
      not  Frame3(code == "FRM_PRE")
      serviceToken : GennyToken( code == "PER_SERVICE")
       
    then
     System.out.println("   Generate FRM_PRE Rule  "+serviceToken.getUserCode());

    Frame3.Builder frame = Frame3.builder("FRM_PRE")
        .end();
						
	frame.setRealm(serviceToken.getRealm());
						
	insert (frame);
	
	/* Process and save to cache */
	FrameUtils2.toMessage(frame, serviceToken);

end
