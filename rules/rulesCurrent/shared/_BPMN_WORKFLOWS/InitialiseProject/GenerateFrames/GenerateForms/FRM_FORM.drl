package life.genny.rules;
global org.apache.logging.log4j.Logger log;
import life.genny.qwanda.message.QBulkMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventMessage;
import life.genny.rules.QRules;
import io.vertx.core.json.JsonObject;
import java.util.List;
import java.util.ArrayList;
import life.genny.models.Frame3;
import life.genny.models.FramePosition;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.utils.VertxUtils;
import life.genny.utils.BaseEntityUtils;
import life.genny.models.GennyToken;
import org.kie.api.runtime.process.WorkflowProcessInstance;
import life.genny.models.FramePosition;
import life.genny.utils.FrameUtils2;
import life.genny.models.Frame3;
import life.genny.models.FramePosition;
import life.genny.models.GennyToken;
import life.genny.models.Theme;
import life.genny.models.ThemeAttributeType;
import life.genny.qwanda.VisualControlType;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwandautils.QwandaUtils;
import java.lang.reflect.Type;
import com.google.gson.reflect.TypeToken;
import life.genny.qwandautils.JsonUtils;
import life.genny.qwandautils.GennySettings;


rule "FRM_FORM"
    ruleflow-group 'GenerateFrames'

    when
      not  Frame3(code == "FRM_FORM")

      serviceToken : GennyToken( code == "PER_SERVICE")

	
    then
        System.out.println("   Generate FRM_FORM  RULE TEST " + serviceToken.getUserCode());

				String apiUrl = GennySettings.qwandaServiceUrl + "/service/forms";

				String jsonFormCodes = QwandaUtils.apiGet(apiUrl, serviceToken.getToken());

				Type type = new TypeToken<List<String>>() {
				}.getType();
				List<String> questionCodes = JsonUtils.fromJson(jsonFormCodes, type);

				System.out.println("Array of all the Form Codes");
				System.out.println("Form Codes=" + questionCodes);
			for (String questionCode : questionCodes){
					Frame3 frame = Frame3.builder("FRM_" +  questionCode)
					.addTheme("THM_COLOR_WHITE", serviceToken).end()
					.addTheme("THM_OF", serviceToken).end()
							.question(questionCode)
							.addTheme("THM_FORM_INPUT_DEFAULT", serviceToken).vcl(VisualControlType.VCL_INPUT).weight(2.0).end()
							.addTheme("THM_FORM_LABEL_DEFAULT", serviceToken).vcl(VisualControlType.VCL_LABEL).end()
							.addTheme("THM_FORM_WRAPPER_DEFAULT", serviceToken).vcl(VisualControlType.VCL_WRAPPER).end()
							.addTheme("THM_FORM_ERROR_DEFAULT", serviceToken).vcl(VisualControlType.VCL_ERROR).end()
							.addTheme("THM_FORM_DEFAULT", serviceToken).weight(3.0).end()
							.addTheme("THM_FORM_CONTAINER_DEFAULT", serviceToken).weight(2.0).end()
					.end()
					.build();

			frame.setRealm(serviceToken.getRealm());
			System.out.println(frame.getCode());
      insert(frame); 
	
			FrameUtils2.toMessage(frame, serviceToken);
			}

end
 