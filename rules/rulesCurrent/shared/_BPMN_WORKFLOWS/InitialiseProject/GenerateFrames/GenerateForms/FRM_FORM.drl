package life.genny.rules;
global org.apache.logging.log4j.Logger log;
import life.genny.qwanda.message.QBulkMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventMessage;
import life.genny.rules.QRules;
import io.vertx.core.json.JsonObject;
import java.util.List;
import java.util.ArrayList;
import life.genny.models.Frame3;
import life.genny.models.FramePosition;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.utils.VertxUtils;
import life.genny.utils.BaseEntityUtils;
import life.genny.models.GennyToken;
import org.kie.api.runtime.process.WorkflowProcessInstance;
import life.genny.models.FramePosition;
import life.genny.utils.FrameUtils2;
import life.genny.models.Frame3;
import life.genny.models.FramePosition;
import life.genny.models.GennyToken;
import life.genny.models.Theme;
import life.genny.models.ThemeAttributeType;
import life.genny.qwanda.VisualControlType;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwandautils.QwandaUtils;
import java.lang.reflect.Type;
import com.google.gson.reflect.TypeToken;
import life.genny.qwandautils.JsonUtils;
import life.genny.qwandautils.GennySettings;


rule "FRM_FORM"
    ruleflow-group 'GenerateFrames'

    when
      not  Frame3(code == "FRM_FORM")

      serviceToken : GennyToken( code == "PER_SERVICE")

    then
    
        System.out.println("   Generate FRM_FORM  RULE TEST " + serviceToken.getUserCode());

				Validation validation = new Validation("VLD_ANYTHING", "Anything", ".*");
				Validation validationImage = new Validation("VLD_IMAGE_URL", "Text", ".*");

				List<Validation> imageValidations = new ArrayList<>();
				imageValidations.add(validationImage);

				ValidationList imageValidationsList = new ValidationList();
				imageValidationsList.setValidationList(imageValidations);

				List<Validation> validations = new ArrayList<>();
				validations.add(validation);
				
				ValidationList buttonValidationList = new ValidationList();
				buttonValidationList.setValidationList(validations);

				DataType buttonDataType = new DataType("DTT_BUTTON_EVENT", buttonValidationList, "buttonEvent", "");
				DataType imageDataType = new DataType("DTT_IMAGE",imageValidationsList,"Image", "");

				String apiUrl = GennySettings.qwandaServiceUrl + "/service/forms";
				System.out.println("QwandaServiceUrl is "+apiUrl);
				String jsonFormCodes = null;
				List<String> questionCodes = new ArrayList<String>();
				
				if (!VertxUtils.cachedEnabled) {  /* Not running junit mode */
					jsonFormCodes = QwandaUtils.apiGet(apiUrl, serviceToken.getToken());
					System.out.println("jsonFormCodes=["+jsonFormCodes+"]");

					Type type = new TypeToken<List<String>>() {
					}.getType();
					questionCodes  = JsonUtils.fromJson(jsonFormCodes, type);
				} else {
					/* used for testing */
					questionCodes.add("QUE_JOURNAL_W1D1_GRP");
				}

				System.out.println("Array of all the Form Codes");
				System.out.println("Form Codes=" + questionCodes);

				for (String questionCode : questionCodes){
				
					Frame3 frame2 = Frame3.builder("FRM_CONTENT_" +  questionCode)
								.addTheme("THM_FORM_ATTRIBUTES_GENNY", serviceToken).end()
								.question(questionCode)
									.addTheme("THM_PROJECT_COLOR_PRIMARY_VARIANT_LIGHT", serviceToken).dataType(buttonDataType).end()
									.addTheme("THM_FORM_BUTTONS", serviceToken).dataType(buttonDataType).vcl(VisualControlType.INPUT_WRAPPER).end()
									.addTheme("THM_FORM_BUTTONS_BEHAVIOUR", serviceToken).dataType(buttonDataType).end()
									.addTheme("THM_FORM_BUTTONS_BORDER", serviceToken).dataType(buttonDataType).vcl(VisualControlType.INPUT_FIELD).end()
									.addTheme("THM_FORM_IMAGE_RESTRICTIONS", serviceToken).dataType(imageDataType).vcl(VisualControlType.VCL_INPUT).end()
									.addTheme("THM_FORM_IMAGE_RESTRICTIONS_DIMENSION", serviceToken).dataType(imageDataType).vcl(VisualControlType.INPUT_SELECTED).end()
									.addTheme("THM_FORM_VCL_INPUT_GENNY", serviceToken).vcl(VisualControlType.VCL_INPUT).weight(2.0).end()
									.addTheme("THM_FORM_VCL_LABEL_GENNY", serviceToken).vcl(VisualControlType.VCL_LABEL).end()
									.addTheme("THM_FORM_VCL_WRAPPER_GENNY", serviceToken).vcl(VisualControlType.VCL_WRAPPER).end()
									.addTheme("THM_FORM_VCL_ERROR_GENNY", serviceToken).vcl(VisualControlType.VCL_ERROR).end()
									.addTheme("THM_FORM_BEHAVIOUR_GENNY", serviceToken).weight(3.0).end()
									.addTheme("THM_FORM_GROUP_LABEL_GENNY", serviceToken).vcl(VisualControlType.GROUP_LABEL).weight(3.0).end()
									.addTheme("THM_BACKGROUND_NONE", serviceToken).weight(3.0).end()
									.addTheme("THM_FORM_GROUP_WRAPPER_GENNY", serviceToken).vcl(VisualControlType.GROUP_WRAPPER).weight(3.0).end()
									.addTheme("THM_PROJECT_COLOR_SURFACE", serviceToken).vcl(VisualControlType.INPUT_ITEM_WRAPPER).end()
								.end()
							.build();
					
					frame2.setRealm(serviceToken.getRealm());
					
					Frame3 frame = Frame3.builder("FRM_" +  questionCode)
							.addFrame(frame2,FramePosition.CENTRE)
							.end()
							.build();

					frame.setRealm(serviceToken.getRealm());
					System.out.println(frame.getCode());
					FrameUtils2.toMessage(frame, serviceToken);
				}

end
