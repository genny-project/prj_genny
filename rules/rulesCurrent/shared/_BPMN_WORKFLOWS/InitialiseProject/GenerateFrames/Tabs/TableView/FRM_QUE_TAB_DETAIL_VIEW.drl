package life.genny.rules;


global org.apache.logging.log4j.Logger log;

import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QBulkMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.rules.QRules;
import io.vertx.core.json.JsonObject;
import life.genny.qwandautils.JsonUtils;
import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.utils.VertxUtils;
import life.genny.utils.BaseEntityUtils;
import life.genny.models.GennyToken;
import org.kie.api.runtime.process.WorkflowProcessInstance;
import life.genny.models.Frame3;
import life.genny.models.Theme;
import life.genny.utils.FrameUtils2;

rule "FRM_TAB_CONTENT"
    ruleflow-group 'GenerateFrames'

    when
      not  Frame3(code == "FRM_TAB_CONTENT")
      serviceToken : GennyToken( code == "PER_SERVICE")
      FRM_DETAIL_VIEW : Frame3 ( code == "FRM_DETAIL_VIEW" )
	  FRM_TAB_HEADER : Frame3 ( code == "FRM_TAB_HEADER" )
    /*  FRM_TABLE_VIEW : Frame3 ( code == "FRM_TABLE_VIEW" )*/

    then
			System.out.println("   Generate FRM_TAB_CONTENT Rule  "+serviceToken.getUserCode());
	
			Frame3 frame = Frame3.builder("FRM_TAB_CONTENT")
										.addTheme("THM_TAB_CONTENT", serviceToken).end()
										.addFrame(FRM_DETAIL_VIEW).end()
										/* comment out to see the detail or table view */
									  /* .addFrame(FRM_DETAIL_VIEW)  */
									  /* .addFrame(FRM_TABLE_VIEW)  */
										.build();

			frame.setRealm(serviceToken.getRealm());

			Frame3 frame2 = Frame3.builder("FRM_QUE_TAB_DETAIL_VIEW")
									.addTheme("THM_TABS", serviceToken).end()
									.addFrame(FRM_TAB_HEADER, FramePosition.NORTH).end()
									.addFrame(frame, FramePosition.CENTRE).end().build();
		
			frame2.setRealm(serviceToken.getRealm());
			insert (frame2);

			/* Process and save to cache */
			FrameUtils2.toMessage(frame2, serviceToken);
end