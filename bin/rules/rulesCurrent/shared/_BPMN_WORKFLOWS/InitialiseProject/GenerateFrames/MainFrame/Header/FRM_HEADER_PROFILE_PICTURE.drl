package life.genny.rules;


import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QBulkMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.rules.QRules;
import io.vertx.core.json.JsonObject;
import life.genny.qwandautils.JsonUtils;
import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.utils.VertxUtils;
import life.genny.utils.BaseEntityUtils;
import life.genny.models.GennyToken;
import org.kie.api.runtime.process.WorkflowProcessInstance;
import life.genny.models.Frame3;
import life.genny.models.Theme;
import life.genny.utils.FrameUtils2;
import life.genny.models.FramePosition;
import life.genny.qwanda.VisualControlType;

rule "FRM_HEADER_PROFILE_PICTURE"
  ruleflow-group 'GenerateFrames'

  when
    not  Frame3(code == "FRM_HEADER_PROFILE_PICTURE")
    serviceToken : GennyToken( code == "PER_SERVICE")

  then
    System.out.println(" Generate FRM_HEADER_PROFILE_PICTURE Rule  "+serviceToken.getUserCode());

    Frame3 frame = Frame3.builder("FRM_HEADER_PROFILE_PICTURE")
                  .addTheme("THM_PANEL_CONTENT_FIT", ThemePosition.WRAPPER, serviceToken).end()
                  .addTheme("THM_PADDING_RIGHT_10", ThemePosition.WRAPPER, serviceToken).end()
                  /* .addTheme("THM_BORDER_RADIUS_50",ThemePosition.VCL_WRAPPER serviceToken).end() */
                  .question("QUE_IMAGE_URL")
                    .addTheme("THM_HEADER_PROFILE_PICTURE", serviceToken)
                    .vcl(VisualControlType.VCL_INPUT)
                    .end()
                    .addTheme("THM_BORDER_RADIUS_50", serviceToken)
                    .vcl(VisualControlType.INPUT_FIELD)
                    .end()
                  .end()
                  .build();
    frame.setRealm(serviceToken.getRealm());
    insert (frame);

    /* Process and save to cache */
    FrameUtils2.toMessage(frame, serviceToken);
end