package life.genny.rules;

import life.genny.qwanda.Ask;
import life.genny.qwanda.Link;
import life.genny.rules.QRules;
import life.genny.qwanda.Answer;
import java.util.HashSet;
import life.genny.qwanda.ContextList;
import life.genny.qwanda.Question;
import life.genny.qwanda.validation.Validation;
import life.genny.qwanda.validation.ValidationList;
import life.genny.qwanda.ContextType;

rule "Paginate Table"
    when
        rules : QRules( isState("EVENT_BTN_CLICK")  &&
			            isState("ROOT_QUE_TABLE_FOOTER_GRP") &&
                        getAsString("targetCode").startsWith("SBE_") &&
                        getAsString("code").startsWith("QUE_TABLE_") &&
			            !isState("LOOP_SORT_TABLE") )
     then
      	rules.header();
		rules.setState("LOOP_SORT_TABLE");

		String searchCode = rules.getAsString("targetCode");
        rules.println("targetCode" + searchCode);
        if(searchCode == null){
            rules.println("searchCode is null");
            return;
        }

        String code = rules.getAsString("code");
        rules.println("code" + code);
        if(code == null){
            rules.println("code is null");
            return;
        }

        String paginationCode = code.split("QUE_TABLE_")[1];
        rules.println("paginationCode" + paginationCode);

        SearchEntity searchBe = rules.baseEntity.getSearchEntityByCode(searchCode);
        rules.println("search" + searchBe.getCode());

        String searchString = JsonUtils.toJson(searchBe);
		JsonObject searchJson = new JsonObject(searchString);

		JsonArray arr = searchJson.getJsonArray("baseEntityAttributes");
        Integer valueInteger = 0;

		for (int i = 0; i < arr.size(); i++) {
			JsonObject obj = arr.getJsonObject(i);
			String attributeCode = obj.getString("attributeCode");

            if (attributeCode.equals("SCH_PAGE_START")) {
                valueInteger = obj.getInteger("valueInteger");
                break;
            }
        }

        if(paginationCode.equals("PREVIOUS")){
            rules.println("it's previous pagination event");
            if(valueInteger > 0){
                valueInteger = valueInteger - 1;
            }

        }
        if(paginationCode.equals("NEXT")){
            rules.println("it's next pagination event");
            valueInteger = valueInteger + 1;

        }

        searchBe.setPageStart(valueInteger);
        VertxUtils.writeCachedJson(rules.realm(), searchBe.getCode(), JsonUtils.toJson(searchBe), rules.getToken());

        rules.set("searchBe", searchBe);

        /* create a bulk msg */
        QBulkMessage bulkMsg = new QBulkMessage();
        rules.set("bulkMsg", bulkMsg);

        rules.setState("GENERATE_TABLE_CONTENT");
        rules.setState("LOOP_GENERATE_TABLE_FOOTER");
        rules.setState("SEND_SEARCH_RESULTS");

        rules.footer();
end

